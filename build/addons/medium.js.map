{"version":3,"sources":["addons/medium.js","webpack:///webpack/bootstrap eec226ed780b276d025c?ac37**","./addons/medium/index.js","webpack:///external \"react\"?3c62**","./addons/medium/editor.js","./addons/medium/vendor/medium-editor.js"],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","Editor","React","Medium","defaultContent","html","text","render","createElement","onBlur","this","setContent","state","content",1,"require",17,"MediumEditor","Types","PropTypes","createClass","displayName","propTypes","string","isRequired","func","getDefaultProps","options","buttons","firstHeader","secondHeader","diffLeft","diffTop","disableDoubleReturn","shouldComponentUpdate","componentDidMount","setState","editor","refs","getDOMNode","props","componentWillUnmount","deactivate","className","_onBlur","role","aria-multiline","ref","dangerouslySetInnerHTML","__html","textContent","innerHTML",18,"elements","init","window","document","extend","b","a","prop","undefined","isDescendant","parent","child","node","parentNode","saveSelection","len","ranges","sel","contentWindow","getSelection","getRangeAt","rangeCount","push","restoreSelection","savedSel","removeAllRanges","addRange","getSelectionStart","ownerDocument","anchorNode","startNode","nodeType","getSelectionHtml","container","appendChild","cloneContents","selection","type","createRange","htmlText","isElement","obj","defaults","allowMultiParagraphSelection","anchorInputPlaceholder","anchorPreviewHideDelay","buttonLabels","checkLinkFormat","cleanPastedHTML","delay","disableReturn","disableToolbar","disableEditing","elementsContainer","forcePlainText","placeholder","targetBlank","anchorTarget","anchorButton","anchorButtonClass","extensions","activeButtonClass","firstButtonClass","lastButtonClass","isIE","navigator","appName","RegExp","exec","userAgent","setElementSelection","parentElements","body","querySelectorAll","setup","events","isActive","initElements","bindSelect","bindPaste","setPlaceholders","bindWindowActions","passInstance","on","event","listener","useCapture","addEventListener","off","e","index","indexOf","splice","removeEventListener","removeAllEvents","pop","updateElementList","addToolbar","getAttribute","setAttribute","bindParagraphCreation","bindReturn","bindTab","initToolbar","bindButtons","bindAnchorForm","bindAnchorPreview","selector","elementSelection","serialize","elementid","value","trim","callExtensions","funcName","ext","name","args","Array","slice","apply","self","base","tagName","which","toLowerCase","execCommand","editorElement","children","getSelectionElement","isListItemChild","shiftKey","preventDefault","innerText","tag","buttonTemplate","btnType","getButtonLabels","buttonTemplates","bold","italic","underline","strikethrough","superscript","subscript","anchor","image","header1","header2","quote","orderedlist","unorderedlist","pre","indent","outdent","justifyCenter","justifyFull","justifyLeft","justifyRight","buttonLabelType","customButtonLabels","attrname","toolbar","createToolbar","keepToolbarAlive","anchorForm","querySelector","anchorInput","toolbarActions","anchorPreview","createAnchorPreview","toolbarButtons","toolbarFormAnchor","li","btn","btns","ul","getButton","input","target_label","button_label","button","close","save","insertBefore","firstChild","timer","checkSelectionWrapper","clickingIntoArchorForm","clearTimeout","setTimeout","checkSelection","documentElement","newSelection","selectionElement","toString","hasMultiParagraphs","selectionInContentEditableFalse","hideToolbarActions","checkSelectionElement","relatedTarget","_hasMultiParagraphs","_hasMultiParagraphsWrapper","selectionHtml","replace","match","selectionRange","setToolbarButtonStates","setToolbarPosition","showToolbarActions","findMatchingSelectionParent","testElementFunction","range","current","commonAncestorContainer","el","nodeName","buttonHeight","boundary","getBoundingClientRect","defaultLeft","offsetWidth","middleBoundary","left","right","halfOffsetWidth","top","classList","add","remove","style","bottom","pageYOffset","offsetHeight","innerWidth","hideAnchorPreview","checkActiveButtons","getSelectedParentElement","activateButton","triggerAction","stopPropagation","hasAttribute","execAction","setFirstAndLastItems","action","execFormatBlock","triggerAnchorAction","rangeSelectsSingleNode","startContainer","endContainer","hasChildNodes","endOffset","startOffset","selectedParentElement","childNodes","display","showAnchorForm","selectionData","getSelectionData","getFirstChild","nextSibling","contains","_saveSelection","_saveSelectionWrapper","savedSelection","_restoreSelection","_restoreSelectionWrapper","link_value","focus","linkCancel","linkSave","keyCode","checked","createLink","showAnchorPreview","anchorEl","href","observeAnchorPreview","Math","round","lastOver","Date","getTime","over","stamp","unstamp","test","interval_timer","setInterval","durr","clearInterval","anchorPreviewTemplate","anchorPreviewClickHandler","activeAnchor","selectNodeContents","editorAnchorObserver","overAnchor","leaveAnchor","_leaveAnchor","_leaveAnchorWrapper","outerHTML","editorAnchorObserverWrapper","re","setTargetBlank","getElementsByTagName","setButtonClass","buttonClass","j","classes","split","createEvent","initEvent","dispatchEvent","timerResize","windowResizeHandler","activate","removeChild","removeAttribute","htmlEntities","str","String","pasteWrapper","paragraphs","clipboardData","getData","defaultPrevented","cleanPaste","activatePlaceholder","placeholderWrapper","elList","workEl","multiline","replacements","pasteHTML","join","filterCommonBlocks","filterLineBreak","fragmentBody","pasteBlock","createDocumentFragment","cleanupSpans","isCommonBlock","previousElementSibling","lastChild","childElementCount","removeWithParent","container_el","new_el","spans","replaceChild","createTextNode",40],"mappings":"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","file":"addons/medium.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\t/**\n\t * This component adds a medium.com-like rich text editor block type.\n\t *\n\t * Source for this component can be found here:\n\t * https://github.com/daviferreira/medium-editor\n\t */\n\n\tvar Editor = __webpack_require__(17);\n\tvar React = __webpack_require__(1);\n\n\t__webpack_require__(40);\n\n\tvar Medium = {\n\n\t  defaultContent: function defaultContent() {\n\t    return { html: \"\", text: \"\" };\n\t  },\n\n\t  render: function render() {\n\t    return React.createElement(Editor, _extends({ onBlur: this.setContent }, this.state.content));\n\t  }\n\n\t};\n\n\tmodule.exports = Medium;\n\n/***/ },\n\n/***/ 1:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = require(\"react\");\n\n/***/ },\n\n/***/ 17:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\tvar MediumEditor = __webpack_require__(18);\n\tvar React = __webpack_require__(1);\n\tvar Types = React.PropTypes;\n\n\tvar Editor = React.createClass({\n\t  displayName: \"Editor\",\n\n\t  propTypes: {\n\t    html: Types.string.isRequired,\n\t    onBlur: Types.func.isRequired\n\t  },\n\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      options: {\n\t        buttons: [\"header1\", \"header2\", \"bold\", \"italic\", \"underline\", \"anchor\", \"quote\", \"unorderedlist\", \"orderedlist\"],\n\t        firstHeader: \"h1\",\n\t        secondHeader: \"h2\",\n\t        diffLeft: 0,\n\t        diffTop: -10,\n\t        disableDoubleReturn: true\n\t      }\n\t    };\n\t  },\n\n\t  shouldComponentUpdate: function shouldComponentUpdate(props, state) {\n\t    return false;\n\t  },\n\n\t  componentDidMount: function componentDidMount() {\n\t    this.setState({\n\t      editor: new MediumEditor(this.refs.editor.getDOMNode(), this.props.options)\n\t    });\n\t  },\n\n\t  componentWillUnmount: function componentWillUnmount() {\n\t    this.state.editor.deactivate();\n\t  },\n\n\t  render: function render() {\n\t    return React.createElement(\n\t      \"div\",\n\t      { className: \"col-block-medium\" },\n\t      React.createElement(\"div\", { className: \"col-medium\", onBlur: this._onBlur, role: \"textarea\", \"aria-multiline\": \"true\", ref: \"editor\", dangerouslySetInnerHTML: { __html: this.props.html } })\n\t    );\n\t  },\n\n\t  _onBlur: function _onBlur() {\n\t    var editor = this.refs.editor.getDOMNode();\n\n\t    this.props.onBlur({\n\t      text: editor.textContent,\n\t      html: editor.innerHTML\n\t    });\n\t  }\n\n\t});\n\n\tmodule.exports = Editor;\n\n/***/ },\n\n/***/ 18:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*global module, console, define*/\n\n\t\"use strict\";\n\n\tfunction MediumEditor(elements, options) {\n\t    \"use strict\";\n\t    return this.init(elements, options);\n\t}\n\n\tif (true) {\n\t    module.exports = MediumEditor;\n\t}\n\t// AMD support\n\telse if (typeof define === \"function\" && define.amd) {\n\t    define(function () {\n\t        \"use strict\";\n\t        return MediumEditor;\n\t    });\n\t}\n\n\t(function (window, document) {\n\t    \"use strict\";\n\n\t    function extend(b, a) {\n\t        var prop;\n\t        if (b === undefined) {\n\t            return a;\n\t        }\n\t        for (prop in a) {\n\t            if (a.hasOwnProperty(prop) && b.hasOwnProperty(prop) === false) {\n\t                b[prop] = a[prop];\n\t            }\n\t        }\n\t        return b;\n\t    }\n\n\t    function isDescendant(parent, child) {\n\t        var node = child.parentNode;\n\t        while (node !== null) {\n\t            if (node === parent) {\n\t                return true;\n\t            }\n\t            node = node.parentNode;\n\t        }\n\t        return false;\n\t    }\n\n\t    // http://stackoverflow.com/questions/5605401/insert-link-in-contenteditable-element\n\t    // by Tim Down\n\t    function saveSelection() {\n\t        var i,\n\t            len,\n\t            ranges,\n\t            sel = this.options.contentWindow.getSelection();\n\t        if (sel.getRangeAt && sel.rangeCount) {\n\t            ranges = [];\n\t            for (i = 0, len = sel.rangeCount; i < len; i += 1) {\n\t                ranges.push(sel.getRangeAt(i));\n\t            }\n\t            return ranges;\n\t        }\n\t        return null;\n\t    }\n\n\t    function restoreSelection(savedSel) {\n\t        var i,\n\t            len,\n\t            sel = this.options.contentWindow.getSelection();\n\t        if (savedSel) {\n\t            sel.removeAllRanges();\n\t            for (i = 0, len = savedSel.length; i < len; i += 1) {\n\t                sel.addRange(savedSel[i]);\n\t            }\n\t        }\n\t    }\n\n\t    // http://stackoverflow.com/questions/1197401/how-can-i-get-the-element-the-caret-is-in-with-javascript-when-using-contentedi\n\t    // by You\n\t    function getSelectionStart() {\n\t        var node = this.options.ownerDocument.getSelection().anchorNode,\n\t            startNode = node && node.nodeType === 3 ? node.parentNode : node;\n\t        return startNode;\n\t    }\n\n\t    // http://stackoverflow.com/questions/4176923/html-of-selected-text\n\t    // by Tim Down\n\t    function getSelectionHtml() {\n\t        var i,\n\t            html = \"\",\n\t            sel,\n\t            len,\n\t            container;\n\t        if (this.options.contentWindow.getSelection !== undefined) {\n\t            sel = this.options.contentWindow.getSelection();\n\t            if (sel.rangeCount) {\n\t                container = this.options.ownerDocument.createElement(\"div\");\n\t                for (i = 0, len = sel.rangeCount; i < len; i += 1) {\n\t                    container.appendChild(sel.getRangeAt(i).cloneContents());\n\t                }\n\t                html = container.innerHTML;\n\t            }\n\t        } else if (this.options.ownerDocument.selection !== undefined) {\n\t            if (this.options.ownerDocument.selection.type === \"Text\") {\n\t                html = this.options.ownerDocument.selection.createRange().htmlText;\n\t            }\n\t        }\n\t        return html;\n\t    }\n\n\t    // https://github.com/jashkenas/underscore\n\t    function isElement(obj) {\n\t        return !!(obj && obj.nodeType === 1);\n\t    }\n\n\t    MediumEditor.prototype = {\n\t        defaults: {\n\t            allowMultiParagraphSelection: true,\n\t            anchorInputPlaceholder: \"Paste or type a link\",\n\t            anchorPreviewHideDelay: 500,\n\t            buttons: [\"bold\", \"italic\", \"underline\", \"anchor\", \"header1\", \"header2\", \"quote\"],\n\t            buttonLabels: false,\n\t            checkLinkFormat: false,\n\t            cleanPastedHTML: false,\n\t            delay: 0,\n\t            diffLeft: 0,\n\t            diffTop: -10,\n\t            disableReturn: false,\n\t            disableDoubleReturn: false,\n\t            disableToolbar: false,\n\t            disableEditing: false,\n\t            elementsContainer: false,\n\t            contentWindow: window,\n\t            ownerDocument: document,\n\t            firstHeader: \"h3\",\n\t            forcePlainText: true,\n\t            placeholder: \"Type your text\",\n\t            secondHeader: \"h4\",\n\t            targetBlank: false,\n\t            anchorTarget: false,\n\t            anchorButton: false,\n\t            anchorButtonClass: \"btn\",\n\t            extensions: {},\n\t            activeButtonClass: \"medium-editor-button-active\",\n\t            firstButtonClass: \"medium-editor-button-first\",\n\t            lastButtonClass: \"medium-editor-button-last\"\n\t        },\n\n\t        // http://stackoverflow.com/questions/17907445/how-to-detect-ie11#comment30165888_17907562\n\t        // by rg89\n\t        isIE: navigator.appName === \"Microsoft Internet Explorer\" || navigator.appName === \"Netscape\" && new RegExp(\"Trident/.*rv:([0-9]{1,}[.0-9]{0,})\").exec(navigator.userAgent) !== null,\n\n\t        init: function init(elements, options) {\n\t            this.options = extend(options, this.defaults);\n\t            this.setElementSelection(elements);\n\t            if (this.elements.length === 0) {\n\t                return;\n\t            }\n\t            this.parentElements = [\"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"blockquote\", \"pre\"];\n\t            if (!this.options.elementsContainer) {\n\t                this.options.elementsContainer = document.body;\n\t            }\n\t            this.id = this.options.elementsContainer.querySelectorAll(\".medium-editor-toolbar\").length + 1;\n\t            return this.setup();\n\t        },\n\n\t        setup: function setup() {\n\t            this.events = [];\n\t            this.isActive = true;\n\t            this.initElements().bindSelect().bindPaste().setPlaceholders().bindWindowActions().passInstance();\n\t        },\n\n\t        on: function on(target, event, listener, useCapture) {\n\t            target.addEventListener(event, listener, useCapture);\n\t            this.events.push([target, event, listener, useCapture]);\n\t        },\n\n\t        off: function off(target, event, listener, useCapture) {\n\t            var index = this.events.indexOf([target, event, listener, useCapture]),\n\t                e;\n\t            if (index !== -1) {\n\t                e = this.events.splice(index, 1);\n\t                e[0].removeEventListener(e[1], e[2], e[3]);\n\t            }\n\t        },\n\n\t        removeAllEvents: function removeAllEvents() {\n\t            var e = this.events.pop();\n\t            while (e) {\n\t                e[0].removeEventListener(e[1], e[2], e[3]);\n\t                e = this.events.pop();\n\t            }\n\t        },\n\n\t        initElements: function initElements() {\n\t            this.updateElementList();\n\t            var i,\n\t                addToolbar = false;\n\t            for (i = 0; i < this.elements.length; i += 1) {\n\t                if (!this.options.disableEditing && !this.elements[i].getAttribute(\"data-disable-editing\")) {\n\t                    this.elements[i].setAttribute(\"contentEditable\", true);\n\t                }\n\t                if (!this.elements[i].getAttribute(\"data-placeholder\")) {\n\t                    this.elements[i].setAttribute(\"data-placeholder\", this.options.placeholder);\n\t                }\n\t                this.elements[i].setAttribute(\"data-medium-element\", true);\n\t                this.bindParagraphCreation(i).bindReturn(i).bindTab(i);\n\t                if (!this.options.disableToolbar && !this.elements[i].getAttribute(\"data-disable-toolbar\")) {\n\t                    addToolbar = true;\n\t                }\n\t            }\n\t            // Init toolbar\n\t            if (addToolbar) {\n\t                this.initToolbar().bindButtons().bindAnchorForm().bindAnchorPreview();\n\t            }\n\t            return this;\n\t        },\n\n\t        setElementSelection: function setElementSelection(selector) {\n\t            this.elementSelection = selector;\n\t            this.updateElementList();\n\t        },\n\n\t        updateElementList: function updateElementList() {\n\t            this.elements = typeof this.elementSelection === \"string\" ? this.options.ownerDocument.querySelectorAll(this.elementSelection) : this.elementSelection;\n\t            if (this.elements.nodeType === 1) {\n\t                this.elements = [this.elements];\n\t            }\n\t        },\n\n\t        serialize: function serialize() {\n\t            var i,\n\t                elementid,\n\t                content = {};\n\t            for (i = 0; i < this.elements.length; i += 1) {\n\t                elementid = this.elements[i].id !== \"\" ? this.elements[i].id : \"element-\" + i;\n\t                content[elementid] = {\n\t                    value: this.elements[i].innerHTML.trim()\n\t                };\n\t            }\n\t            return content;\n\t        },\n\n\t        /**\n\t         * Helper function to call a method with a number of parameters on all registered extensions.\n\t         * The function assures that the function exists before calling.\n\t         *\n\t         * @param {string} funcName name of the function to call\n\t         * @param [args] arguments passed into funcName\n\t         */\n\t        callExtensions: function callExtensions(funcName) {\n\t            if (arguments.length < 1) {\n\t                return;\n\t            }\n\n\t            var args = Array.prototype.slice.call(arguments, 1),\n\t                ext,\n\t                name;\n\n\t            for (name in this.options.extensions) {\n\t                if (this.options.extensions.hasOwnProperty(name)) {\n\t                    ext = this.options.extensions[name];\n\t                    if (ext[funcName] !== undefined) {\n\t                        ext[funcName].apply(ext, args);\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * Pass current Medium Editor instance to all extensions\n\t         * if extension constructor has 'parent' attribute set to 'true'\n\t         *\n\t         */\n\t        passInstance: function passInstance() {\n\t            var self = this,\n\t                ext,\n\t                name;\n\n\t            for (name in self.options.extensions) {\n\t                if (self.options.extensions.hasOwnProperty(name)) {\n\t                    ext = self.options.extensions[name];\n\n\t                    if (ext.parent) {\n\t                        ext.base = self;\n\t                    }\n\t                }\n\t            }\n\n\t            return self;\n\t        },\n\n\t        bindParagraphCreation: function bindParagraphCreation(index) {\n\t            var self = this;\n\t            this.on(this.elements[index], \"keypress\", function (e) {\n\t                var node = getSelectionStart.call(self),\n\t                    tagName;\n\t                if (e.which === 32) {\n\t                    tagName = node.tagName.toLowerCase();\n\t                    if (tagName === \"a\") {\n\t                        document.execCommand(\"unlink\", false, null);\n\t                    }\n\t                }\n\t            });\n\n\t            this.on(this.elements[index], \"keyup\", function (e) {\n\t                var node = getSelectionStart.call(self),\n\t                    tagName,\n\t                    editorElement;\n\n\t                if (node && node.getAttribute(\"data-medium-element\") && node.children.length === 0 && !(self.options.disableReturn || node.getAttribute(\"data-disable-return\"))) {\n\t                    document.execCommand(\"formatBlock\", false, \"p\");\n\t                }\n\t                if (e.which === 13) {\n\t                    node = getSelectionStart.call(self);\n\t                    tagName = node.tagName.toLowerCase();\n\t                    editorElement = self.getSelectionElement();\n\n\t                    if (!(self.options.disableReturn || editorElement.getAttribute(\"data-disable-return\")) && tagName !== \"li\" && !self.isListItemChild(node)) {\n\t                        if (!e.shiftKey) {\n\t                            document.execCommand(\"formatBlock\", false, \"p\");\n\t                        }\n\t                        if (tagName === \"a\") {\n\t                            document.execCommand(\"unlink\", false, null);\n\t                        }\n\t                    }\n\t                }\n\t            });\n\t            return this;\n\t        },\n\n\t        isListItemChild: function isListItemChild(node) {\n\t            var parentNode = node.parentNode,\n\t                tagName = parentNode.tagName.toLowerCase();\n\t            while (this.parentElements.indexOf(tagName) === -1 && tagName !== \"div\") {\n\t                if (tagName === \"li\") {\n\t                    return true;\n\t                }\n\t                parentNode = parentNode.parentNode;\n\t                if (parentNode && parentNode.tagName) {\n\t                    tagName = parentNode.tagName.toLowerCase();\n\t                } else {\n\t                    return false;\n\t                }\n\t            }\n\t            return false;\n\t        },\n\n\t        bindReturn: function bindReturn(index) {\n\t            var self = this;\n\t            this.on(this.elements[index], \"keypress\", function (e) {\n\t                if (e.which === 13) {\n\t                    if (self.options.disableReturn || this.getAttribute(\"data-disable-return\")) {\n\t                        e.preventDefault();\n\t                    } else if (self.options.disableDoubleReturn || this.getAttribute(\"data-disable-double-return\")) {\n\t                        var node = getSelectionStart.call(self);\n\t                        if (node && node.innerText === \"\\n\") {\n\t                            e.preventDefault();\n\t                        }\n\t                    }\n\t                }\n\t            });\n\t            return this;\n\t        },\n\n\t        bindTab: function bindTab(index) {\n\t            var self = this;\n\t            this.on(this.elements[index], \"keydown\", function (e) {\n\t                if (e.which === 9) {\n\t                    // Override tab only for pre nodes\n\t                    var tag = getSelectionStart.call(self).tagName.toLowerCase();\n\t                    if (tag === \"pre\") {\n\t                        e.preventDefault();\n\t                        document.execCommand(\"insertHtml\", null, \"    \");\n\t                    }\n\n\t                    // Tab to indent list structures!\n\t                    if (tag === \"li\") {\n\t                        e.preventDefault();\n\n\t                        // If Shift is down, outdent, otherwise indent\n\t                        if (e.shiftKey) {\n\t                            document.execCommand(\"outdent\", e);\n\t                        } else {\n\t                            document.execCommand(\"indent\", e);\n\t                        }\n\t                    }\n\t                }\n\t            });\n\t            return this;\n\t        },\n\n\t        buttonTemplate: function buttonTemplate(btnType) {\n\t            var buttonLabels = this.getButtonLabels(this.options.buttonLabels),\n\t                buttonTemplates = {\n\t                bold: \"<button class=\\\"medium-editor-action medium-editor-action-bold\\\" data-action=\\\"bold\\\" data-element=\\\"b\\\">\" + buttonLabels.bold + \"</button>\",\n\t                italic: \"<button class=\\\"medium-editor-action medium-editor-action-italic\\\" data-action=\\\"italic\\\" data-element=\\\"i\\\">\" + buttonLabels.italic + \"</button>\",\n\t                underline: \"<button class=\\\"medium-editor-action medium-editor-action-underline\\\" data-action=\\\"underline\\\" data-element=\\\"u\\\">\" + buttonLabels.underline + \"</button>\",\n\t                strikethrough: \"<button class=\\\"medium-editor-action medium-editor-action-strikethrough\\\" data-action=\\\"strikethrough\\\" data-element=\\\"strike\\\">\" + buttonLabels.strikethrough + \"</button>\",\n\t                superscript: \"<button class=\\\"medium-editor-action medium-editor-action-superscript\\\" data-action=\\\"superscript\\\" data-element=\\\"sup\\\">\" + buttonLabels.superscript + \"</button>\",\n\t                subscript: \"<button class=\\\"medium-editor-action medium-editor-action-subscript\\\" data-action=\\\"subscript\\\" data-element=\\\"sub\\\">\" + buttonLabels.subscript + \"</button>\",\n\t                anchor: \"<button class=\\\"medium-editor-action medium-editor-action-anchor\\\" data-action=\\\"anchor\\\" data-element=\\\"a\\\">\" + buttonLabels.anchor + \"</button>\",\n\t                image: \"<button class=\\\"medium-editor-action medium-editor-action-image\\\" data-action=\\\"image\\\" data-element=\\\"img\\\">\" + buttonLabels.image + \"</button>\",\n\t                header1: \"<button class=\\\"medium-editor-action medium-editor-action-header1\\\" data-action=\\\"append-\" + this.options.firstHeader + \"\\\" data-element=\\\"\" + this.options.firstHeader + \"\\\">\" + buttonLabels.header1 + \"</button>\",\n\t                header2: \"<button class=\\\"medium-editor-action medium-editor-action-header2\\\" data-action=\\\"append-\" + this.options.secondHeader + \"\\\" data-element=\\\"\" + this.options.secondHeader + \"\\\">\" + buttonLabels.header2 + \"</button>\",\n\t                quote: \"<button class=\\\"medium-editor-action medium-editor-action-quote\\\" data-action=\\\"append-blockquote\\\" data-element=\\\"blockquote\\\">\" + buttonLabels.quote + \"</button>\",\n\t                orderedlist: \"<button class=\\\"medium-editor-action medium-editor-action-orderedlist\\\" data-action=\\\"insertorderedlist\\\" data-element=\\\"ol\\\">\" + buttonLabels.orderedlist + \"</button>\",\n\t                unorderedlist: \"<button class=\\\"medium-editor-action medium-editor-action-unorderedlist\\\" data-action=\\\"insertunorderedlist\\\" data-element=\\\"ul\\\">\" + buttonLabels.unorderedlist + \"</button>\",\n\t                pre: \"<button class=\\\"medium-editor-action medium-editor-action-pre\\\" data-action=\\\"append-pre\\\" data-element=\\\"pre\\\">\" + buttonLabels.pre + \"</button>\",\n\t                indent: \"<button class=\\\"medium-editor-action medium-editor-action-indent\\\" data-action=\\\"indent\\\" data-element=\\\"ul\\\">\" + buttonLabels.indent + \"</button>\",\n\t                outdent: \"<button class=\\\"medium-editor-action medium-editor-action-outdent\\\" data-action=\\\"outdent\\\" data-element=\\\"ul\\\">\" + buttonLabels.outdent + \"</button>\",\n\t                justifyCenter: \"<button class=\\\"medium-editor-action medium-editor-action-justifyCenter\\\" data-action=\\\"justifyCenter\\\" data-element=\\\"\\\">\" + buttonLabels.justifyCenter + \"</button>\",\n\t                justifyFull: \"<button class=\\\"medium-editor-action medium-editor-action-justifyFull\\\" data-action=\\\"justifyFull\\\" data-element=\\\"\\\">\" + buttonLabels.justifyFull + \"</button>\",\n\t                justifyLeft: \"<button class=\\\"medium-editor-action medium-editor-action-justifyLeft\\\" data-action=\\\"justifyLeft\\\" data-element=\\\"\\\">\" + buttonLabels.justifyLeft + \"</button>\",\n\t                justifyRight: \"<button class=\\\"medium-editor-action medium-editor-action-justifyRight\\\" data-action=\\\"justifyRight\\\" data-element=\\\"\\\">\" + buttonLabels.justifyRight + \"</button>\"\n\t            };\n\t            return buttonTemplates[btnType] || false;\n\t        },\n\n\t        // TODO: break method\n\t        getButtonLabels: function getButtonLabels(buttonLabelType) {\n\t            var customButtonLabels,\n\t                attrname,\n\t                buttonLabels = {\n\t                bold: \"<b>B</b>\",\n\t                italic: \"<b><i>I</i></b>\",\n\t                underline: \"<b><u>U</u></b>\",\n\t                strikethrough: \"<s>A</s>\",\n\t                superscript: \"<b>x<sup>1</sup></b>\",\n\t                subscript: \"<b>x<sub>1</sub></b>\",\n\t                anchor: \"<b>#</b>\",\n\t                image: \"<b>image</b>\",\n\t                header1: \"<b>H1</b>\",\n\t                header2: \"<b>H2</b>\",\n\t                quote: \"<b>&ldquo;</b>\",\n\t                orderedlist: \"<b>1.</b>\",\n\t                unorderedlist: \"<b>&bull;</b>\",\n\t                pre: \"<b>0101</b>\",\n\t                indent: \"<b>&rarr;</b>\",\n\t                outdent: \"<b>&larr;</b>\",\n\t                justifyCenter: \"<b>C</b>\",\n\t                justifyFull: \"<b>J</b>\",\n\t                justifyLeft: \"<b>L</b>\",\n\t                justifyRight: \"<b>R</b>\"\n\t            };\n\t            if (buttonLabelType === \"fontawesome\") {\n\t                customButtonLabels = {\n\t                    bold: \"<i class=\\\"fa fa-bold\\\"></i>\",\n\t                    italic: \"<i class=\\\"fa fa-italic\\\"></i>\",\n\t                    underline: \"<i class=\\\"fa fa-underline\\\"></i>\",\n\t                    strikethrough: \"<i class=\\\"fa fa-strikethrough\\\"></i>\",\n\t                    superscript: \"<i class=\\\"fa fa-superscript\\\"></i>\",\n\t                    subscript: \"<i class=\\\"fa fa-subscript\\\"></i>\",\n\t                    anchor: \"<i class=\\\"fa fa-link\\\"></i>\",\n\t                    image: \"<i class=\\\"fa fa-picture-o\\\"></i>\",\n\t                    quote: \"<i class=\\\"fa fa-quote-right\\\"></i>\",\n\t                    orderedlist: \"<i class=\\\"fa fa-list-ol\\\"></i>\",\n\t                    unorderedlist: \"<i class=\\\"fa fa-list-ul\\\"></i>\",\n\t                    pre: \"<i class=\\\"fa fa-code fa-lg\\\"></i>\",\n\t                    indent: \"<i class=\\\"fa fa-indent\\\"></i>\",\n\t                    outdent: \"<i class=\\\"fa fa-outdent\\\"></i>\",\n\t                    justifyCenter: \"<i class=\\\"fa fa-align-center\\\"></i>\",\n\t                    justifyFull: \"<i class=\\\"fa fa-align-justify\\\"></i>\",\n\t                    justifyLeft: \"<i class=\\\"fa fa-align-left\\\"></i>\",\n\t                    justifyRight: \"<i class=\\\"fa fa-align-right\\\"></i>\"\n\t                };\n\t            } else if (typeof buttonLabelType === \"object\") {\n\t                customButtonLabels = buttonLabelType;\n\t            }\n\t            if (typeof customButtonLabels === \"object\") {\n\t                for (attrname in customButtonLabels) {\n\t                    if (customButtonLabels.hasOwnProperty(attrname)) {\n\t                        buttonLabels[attrname] = customButtonLabels[attrname];\n\t                    }\n\t                }\n\t            }\n\t            return buttonLabels;\n\t        },\n\n\t        initToolbar: function initToolbar() {\n\t            if (this.toolbar) {\n\t                return this;\n\t            }\n\t            this.toolbar = this.createToolbar();\n\t            this.keepToolbarAlive = false;\n\t            this.anchorForm = this.toolbar.querySelector(\".medium-editor-toolbar-form-anchor\");\n\t            this.anchorInput = this.anchorForm.querySelector(\"input.medium-editor-toolbar-anchor-input\");\n\t            this.anchorTarget = this.anchorForm.querySelector(\"input.medium-editor-toolbar-anchor-target\");\n\t            this.anchorButton = this.anchorForm.querySelector(\"input.medium-editor-toolbar-anchor-button\");\n\t            this.toolbarActions = this.toolbar.querySelector(\".medium-editor-toolbar-actions\");\n\t            this.anchorPreview = this.createAnchorPreview();\n\n\t            return this;\n\t        },\n\n\t        createToolbar: function createToolbar() {\n\t            var toolbar = document.createElement(\"div\");\n\t            toolbar.id = \"medium-editor-toolbar-\" + this.id;\n\t            toolbar.className = \"medium-editor-toolbar\";\n\t            toolbar.appendChild(this.toolbarButtons());\n\t            toolbar.appendChild(this.toolbarFormAnchor());\n\t            this.options.elementsContainer.appendChild(toolbar);\n\t            return toolbar;\n\t        },\n\n\t        //TODO: actionTemplate\n\t        toolbarButtons: function toolbarButtons() {\n\t            var btns = this.options.buttons,\n\t                ul = document.createElement(\"ul\"),\n\t                li,\n\t                i,\n\t                btn,\n\t                ext;\n\n\t            ul.id = \"medium-editor-toolbar-actions\";\n\t            ul.className = \"medium-editor-toolbar-actions clearfix\";\n\n\t            for (i = 0; i < btns.length; i += 1) {\n\t                if (this.options.extensions.hasOwnProperty(btns[i])) {\n\t                    ext = this.options.extensions[btns[i]];\n\t                    btn = ext.getButton !== undefined ? ext.getButton() : null;\n\t                } else {\n\t                    btn = this.buttonTemplate(btns[i]);\n\t                }\n\n\t                if (btn) {\n\t                    li = document.createElement(\"li\");\n\t                    if (isElement(btn)) {\n\t                        li.appendChild(btn);\n\t                    } else {\n\t                        li.innerHTML = btn;\n\t                    }\n\t                    ul.appendChild(li);\n\t                }\n\t            }\n\n\t            return ul;\n\t        },\n\n\t        toolbarFormAnchor: function toolbarFormAnchor() {\n\t            var anchor = document.createElement(\"div\"),\n\t                input = document.createElement(\"input\"),\n\t                target_label = document.createElement(\"label\"),\n\t                target = document.createElement(\"input\"),\n\t                button_label = document.createElement(\"label\"),\n\t                button = document.createElement(\"input\"),\n\t                close = document.createElement(\"a\"),\n\t                save = document.createElement(\"a\");\n\n\t            close.setAttribute(\"href\", \"#\");\n\t            close.className = \"medium-editor-toobar-anchor-close\";\n\t            close.innerHTML = \"&times;\";\n\n\t            save.setAttribute(\"href\", \"#\");\n\t            save.className = \"medium-editor-toobar-anchor-save\";\n\t            save.innerHTML = \"&#10003;\";\n\n\t            input.setAttribute(\"type\", \"text\");\n\t            input.className = \"medium-editor-toolbar-anchor-input\";\n\t            input.setAttribute(\"placeholder\", this.options.anchorInputPlaceholder);\n\n\t            target.setAttribute(\"type\", \"checkbox\");\n\t            target.className = \"medium-editor-toolbar-anchor-target\";\n\t            target_label.innerHTML = \"Open in New Window?\";\n\t            target_label.insertBefore(target, target_label.firstChild);\n\n\t            button.setAttribute(\"type\", \"checkbox\");\n\t            button.className = \"medium-editor-toolbar-anchor-button\";\n\t            button_label.innerHTML = \"Button\";\n\t            button_label.insertBefore(button, button_label.firstChild);\n\n\t            anchor.className = \"medium-editor-toolbar-form-anchor\";\n\t            anchor.id = \"medium-editor-toolbar-form-anchor\";\n\t            anchor.appendChild(input);\n\n\t            anchor.appendChild(save);\n\t            anchor.appendChild(close);\n\n\t            if (this.options.anchorTarget) {\n\t                anchor.appendChild(target_label);\n\t            }\n\n\t            if (this.options.anchorButton) {\n\t                anchor.appendChild(button_label);\n\t            }\n\n\t            return anchor;\n\t        },\n\n\t        bindSelect: function bindSelect() {\n\t            var self = this,\n\t                timer = \"\",\n\t                i;\n\n\t            this.checkSelectionWrapper = function (e) {\n\n\t                // Do not close the toolbar when bluring the editable area and clicking into the anchor form\n\t                if (e && self.clickingIntoArchorForm(e)) {\n\t                    return false;\n\t                }\n\n\t                clearTimeout(timer);\n\t                timer = setTimeout(function () {\n\t                    self.checkSelection();\n\t                }, self.options.delay);\n\t            };\n\n\t            this.on(document.documentElement, \"mouseup\", this.checkSelectionWrapper);\n\n\t            for (i = 0; i < this.elements.length; i += 1) {\n\t                this.on(this.elements[i], \"keyup\", this.checkSelectionWrapper);\n\t                this.on(this.elements[i], \"blur\", this.checkSelectionWrapper);\n\t            }\n\t            return this;\n\t        },\n\n\t        checkSelection: function checkSelection() {\n\t            var newSelection, selectionElement;\n\n\t            if (this.keepToolbarAlive !== true && !this.options.disableToolbar) {\n\n\t                newSelection = this.options.contentWindow.getSelection();\n\t                if (newSelection.toString().trim() === \"\" || this.options.allowMultiParagraphSelection === false && this.hasMultiParagraphs() || this.selectionInContentEditableFalse()) {\n\t                    this.hideToolbarActions();\n\t                } else {\n\t                    selectionElement = this.getSelectionElement();\n\t                    if (!selectionElement || selectionElement.getAttribute(\"data-disable-toolbar\")) {\n\t                        this.hideToolbarActions();\n\t                    } else {\n\t                        this.checkSelectionElement(newSelection, selectionElement);\n\t                    }\n\t                }\n\t            }\n\t            return this;\n\t        },\n\n\t        clickingIntoArchorForm: function clickingIntoArchorForm(e) {\n\t            var self = this;\n\n\t            if (e.type && e.type.toLowerCase() === \"blur\" && e.relatedTarget && e.relatedTarget === self.anchorInput) {\n\t                return true;\n\t            }\n\n\t            return false;\n\t        },\n\n\t        hasMultiParagraphs: (function (_hasMultiParagraphs) {\n\t            var _hasMultiParagraphsWrapper = function hasMultiParagraphs() {\n\t                return _hasMultiParagraphs.apply(this, arguments);\n\t            };\n\n\t            _hasMultiParagraphsWrapper.toString = function () {\n\t                return _hasMultiParagraphs.toString();\n\t            };\n\n\t            return _hasMultiParagraphsWrapper;\n\t        })(function () {\n\t            var selectionHtml = getSelectionHtml.call(this).replace(/<[\\S]+><\\/[\\S]+>/gim, \"\"),\n\t                hasMultiParagraphs = selectionHtml.match(/<(p|h[0-6]|blockquote)>([\\s\\S]*?)<\\/(p|h[0-6]|blockquote)>/g);\n\n\t            return hasMultiParagraphs ? hasMultiParagraphs.length : 0;\n\t        }),\n\n\t        checkSelectionElement: function checkSelectionElement(newSelection, selectionElement) {\n\t            var i;\n\t            this.selection = newSelection;\n\t            this.selectionRange = this.selection.getRangeAt(0);\n\t            for (i = 0; i < this.elements.length; i += 1) {\n\t                if (this.elements[i] === selectionElement) {\n\t                    this.setToolbarButtonStates().setToolbarPosition().showToolbarActions();\n\t                    return;\n\t                }\n\t            }\n\t            this.hideToolbarActions();\n\t        },\n\n\t        findMatchingSelectionParent: function findMatchingSelectionParent(testElementFunction) {\n\t            var selection = this.options.contentWindow.getSelection(),\n\t                range,\n\t                current;\n\n\t            if (selection.rangeCount === 0) {\n\t                return false;\n\t            }\n\n\t            range = selection.getRangeAt(0);\n\t            current = range.commonAncestorContainer;\n\n\t            do {\n\t                if (current.nodeType === 1) {\n\t                    if (testElementFunction(current)) {\n\t                        return current;\n\t                    }\n\t                    // do not traverse upwards past the nearest containing editor\n\t                    if (current.getAttribute(\"data-medium-element\")) {\n\t                        return false;\n\t                    }\n\t                }\n\n\t                current = current.parentNode;\n\t            } while (current);\n\n\t            return false;\n\t        },\n\n\t        getSelectionElement: function getSelectionElement() {\n\t            return this.findMatchingSelectionParent(function (el) {\n\t                return el.getAttribute(\"data-medium-element\");\n\t            });\n\t        },\n\n\t        selectionInContentEditableFalse: function selectionInContentEditableFalse() {\n\t            return this.findMatchingSelectionParent(function (el) {\n\t                return el && el.nodeName !== \"#text\" && el.getAttribute(\"contenteditable\") === \"false\";\n\t            });\n\t        },\n\n\t        setToolbarPosition: function setToolbarPosition() {\n\t            var buttonHeight = 50,\n\t                selection = this.options.contentWindow.getSelection(),\n\t                range = selection.getRangeAt(0),\n\t                boundary = range.getBoundingClientRect(),\n\t                defaultLeft = this.options.diffLeft - this.toolbar.offsetWidth / 2,\n\t                middleBoundary = (boundary.left + boundary.right) / 2,\n\t                halfOffsetWidth = this.toolbar.offsetWidth / 2;\n\t            if (boundary.top < buttonHeight) {\n\t                this.toolbar.classList.add(\"medium-toolbar-arrow-over\");\n\t                this.toolbar.classList.remove(\"medium-toolbar-arrow-under\");\n\t                this.toolbar.style.top = buttonHeight + boundary.bottom - this.options.diffTop + this.options.contentWindow.pageYOffset - this.toolbar.offsetHeight + \"px\";\n\t            } else {\n\t                this.toolbar.classList.add(\"medium-toolbar-arrow-under\");\n\t                this.toolbar.classList.remove(\"medium-toolbar-arrow-over\");\n\t                this.toolbar.style.top = boundary.top + this.options.diffTop + this.options.contentWindow.pageYOffset - this.toolbar.offsetHeight + \"px\";\n\t            }\n\t            if (middleBoundary < halfOffsetWidth) {\n\t                this.toolbar.style.left = defaultLeft + halfOffsetWidth + \"px\";\n\t            } else if (this.options.contentWindow.innerWidth - middleBoundary < halfOffsetWidth) {\n\t                this.toolbar.style.left = this.options.contentWindow.innerWidth + defaultLeft - halfOffsetWidth + \"px\";\n\t            } else {\n\t                this.toolbar.style.left = defaultLeft + middleBoundary + \"px\";\n\t            }\n\n\t            this.hideAnchorPreview();\n\n\t            return this;\n\t        },\n\n\t        setToolbarButtonStates: function setToolbarButtonStates() {\n\t            var buttons = this.toolbarActions.querySelectorAll(\"button\"),\n\t                i;\n\t            for (i = 0; i < buttons.length; i += 1) {\n\t                buttons[i].classList.remove(this.options.activeButtonClass);\n\t            }\n\t            this.checkActiveButtons();\n\t            return this;\n\t        },\n\n\t        checkActiveButtons: function checkActiveButtons() {\n\t            var elements = Array.prototype.slice.call(this.elements),\n\t                parentNode = this.getSelectedParentElement();\n\t            while (parentNode.tagName !== undefined && this.parentElements.indexOf(parentNode.tagName.toLowerCase) === -1) {\n\t                this.activateButton(parentNode.tagName.toLowerCase());\n\t                this.callExtensions(\"checkState\", parentNode);\n\n\t                // we can abort the search upwards if we leave the contentEditable element\n\t                if (elements.indexOf(parentNode) !== -1) {\n\t                    break;\n\t                }\n\t                parentNode = parentNode.parentNode;\n\t            }\n\t        },\n\n\t        activateButton: function activateButton(tag) {\n\t            var el = this.toolbar.querySelector(\"[data-element=\\\"\" + tag + \"\\\"]\");\n\t            if (el !== null && el.className.indexOf(this.options.activeButtonClass) === -1) {\n\t                el.className += \" \" + this.options.activeButtonClass;\n\t            }\n\t        },\n\n\t        bindButtons: function bindButtons() {\n\t            var buttons = this.toolbar.querySelectorAll(\"button\"),\n\t                i,\n\t                self = this,\n\t                triggerAction = function triggerAction(e) {\n\t                e.preventDefault();\n\t                e.stopPropagation();\n\t                if (self.selection === undefined) {\n\t                    self.checkSelection();\n\t                }\n\t                if (this.className.indexOf(self.options.activeButtonClass) > -1) {\n\t                    this.classList.remove(self.options.activeButtonClass);\n\t                } else {\n\t                    this.className += \" \" + self.options.activeButtonClass;\n\t                }\n\t                if (this.hasAttribute(\"data-action\")) {\n\t                    self.execAction(this.getAttribute(\"data-action\"), e);\n\t                }\n\t            };\n\t            for (i = 0; i < buttons.length; i += 1) {\n\t                this.on(buttons[i], \"click\", triggerAction);\n\t            }\n\t            this.setFirstAndLastItems(buttons);\n\t            return this;\n\t        },\n\n\t        setFirstAndLastItems: function setFirstAndLastItems(buttons) {\n\t            if (buttons.length > 0) {\n\t                buttons[0].className += \" \" + this.options.firstButtonClass;\n\t                buttons[buttons.length - 1].className += \" \" + this.options.lastButtonClass;\n\t            }\n\t            return this;\n\t        },\n\n\t        execAction: function execAction(action, e) {\n\t            if (action.indexOf(\"append-\") > -1) {\n\t                this.execFormatBlock(action.replace(\"append-\", \"\"));\n\t                this.setToolbarPosition();\n\t                this.setToolbarButtonStates();\n\t            } else if (action === \"anchor\") {\n\t                this.triggerAnchorAction(e);\n\t            } else if (action === \"image\") {\n\t                this.options.ownerDocument.execCommand(\"insertImage\", false, this.options.contentWindow.getSelection());\n\t            } else {\n\t                this.options.ownerDocument.execCommand(action, false, null);\n\t                this.setToolbarPosition();\n\t            }\n\t        },\n\n\t        // http://stackoverflow.com/questions/15867542/range-object-get-selection-parent-node-chrome-vs-firefox\n\t        rangeSelectsSingleNode: function rangeSelectsSingleNode(range) {\n\t            var startNode = range.startContainer;\n\t            return startNode === range.endContainer && startNode.hasChildNodes() && range.endOffset === range.startOffset + 1;\n\t        },\n\n\t        getSelectedParentElement: function getSelectedParentElement() {\n\t            var selectedParentElement = null,\n\t                range = this.selectionRange;\n\t            if (this.rangeSelectsSingleNode(range)) {\n\t                selectedParentElement = range.startContainer.childNodes[range.startOffset];\n\t            } else if (range.startContainer.nodeType === 3) {\n\t                selectedParentElement = range.startContainer.parentNode;\n\t            } else {\n\t                selectedParentElement = range.startContainer;\n\t            }\n\t            return selectedParentElement;\n\t        },\n\n\t        triggerAnchorAction: function triggerAnchorAction() {\n\t            var selectedParentElement = this.getSelectedParentElement();\n\t            if (selectedParentElement.tagName && selectedParentElement.tagName.toLowerCase() === \"a\") {\n\t                this.options.ownerDocument.execCommand(\"unlink\", false, null);\n\t            } else {\n\t                if (this.anchorForm.style.display === \"block\") {\n\t                    this.showToolbarActions();\n\t                } else {\n\t                    this.showAnchorForm();\n\t                }\n\t            }\n\t            return this;\n\t        },\n\n\t        execFormatBlock: function execFormatBlock(el) {\n\t            var selectionData = this.getSelectionData(this.selection.anchorNode);\n\t            // FF handles blockquote differently on formatBlock\n\t            // allowing nesting, we need to use outdent\n\t            // https://developer.mozilla.org/en-US/docs/Rich-Text_Editing_in_Mozilla\n\t            if (el === \"blockquote\" && selectionData.el && selectionData.el.parentNode.tagName.toLowerCase() === \"blockquote\") {\n\t                return this.options.ownerDocument.execCommand(\"outdent\", false, null);\n\t            }\n\t            if (selectionData.tagName === el) {\n\t                el = \"p\";\n\t            }\n\t            // When IE we need to add <> to heading elements and\n\t            //  blockquote needs to be called as indent\n\t            // http://stackoverflow.com/questions/10741831/execcommand-formatblock-headings-in-ie\n\t            // http://stackoverflow.com/questions/1816223/rich-text-editor-with-blockquote-function/1821777#1821777\n\t            if (this.isIE) {\n\t                if (el === \"blockquote\") {\n\t                    return this.options.ownerDocument.execCommand(\"indent\", false, el);\n\t                }\n\t                el = \"<\" + el + \">\";\n\t            }\n\t            return this.options.ownerDocument.execCommand(\"formatBlock\", false, el);\n\t        },\n\n\t        getSelectionData: function getSelectionData(el) {\n\t            var tagName;\n\n\t            if (el && el.tagName) {\n\t                tagName = el.tagName.toLowerCase();\n\t            }\n\n\t            while (el && this.parentElements.indexOf(tagName) === -1) {\n\t                el = el.parentNode;\n\t                if (el && el.tagName) {\n\t                    tagName = el.tagName.toLowerCase();\n\t                }\n\t            }\n\n\t            return {\n\t                el: el,\n\t                tagName: tagName\n\t            };\n\t        },\n\n\t        getFirstChild: function getFirstChild(el) {\n\t            var firstChild = el.firstChild;\n\t            while (firstChild !== null && firstChild.nodeType !== 1) {\n\t                firstChild = firstChild.nextSibling;\n\t            }\n\t            return firstChild;\n\t        },\n\n\t        hideToolbarActions: function hideToolbarActions() {\n\t            this.keepToolbarAlive = false;\n\t            if (this.toolbar !== undefined) {\n\t                this.toolbar.classList.remove(\"medium-editor-toolbar-active\");\n\t            }\n\t        },\n\n\t        showToolbarActions: function showToolbarActions() {\n\t            var self = this,\n\t                timer;\n\t            this.anchorForm.style.display = \"none\";\n\t            this.toolbarActions.style.display = \"block\";\n\t            this.keepToolbarAlive = false;\n\t            clearTimeout(timer);\n\t            timer = setTimeout(function () {\n\t                if (self.toolbar && !self.toolbar.classList.contains(\"medium-editor-toolbar-active\")) {\n\t                    self.toolbar.classList.add(\"medium-editor-toolbar-active\");\n\t                }\n\t            }, 100);\n\t        },\n\n\t        saveSelection: (function (_saveSelection) {\n\t            var _saveSelectionWrapper = function saveSelection() {\n\t                return _saveSelection.apply(this, arguments);\n\t            };\n\n\t            _saveSelectionWrapper.toString = function () {\n\t                return _saveSelection.toString();\n\t            };\n\n\t            return _saveSelectionWrapper;\n\t        })(function () {\n\t            this.savedSelection = saveSelection.call(this);\n\t        }),\n\n\t        restoreSelection: (function (_restoreSelection) {\n\t            var _restoreSelectionWrapper = function restoreSelection() {\n\t                return _restoreSelection.apply(this, arguments);\n\t            };\n\n\t            _restoreSelectionWrapper.toString = function () {\n\t                return _restoreSelection.toString();\n\t            };\n\n\t            return _restoreSelectionWrapper;\n\t        })(function () {\n\t            restoreSelection.call(this, this.savedSelection);\n\t        }),\n\n\t        showAnchorForm: function showAnchorForm(link_value) {\n\t            this.toolbarActions.style.display = \"none\";\n\t            this.saveSelection();\n\t            this.anchorForm.style.display = \"block\";\n\t            this.setToolbarPosition();\n\t            this.keepToolbarAlive = true;\n\t            this.anchorInput.focus();\n\t            this.anchorInput.value = link_value || \"\";\n\t        },\n\n\t        bindAnchorForm: function bindAnchorForm() {\n\t            var linkCancel = this.anchorForm.querySelector(\"a.medium-editor-toobar-anchor-close\"),\n\t                linkSave = this.anchorForm.querySelector(\"a.medium-editor-toobar-anchor-save\"),\n\t                self = this;\n\n\t            this.on(this.anchorForm, \"click\", function (e) {\n\t                e.stopPropagation();\n\t                self.keepToolbarAlive = true;\n\t            });\n\n\t            this.on(this.anchorInput, \"keyup\", function (e) {\n\t                var button = null,\n\t                    target;\n\n\t                if (e.keyCode === 13) {\n\t                    e.preventDefault();\n\t                    if (self.options.anchorTarget && self.anchorTarget.checked) {\n\t                        target = \"_blank\";\n\t                    } else {\n\t                        target = \"_self\";\n\t                    }\n\n\t                    if (self.options.anchorButton && self.anchorButton.checked) {\n\t                        button = self.options.anchorButtonClass;\n\t                    }\n\n\t                    self.createLink(this, target, button);\n\t                }\n\t            });\n\n\t            this.on(linkSave, \"click\", function (e) {\n\t                var button = null,\n\t                    target;\n\t                e.preventDefault();\n\t                if (self.options.anchorTarget && self.anchorTarget.checked) {\n\t                    target = \"_blank\";\n\t                } else {\n\t                    target = \"_self\";\n\t                }\n\n\t                if (self.options.anchorButton && self.anchorButton.checked) {\n\t                    button = self.options.anchorButtonClass;\n\t                }\n\n\t                self.createLink(self.anchorInput, target, button);\n\t            }, true);\n\n\t            this.on(this.anchorInput, \"click\", function (e) {\n\t                // make sure not to hide form when cliking into the input\n\t                e.stopPropagation();\n\t                self.keepToolbarAlive = true;\n\t            });\n\n\t            // Hide the anchor form when focusing outside of it.\n\t            this.on(this.options.ownerDocument.body, \"click\", function (e) {\n\t                if (e.target !== self.anchorForm && !isDescendant(self.anchorForm, e.target) && !isDescendant(self.toolbarActions, e.target)) {\n\t                    self.keepToolbarAlive = false;\n\t                    self.checkSelection();\n\t                }\n\t            }, true);\n\t            this.on(this.options.ownerDocument.body, \"focus\", function (e) {\n\t                if (e.target !== self.anchorForm && !isDescendant(self.anchorForm, e.target) && !isDescendant(self.toolbarActions, e.target)) {\n\t                    self.keepToolbarAlive = false;\n\t                    self.checkSelection();\n\t                }\n\t            }, true);\n\n\t            this.on(linkCancel, \"click\", function (e) {\n\t                e.preventDefault();\n\t                self.showToolbarActions();\n\t                restoreSelection.call(self, self.savedSelection);\n\t            });\n\t            return this;\n\t        },\n\n\t        hideAnchorPreview: function hideAnchorPreview() {\n\t            this.anchorPreview.classList.remove(\"medium-editor-anchor-preview-active\");\n\t        },\n\n\t        // TODO: break method\n\t        showAnchorPreview: function showAnchorPreview(anchorEl) {\n\t            if (this.anchorPreview.classList.contains(\"medium-editor-anchor-preview-active\") || anchorEl.getAttribute(\"data-disable-preview\")) {\n\t                return true;\n\t            }\n\n\t            var self = this,\n\t                buttonHeight = 40,\n\t                boundary = anchorEl.getBoundingClientRect(),\n\t                middleBoundary = (boundary.left + boundary.right) / 2,\n\t                halfOffsetWidth,\n\t                defaultLeft,\n\t                timer;\n\n\t            self.anchorPreview.querySelector(\"i\").textContent = anchorEl.href;\n\t            halfOffsetWidth = self.anchorPreview.offsetWidth / 2;\n\t            defaultLeft = self.options.diffLeft - halfOffsetWidth;\n\n\t            clearTimeout(timer);\n\t            timer = setTimeout(function () {\n\t                if (self.anchorPreview && !self.anchorPreview.classList.contains(\"medium-editor-anchor-preview-active\")) {\n\t                    self.anchorPreview.classList.add(\"medium-editor-anchor-preview-active\");\n\t                }\n\t            }, 100);\n\n\t            self.observeAnchorPreview(anchorEl);\n\n\t            self.anchorPreview.classList.add(\"medium-toolbar-arrow-over\");\n\t            self.anchorPreview.classList.remove(\"medium-toolbar-arrow-under\");\n\t            self.anchorPreview.style.top = Math.round(buttonHeight + boundary.bottom - self.options.diffTop + this.options.contentWindow.pageYOffset - self.anchorPreview.offsetHeight) + \"px\";\n\t            if (middleBoundary < halfOffsetWidth) {\n\t                self.anchorPreview.style.left = defaultLeft + halfOffsetWidth + \"px\";\n\t            } else if (this.options.contentWindow.innerWidth - middleBoundary < halfOffsetWidth) {\n\t                self.anchorPreview.style.left = this.options.contentWindow.innerWidth + defaultLeft - halfOffsetWidth + \"px\";\n\t            } else {\n\t                self.anchorPreview.style.left = defaultLeft + middleBoundary + \"px\";\n\t            }\n\n\t            return this;\n\t        },\n\n\t        // TODO: break method\n\t        observeAnchorPreview: function observeAnchorPreview(anchorEl) {\n\t            var self = this,\n\t                lastOver = new Date().getTime(),\n\t                over = true,\n\t                stamp = function stamp() {\n\t                lastOver = new Date().getTime();\n\t                over = true;\n\t            },\n\t                unstamp = function unstamp(e) {\n\t                if (!e.relatedTarget || !/anchor-preview/.test(e.relatedTarget.className)) {\n\t                    over = false;\n\t                }\n\t            },\n\t                interval_timer = setInterval(function () {\n\t                if (over) {\n\t                    return true;\n\t                }\n\t                var durr = new Date().getTime() - lastOver;\n\t                if (durr > self.options.anchorPreviewHideDelay) {\n\t                    // hide the preview 1/2 second after mouse leaves the link\n\t                    self.hideAnchorPreview();\n\n\t                    // cleanup\n\t                    clearInterval(interval_timer);\n\t                    self.off(self.anchorPreview, \"mouseover\", stamp);\n\t                    self.off(self.anchorPreview, \"mouseout\", unstamp);\n\t                    self.off(anchorEl, \"mouseover\", stamp);\n\t                    self.off(anchorEl, \"mouseout\", unstamp);\n\t                }\n\t            }, 200);\n\n\t            this.on(self.anchorPreview, \"mouseover\", stamp);\n\t            this.on(self.anchorPreview, \"mouseout\", unstamp);\n\t            this.on(anchorEl, \"mouseover\", stamp);\n\t            this.on(anchorEl, \"mouseout\", unstamp);\n\t        },\n\n\t        createAnchorPreview: function createAnchorPreview() {\n\t            var self = this,\n\t                anchorPreview = this.options.ownerDocument.createElement(\"div\");\n\n\t            anchorPreview.id = \"medium-editor-anchor-preview-\" + this.id;\n\t            anchorPreview.className = \"medium-editor-anchor-preview\";\n\t            anchorPreview.innerHTML = this.anchorPreviewTemplate();\n\t            this.options.elementsContainer.appendChild(anchorPreview);\n\n\t            this.on(anchorPreview, \"click\", function () {\n\t                self.anchorPreviewClickHandler();\n\t            });\n\n\t            return anchorPreview;\n\t        },\n\n\t        anchorPreviewTemplate: function anchorPreviewTemplate() {\n\t            return \"<div class=\\\"medium-editor-toolbar-anchor-preview\\\" id=\\\"medium-editor-toolbar-anchor-preview\\\">\" + \"    <i class=\\\"medium-editor-toolbar-anchor-preview-inner\\\"></i>\" + \"</div>\";\n\t        },\n\n\t        anchorPreviewClickHandler: function anchorPreviewClickHandler(e) {\n\t            if (this.activeAnchor) {\n\n\t                var self = this,\n\t                    range = this.options.ownerDocument.createRange(),\n\t                    sel = this.options.contentWindow.getSelection();\n\n\t                range.selectNodeContents(self.activeAnchor);\n\t                sel.removeAllRanges();\n\t                sel.addRange(range);\n\t                setTimeout(function () {\n\t                    if (self.activeAnchor) {\n\t                        self.showAnchorForm(self.activeAnchor.href);\n\t                    }\n\t                    self.keepToolbarAlive = false;\n\t                }, 100 + self.options.delay);\n\t            }\n\n\t            this.hideAnchorPreview();\n\t        },\n\n\t        editorAnchorObserver: function editorAnchorObserver(e) {\n\t            var self = this,\n\t                overAnchor = true,\n\t                leaveAnchor = (function (_leaveAnchor) {\n\t                var _leaveAnchorWrapper = function leaveAnchor() {\n\t                    return _leaveAnchor.apply(this, arguments);\n\t                };\n\n\t                _leaveAnchorWrapper.toString = function () {\n\t                    return _leaveAnchor.toString();\n\t                };\n\n\t                return _leaveAnchorWrapper;\n\t            })(function () {\n\t                // mark the anchor as no longer hovered, and stop listening\n\t                overAnchor = false;\n\t                self.off(self.activeAnchor, \"mouseout\", leaveAnchor);\n\t            });\n\n\t            if (e.target && e.target.tagName.toLowerCase() === \"a\") {\n\n\t                // Detect empty href attributes\n\t                // The browser will make href=\"\" or href=\"#top\"\n\t                // into absolute urls when accessed as e.targed.href, so check the html\n\t                if (!/href=[\"']\\S+[\"']/.test(e.target.outerHTML) || /href=[\"']#\\S+[\"']/.test(e.target.outerHTML)) {\n\t                    return true;\n\t                }\n\n\t                // only show when hovering on anchors\n\t                if (this.toolbar.classList.contains(\"medium-editor-toolbar-active\")) {\n\t                    // only show when toolbar is not present\n\t                    return true;\n\t                }\n\t                this.activeAnchor = e.target;\n\t                this.on(this.activeAnchor, \"mouseout\", leaveAnchor);\n\t                // show the anchor preview according to the configured delay\n\t                // if the mouse has not left the anchor tag in that time\n\t                setTimeout(function () {\n\t                    if (overAnchor) {\n\t                        self.showAnchorPreview(e.target);\n\t                    }\n\t                }, self.options.delay);\n\t            }\n\t        },\n\n\t        bindAnchorPreview: function bindAnchorPreview(index) {\n\t            var i,\n\t                self = this;\n\t            this.editorAnchorObserverWrapper = function (e) {\n\t                self.editorAnchorObserver(e);\n\t            };\n\t            for (i = 0; i < this.elements.length; i += 1) {\n\t                this.on(this.elements[i], \"mouseover\", this.editorAnchorObserverWrapper);\n\t            }\n\t            return this;\n\t        },\n\n\t        checkLinkFormat: function checkLinkFormat(value) {\n\t            var re = /^(https?|ftps?|rtmpt?):\\/\\/|mailto:/;\n\t            return (re.test(value) ? \"\" : \"http://\") + value;\n\t        },\n\n\t        setTargetBlank: function setTargetBlank(el) {\n\t            var i;\n\t            el = el || getSelectionStart.call(this);\n\t            if (el.tagName.toLowerCase() === \"a\") {\n\t                el.target = \"_blank\";\n\t            } else {\n\t                el = el.getElementsByTagName(\"a\");\n\n\t                for (i = 0; i < el.length; i += 1) {\n\t                    el[i].target = \"_blank\";\n\t                }\n\t            }\n\t        },\n\n\t        setButtonClass: function setButtonClass(buttonClass) {\n\t            var el = getSelectionStart.call(this),\n\t                classes = buttonClass.split(\" \"),\n\t                i,\n\t                j;\n\t            if (el.tagName.toLowerCase() === \"a\") {\n\t                for (j = 0; j < classes.length; j += 1) {\n\t                    el.classList.add(classes[j]);\n\t                }\n\t            } else {\n\t                el = el.getElementsByTagName(\"a\");\n\t                for (i = 0; i < el.length; i += 1) {\n\t                    for (j = 0; j < classes.length; j += 1) {\n\t                        el[i].classList.add(classes[j]);\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        createLink: function createLink(input, target, buttonClass) {\n\t            var i, event;\n\n\t            if (input.value.trim().length === 0) {\n\t                this.hideToolbarActions();\n\t                return;\n\t            }\n\n\t            restoreSelection.call(this, this.savedSelection);\n\n\t            if (this.options.checkLinkFormat) {\n\t                input.value = this.checkLinkFormat(input.value);\n\t            }\n\n\t            this.options.ownerDocument.execCommand(\"createLink\", false, input.value);\n\n\t            if (this.options.targetBlank || target === \"_blank\") {\n\t                this.setTargetBlank();\n\t            }\n\n\t            if (buttonClass) {\n\t                this.setButtonClass(buttonClass);\n\t            }\n\n\t            if (this.options.targetBlank || target === \"_blank\" || buttonClass) {\n\t                event = this.options.ownerDocument.createEvent(\"HTMLEvents\");\n\t                event.initEvent(\"input\", true, true, this.options.contentWindow);\n\t                for (i = 0; i < this.elements.length; i += 1) {\n\t                    this.elements[i].dispatchEvent(event);\n\t                }\n\t            }\n\n\t            this.checkSelection();\n\t            this.showToolbarActions();\n\t            input.value = \"\";\n\t        },\n\n\t        bindWindowActions: function bindWindowActions() {\n\t            var timerResize,\n\t                self = this;\n\t            this.windowResizeHandler = function () {\n\t                clearTimeout(timerResize);\n\t                timerResize = setTimeout(function () {\n\t                    if (self.toolbar && self.toolbar.classList.contains(\"medium-editor-toolbar-active\")) {\n\t                        self.setToolbarPosition();\n\t                    }\n\t                }, 100);\n\t            };\n\t            this.on(this.options.contentWindow, \"resize\", this.windowResizeHandler);\n\t            return this;\n\t        },\n\n\t        activate: function activate() {\n\t            if (this.isActive) {\n\t                return;\n\t            }\n\n\t            this.setup();\n\t        },\n\n\t        // TODO: break method\n\t        deactivate: function deactivate() {\n\t            var i;\n\t            if (!this.isActive) {\n\t                return;\n\t            }\n\t            this.isActive = false;\n\n\t            if (this.toolbar !== undefined) {\n\t                this.options.elementsContainer.removeChild(this.anchorPreview);\n\t                this.options.elementsContainer.removeChild(this.toolbar);\n\t                delete this.toolbar;\n\t                delete this.anchorPreview;\n\t            }\n\n\t            for (i = 0; i < this.elements.length; i += 1) {\n\t                this.elements[i].removeAttribute(\"contentEditable\");\n\t                this.elements[i].removeAttribute(\"data-medium-element\");\n\t            }\n\n\t            this.removeAllEvents();\n\t        },\n\n\t        htmlEntities: function htmlEntities(str) {\n\t            // converts special characters (like <) into their escaped/encoded values (like &lt;).\n\t            // This allows you to show to display the string without the browser reading it as HTML.\n\t            return String(str).replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\");\n\t        },\n\n\t        bindPaste: function bindPaste() {\n\t            var i,\n\t                self = this;\n\t            this.pasteWrapper = function (e) {\n\t                var paragraphs,\n\t                    html = \"\",\n\t                    p;\n\n\t                this.classList.remove(\"medium-editor-placeholder\");\n\t                if (!self.options.forcePlainText && !self.options.cleanPastedHTML) {\n\t                    return this;\n\t                }\n\n\t                if (e.clipboardData && e.clipboardData.getData && !e.defaultPrevented) {\n\t                    e.preventDefault();\n\n\t                    if (self.options.cleanPastedHTML && e.clipboardData.getData(\"text/html\")) {\n\t                        return self.cleanPaste(e.clipboardData.getData(\"text/html\"));\n\t                    }\n\t                    if (!(self.options.disableReturn || this.getAttribute(\"data-disable-return\"))) {\n\t                        paragraphs = e.clipboardData.getData(\"text/plain\").split(/[\\r\\n]/g);\n\t                        for (p = 0; p < paragraphs.length; p += 1) {\n\t                            if (paragraphs[p] !== \"\") {\n\t                                if (navigator.userAgent.match(/firefox/i) && p === 0) {\n\t                                    html += self.htmlEntities(paragraphs[p]);\n\t                                } else {\n\t                                    html += \"<p>\" + self.htmlEntities(paragraphs[p]) + \"</p>\";\n\t                                }\n\t                            }\n\t                        }\n\t                        self.options.ownerDocument.execCommand(\"insertHTML\", false, html);\n\t                    } else {\n\t                        html = self.htmlEntities(e.clipboardData.getData(\"text/plain\"));\n\t                        self.options.ownerDocument.execCommand(\"insertHTML\", false, html);\n\t                    }\n\t                }\n\t            };\n\t            for (i = 0; i < this.elements.length; i += 1) {\n\t                this.on(this.elements[i], \"paste\", this.pasteWrapper);\n\t            }\n\t            return this;\n\t        },\n\n\t        setPlaceholders: function setPlaceholders() {\n\t            var i,\n\t                activatePlaceholder = function activatePlaceholder(el) {\n\t                if (!el.querySelector(\"img\") && !el.querySelector(\"blockquote\") && el.textContent.replace(/^\\s+|\\s+$/g, \"\") === \"\") {\n\t                    el.classList.add(\"medium-editor-placeholder\");\n\t                }\n\t            },\n\t                placeholderWrapper = function placeholderWrapper(e) {\n\t                this.classList.remove(\"medium-editor-placeholder\");\n\t                if (e.type !== \"keypress\") {\n\t                    activatePlaceholder(this);\n\t                }\n\t            };\n\t            for (i = 0; i < this.elements.length; i += 1) {\n\t                activatePlaceholder(this.elements[i]);\n\t                this.on(this.elements[i], \"blur\", placeholderWrapper);\n\t                this.on(this.elements[i], \"keypress\", placeholderWrapper);\n\t            }\n\t            return this;\n\t        },\n\n\t        cleanPaste: function cleanPaste(text) {\n\n\t            /*jslint regexp: true*/\n\t            /*\n\t                jslint does not allow character negation, because the negation\n\t                will not match any unicode characters. In the regexes in this\n\t                block, negation is used specifically to match the end of an html\n\t                tag, and in fact unicode characters *should* be allowed.\n\t            */\n\t            var i,\n\t                elList,\n\t                workEl,\n\t                el = this.getSelectionElement(),\n\t                multiline = /<p|<br|<div/.test(text),\n\t                replacements = [\n\n\t            // replace two bogus tags that begin pastes from google docs\n\t            [new RegExp(/<[^>]*docs-internal-guid[^>]*>/gi), \"\"], [new RegExp(/<\\/b>(<br[^>]*>)?$/gi), \"\"],\n\n\t            // un-html spaces and newlines inserted by OS X\n\t            [new RegExp(/<span class=\"Apple-converted-space\">\\s+<\\/span>/g), \" \"], [new RegExp(/<br class=\"Apple-interchange-newline\">/g), \"<br>\"],\n\n\t            // replace google docs italics+bold with a span to be replaced once the html is inserted\n\t            [new RegExp(/<span[^>]*(font-style:italic;font-weight:bold|font-weight:bold;font-style:italic)[^>]*>/gi), \"<span class=\\\"replace-with italic bold\\\">\"],\n\n\t            // replace google docs italics with a span to be replaced once the html is inserted\n\t            [new RegExp(/<span[^>]*font-style:italic[^>]*>/gi), \"<span class=\\\"replace-with italic\\\">\"],\n\n\t            //[replace google docs bolds with a span to be replaced once the html is inserted\n\t            [new RegExp(/<span[^>]*font-weight:bold[^>]*>/gi), \"<span class=\\\"replace-with bold\\\">\"],\n\n\t            // replace manually entered b/i/a tags with real ones\n\t            [new RegExp(/&lt;(\\/?)(i|b|a)&gt;/gi), \"<$1$2>\"],\n\n\t            // replace manually a tags with real ones, converting smart-quotes from google docs\n\t            [new RegExp(/&lt;a\\s+href=(&quot;|&rdquo;|&ldquo;|“|”)([^&]+)(&quot;|&rdquo;|&ldquo;|“|”)&gt;/gi), \"<a href=\\\"$2\\\">\"]];\n\t            /*jslint regexp: false*/\n\n\t            for (i = 0; i < replacements.length; i += 1) {\n\t                text = text.replace(replacements[i][0], replacements[i][1]);\n\t            }\n\n\t            if (multiline) {\n\n\t                // double br's aren't converted to p tags, but we want paragraphs.\n\t                elList = text.split(\"<br><br>\");\n\n\t                this.pasteHTML(\"<p>\" + elList.join(\"</p><p>\") + \"</p>\");\n\t                this.options.ownerDocument.execCommand(\"insertText\", false, \"\\n\");\n\n\t                // block element cleanup\n\t                elList = el.querySelectorAll(\"a,p,div,br\");\n\t                for (i = 0; i < elList.length; i += 1) {\n\n\t                    workEl = elList[i];\n\n\t                    switch (workEl.tagName.toLowerCase()) {\n\t                        case \"a\":\n\t                            if (this.options.targetBlank) {\n\t                                this.setTargetBlank(workEl);\n\t                            }\n\t                            break;\n\t                        case \"p\":\n\t                        case \"div\":\n\t                            this.filterCommonBlocks(workEl);\n\t                            break;\n\t                        case \"br\":\n\t                            this.filterLineBreak(workEl);\n\t                            break;\n\t                    }\n\t                }\n\t            } else {\n\n\t                this.pasteHTML(text);\n\t            }\n\t        },\n\n\t        pasteHTML: function pasteHTML(html) {\n\t            var elList,\n\t                workEl,\n\t                i,\n\t                fragmentBody,\n\t                pasteBlock = this.options.ownerDocument.createDocumentFragment();\n\n\t            pasteBlock.appendChild(this.options.ownerDocument.createElement(\"body\"));\n\n\t            fragmentBody = pasteBlock.querySelector(\"body\");\n\t            fragmentBody.innerHTML = html;\n\n\t            this.cleanupSpans(fragmentBody);\n\n\t            elList = fragmentBody.querySelectorAll(\"*\");\n\t            for (i = 0; i < elList.length; i += 1) {\n\n\t                workEl = elList[i];\n\n\t                // delete ugly attributes\n\t                workEl.removeAttribute(\"class\");\n\t                workEl.removeAttribute(\"style\");\n\t                workEl.removeAttribute(\"dir\");\n\n\t                if (workEl.tagName.toLowerCase() === \"meta\") {\n\t                    workEl.parentNode.removeChild(workEl);\n\t                }\n\t            }\n\t            this.options.ownerDocument.execCommand(\"insertHTML\", false, fragmentBody.innerHTML.replace(/&nbsp;/g, \" \"));\n\t        },\n\t        isCommonBlock: function isCommonBlock(el) {\n\t            return el && (el.tagName.toLowerCase() === \"p\" || el.tagName.toLowerCase() === \"div\");\n\t        },\n\t        filterCommonBlocks: function filterCommonBlocks(el) {\n\t            if (/^\\s*$/.test(el.innerText)) {\n\t                el.parentNode.removeChild(el);\n\t            }\n\t        },\n\t        filterLineBreak: function filterLineBreak(el) {\n\t            if (this.isCommonBlock(el.previousElementSibling)) {\n\n\t                // remove stray br's following common block elements\n\t                el.parentNode.removeChild(el);\n\t            } else if (this.isCommonBlock(el.parentNode) && (el.parentNode.firstChild === el || el.parentNode.lastChild === el)) {\n\n\t                // remove br's just inside open or close tags of a div/p\n\t                el.parentNode.removeChild(el);\n\t            } else if (el.parentNode.childElementCount === 1) {\n\n\t                // and br's that are the only child of a div/p\n\t                this.removeWithParent(el);\n\t            }\n\t        },\n\n\t        // remove an element, including its parent, if it is the only element within its parent\n\t        removeWithParent: function removeWithParent(el) {\n\t            if (el && el.parentNode) {\n\t                if (el.parentNode.parentNode && el.parentNode.childElementCount === 1) {\n\t                    el.parentNode.parentNode.removeChild(el.parentNode);\n\t                } else {\n\t                    el.parentNode.removeChild(el.parentNode);\n\t                }\n\t            }\n\t        },\n\n\t        cleanupSpans: function cleanupSpans(container_el) {\n\n\t            var i,\n\t                el,\n\t                new_el,\n\t                spans = container_el.querySelectorAll(\".replace-with\");\n\n\t            for (i = 0; i < spans.length; i += 1) {\n\n\t                el = spans[i];\n\t                new_el = this.options.ownerDocument.createElement(el.classList.contains(\"bold\") ? \"b\" : \"i\");\n\n\t                if (el.classList.contains(\"bold\") && el.classList.contains(\"italic\")) {\n\n\t                    // add an i tag as well if this has both italics and bold\n\t                    new_el.innerHTML = \"<i>\" + el.innerHTML + \"</i>\";\n\t                } else {\n\n\t                    new_el.innerHTML = el.innerHTML;\n\t                }\n\t                el.parentNode.replaceChild(new_el, el);\n\t            }\n\n\t            spans = container_el.querySelectorAll(\"span\");\n\t            for (i = 0; i < spans.length; i += 1) {\n\n\t                el = spans[i];\n\n\t                // remove empty spans, replace others with their contents\n\t                if (/^\\s*$/.test()) {\n\t                    el.parentNode.removeChild(el);\n\t                } else {\n\t                    el.parentNode.replaceChild(this.options.ownerDocument.createTextNode(el.innerText), el);\n\t                }\n\t            }\n\t        }\n\n\t    };\n\t})(window, document);\n\n/***/ },\n\n/***/ 40:\n/***/ function(module, exports, __webpack_require__) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }\n\n/******/ });\n\n\n/** WEBPACK FOOTER **\n ** addons/medium.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap eec226ed780b276d025c\n **/","\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n/**\n * This component adds a medium.com-like rich text editor block type.\n *\n * Source for this component can be found here:\n * https://github.com/daviferreira/medium-editor\n */\n\nvar Editor = require(\"./editor\");\nvar React = require(\"react\");\n\nrequire(\"./style\");\n\nvar Medium = {\n\n  defaultContent: function defaultContent() {\n    return { html: \"\", text: \"\" };\n  },\n\n  render: function render() {\n    return React.createElement(Editor, _extends({ onBlur: this.setContent }, this.state.content));\n  }\n\n};\n\nmodule.exports = Medium;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./addons/medium/index.js\n ** module id = 0\n ** module chunks = 3\n **/","module.exports = require(\"react\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"react\"\n ** module id = 1\n ** module chunks = 0 1 2 3\n **/","\"use strict\";\n\nvar MediumEditor = require(\"./vendor/medium-editor\");\nvar React = require(\"react\");\nvar Types = React.PropTypes;\n\nvar Editor = React.createClass({\n  displayName: \"Editor\",\n\n  propTypes: {\n    html: Types.string.isRequired,\n    onBlur: Types.func.isRequired\n  },\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      options: {\n        buttons: [\"header1\", \"header2\", \"bold\", \"italic\", \"underline\", \"anchor\", \"quote\", \"unorderedlist\", \"orderedlist\"],\n        firstHeader: \"h1\",\n        secondHeader: \"h2\",\n        diffLeft: 0,\n        diffTop: -10,\n        disableDoubleReturn: true\n      }\n    };\n  },\n\n  shouldComponentUpdate: function shouldComponentUpdate(props, state) {\n    return false;\n  },\n\n  componentDidMount: function componentDidMount() {\n    this.setState({\n      editor: new MediumEditor(this.refs.editor.getDOMNode(), this.props.options)\n    });\n  },\n\n  componentWillUnmount: function componentWillUnmount() {\n    this.state.editor.deactivate();\n  },\n\n  render: function render() {\n    return React.createElement(\n      \"div\",\n      { className: \"col-block-medium\" },\n      React.createElement(\"div\", { className: \"col-medium\", onBlur: this._onBlur, role: \"textarea\", \"aria-multiline\": \"true\", ref: \"editor\", dangerouslySetInnerHTML: { __html: this.props.html } })\n    );\n  },\n\n  _onBlur: function _onBlur() {\n    var editor = this.refs.editor.getDOMNode();\n\n    this.props.onBlur({\n      text: editor.textContent,\n      html: editor.innerHTML\n    });\n  }\n\n});\n\nmodule.exports = Editor;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./addons/medium/editor.js\n ** module id = 17\n ** module chunks = 3\n **/","/*global module, console, define*/\n\n\"use strict\";\n\nfunction MediumEditor(elements, options) {\n    \"use strict\";\n    return this.init(elements, options);\n}\n\nif (typeof module === \"object\") {\n    module.exports = MediumEditor;\n}\n// AMD support\nelse if (typeof define === \"function\" && define.amd) {\n    define(function () {\n        \"use strict\";\n        return MediumEditor;\n    });\n}\n\n(function (window, document) {\n    \"use strict\";\n\n    function extend(b, a) {\n        var prop;\n        if (b === undefined) {\n            return a;\n        }\n        for (prop in a) {\n            if (a.hasOwnProperty(prop) && b.hasOwnProperty(prop) === false) {\n                b[prop] = a[prop];\n            }\n        }\n        return b;\n    }\n\n    function isDescendant(parent, child) {\n        var node = child.parentNode;\n        while (node !== null) {\n            if (node === parent) {\n                return true;\n            }\n            node = node.parentNode;\n        }\n        return false;\n    }\n\n    // http://stackoverflow.com/questions/5605401/insert-link-in-contenteditable-element\n    // by Tim Down\n    function saveSelection() {\n        var i,\n            len,\n            ranges,\n            sel = this.options.contentWindow.getSelection();\n        if (sel.getRangeAt && sel.rangeCount) {\n            ranges = [];\n            for (i = 0, len = sel.rangeCount; i < len; i += 1) {\n                ranges.push(sel.getRangeAt(i));\n            }\n            return ranges;\n        }\n        return null;\n    }\n\n    function restoreSelection(savedSel) {\n        var i,\n            len,\n            sel = this.options.contentWindow.getSelection();\n        if (savedSel) {\n            sel.removeAllRanges();\n            for (i = 0, len = savedSel.length; i < len; i += 1) {\n                sel.addRange(savedSel[i]);\n            }\n        }\n    }\n\n    // http://stackoverflow.com/questions/1197401/how-can-i-get-the-element-the-caret-is-in-with-javascript-when-using-contentedi\n    // by You\n    function getSelectionStart() {\n        var node = this.options.ownerDocument.getSelection().anchorNode,\n            startNode = node && node.nodeType === 3 ? node.parentNode : node;\n        return startNode;\n    }\n\n    // http://stackoverflow.com/questions/4176923/html-of-selected-text\n    // by Tim Down\n    function getSelectionHtml() {\n        var i,\n            html = \"\",\n            sel,\n            len,\n            container;\n        if (this.options.contentWindow.getSelection !== undefined) {\n            sel = this.options.contentWindow.getSelection();\n            if (sel.rangeCount) {\n                container = this.options.ownerDocument.createElement(\"div\");\n                for (i = 0, len = sel.rangeCount; i < len; i += 1) {\n                    container.appendChild(sel.getRangeAt(i).cloneContents());\n                }\n                html = container.innerHTML;\n            }\n        } else if (this.options.ownerDocument.selection !== undefined) {\n            if (this.options.ownerDocument.selection.type === \"Text\") {\n                html = this.options.ownerDocument.selection.createRange().htmlText;\n            }\n        }\n        return html;\n    }\n\n    // https://github.com/jashkenas/underscore\n    function isElement(obj) {\n        return !!(obj && obj.nodeType === 1);\n    }\n\n    MediumEditor.prototype = {\n        defaults: {\n            allowMultiParagraphSelection: true,\n            anchorInputPlaceholder: \"Paste or type a link\",\n            anchorPreviewHideDelay: 500,\n            buttons: [\"bold\", \"italic\", \"underline\", \"anchor\", \"header1\", \"header2\", \"quote\"],\n            buttonLabels: false,\n            checkLinkFormat: false,\n            cleanPastedHTML: false,\n            delay: 0,\n            diffLeft: 0,\n            diffTop: -10,\n            disableReturn: false,\n            disableDoubleReturn: false,\n            disableToolbar: false,\n            disableEditing: false,\n            elementsContainer: false,\n            contentWindow: window,\n            ownerDocument: document,\n            firstHeader: \"h3\",\n            forcePlainText: true,\n            placeholder: \"Type your text\",\n            secondHeader: \"h4\",\n            targetBlank: false,\n            anchorTarget: false,\n            anchorButton: false,\n            anchorButtonClass: \"btn\",\n            extensions: {},\n            activeButtonClass: \"medium-editor-button-active\",\n            firstButtonClass: \"medium-editor-button-first\",\n            lastButtonClass: \"medium-editor-button-last\"\n        },\n\n        // http://stackoverflow.com/questions/17907445/how-to-detect-ie11#comment30165888_17907562\n        // by rg89\n        isIE: navigator.appName === \"Microsoft Internet Explorer\" || navigator.appName === \"Netscape\" && new RegExp(\"Trident/.*rv:([0-9]{1,}[.0-9]{0,})\").exec(navigator.userAgent) !== null,\n\n        init: function init(elements, options) {\n            this.options = extend(options, this.defaults);\n            this.setElementSelection(elements);\n            if (this.elements.length === 0) {\n                return;\n            }\n            this.parentElements = [\"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"blockquote\", \"pre\"];\n            if (!this.options.elementsContainer) {\n                this.options.elementsContainer = document.body;\n            }\n            this.id = this.options.elementsContainer.querySelectorAll(\".medium-editor-toolbar\").length + 1;\n            return this.setup();\n        },\n\n        setup: function setup() {\n            this.events = [];\n            this.isActive = true;\n            this.initElements().bindSelect().bindPaste().setPlaceholders().bindWindowActions().passInstance();\n        },\n\n        on: function on(target, event, listener, useCapture) {\n            target.addEventListener(event, listener, useCapture);\n            this.events.push([target, event, listener, useCapture]);\n        },\n\n        off: function off(target, event, listener, useCapture) {\n            var index = this.events.indexOf([target, event, listener, useCapture]),\n                e;\n            if (index !== -1) {\n                e = this.events.splice(index, 1);\n                e[0].removeEventListener(e[1], e[2], e[3]);\n            }\n        },\n\n        removeAllEvents: function removeAllEvents() {\n            var e = this.events.pop();\n            while (e) {\n                e[0].removeEventListener(e[1], e[2], e[3]);\n                e = this.events.pop();\n            }\n        },\n\n        initElements: function initElements() {\n            this.updateElementList();\n            var i,\n                addToolbar = false;\n            for (i = 0; i < this.elements.length; i += 1) {\n                if (!this.options.disableEditing && !this.elements[i].getAttribute(\"data-disable-editing\")) {\n                    this.elements[i].setAttribute(\"contentEditable\", true);\n                }\n                if (!this.elements[i].getAttribute(\"data-placeholder\")) {\n                    this.elements[i].setAttribute(\"data-placeholder\", this.options.placeholder);\n                }\n                this.elements[i].setAttribute(\"data-medium-element\", true);\n                this.bindParagraphCreation(i).bindReturn(i).bindTab(i);\n                if (!this.options.disableToolbar && !this.elements[i].getAttribute(\"data-disable-toolbar\")) {\n                    addToolbar = true;\n                }\n            }\n            // Init toolbar\n            if (addToolbar) {\n                this.initToolbar().bindButtons().bindAnchorForm().bindAnchorPreview();\n            }\n            return this;\n        },\n\n        setElementSelection: function setElementSelection(selector) {\n            this.elementSelection = selector;\n            this.updateElementList();\n        },\n\n        updateElementList: function updateElementList() {\n            this.elements = typeof this.elementSelection === \"string\" ? this.options.ownerDocument.querySelectorAll(this.elementSelection) : this.elementSelection;\n            if (this.elements.nodeType === 1) {\n                this.elements = [this.elements];\n            }\n        },\n\n        serialize: function serialize() {\n            var i,\n                elementid,\n                content = {};\n            for (i = 0; i < this.elements.length; i += 1) {\n                elementid = this.elements[i].id !== \"\" ? this.elements[i].id : \"element-\" + i;\n                content[elementid] = {\n                    value: this.elements[i].innerHTML.trim()\n                };\n            }\n            return content;\n        },\n\n        /**\n         * Helper function to call a method with a number of parameters on all registered extensions.\n         * The function assures that the function exists before calling.\n         *\n         * @param {string} funcName name of the function to call\n         * @param [args] arguments passed into funcName\n         */\n        callExtensions: function callExtensions(funcName) {\n            if (arguments.length < 1) {\n                return;\n            }\n\n            var args = Array.prototype.slice.call(arguments, 1),\n                ext,\n                name;\n\n            for (name in this.options.extensions) {\n                if (this.options.extensions.hasOwnProperty(name)) {\n                    ext = this.options.extensions[name];\n                    if (ext[funcName] !== undefined) {\n                        ext[funcName].apply(ext, args);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Pass current Medium Editor instance to all extensions\n         * if extension constructor has 'parent' attribute set to 'true'\n         *\n         */\n        passInstance: function passInstance() {\n            var self = this,\n                ext,\n                name;\n\n            for (name in self.options.extensions) {\n                if (self.options.extensions.hasOwnProperty(name)) {\n                    ext = self.options.extensions[name];\n\n                    if (ext.parent) {\n                        ext.base = self;\n                    }\n                }\n            }\n\n            return self;\n        },\n\n        bindParagraphCreation: function bindParagraphCreation(index) {\n            var self = this;\n            this.on(this.elements[index], \"keypress\", function (e) {\n                var node = getSelectionStart.call(self),\n                    tagName;\n                if (e.which === 32) {\n                    tagName = node.tagName.toLowerCase();\n                    if (tagName === \"a\") {\n                        document.execCommand(\"unlink\", false, null);\n                    }\n                }\n            });\n\n            this.on(this.elements[index], \"keyup\", function (e) {\n                var node = getSelectionStart.call(self),\n                    tagName,\n                    editorElement;\n\n                if (node && node.getAttribute(\"data-medium-element\") && node.children.length === 0 && !(self.options.disableReturn || node.getAttribute(\"data-disable-return\"))) {\n                    document.execCommand(\"formatBlock\", false, \"p\");\n                }\n                if (e.which === 13) {\n                    node = getSelectionStart.call(self);\n                    tagName = node.tagName.toLowerCase();\n                    editorElement = self.getSelectionElement();\n\n                    if (!(self.options.disableReturn || editorElement.getAttribute(\"data-disable-return\")) && tagName !== \"li\" && !self.isListItemChild(node)) {\n                        if (!e.shiftKey) {\n                            document.execCommand(\"formatBlock\", false, \"p\");\n                        }\n                        if (tagName === \"a\") {\n                            document.execCommand(\"unlink\", false, null);\n                        }\n                    }\n                }\n            });\n            return this;\n        },\n\n        isListItemChild: function isListItemChild(node) {\n            var parentNode = node.parentNode,\n                tagName = parentNode.tagName.toLowerCase();\n            while (this.parentElements.indexOf(tagName) === -1 && tagName !== \"div\") {\n                if (tagName === \"li\") {\n                    return true;\n                }\n                parentNode = parentNode.parentNode;\n                if (parentNode && parentNode.tagName) {\n                    tagName = parentNode.tagName.toLowerCase();\n                } else {\n                    return false;\n                }\n            }\n            return false;\n        },\n\n        bindReturn: function bindReturn(index) {\n            var self = this;\n            this.on(this.elements[index], \"keypress\", function (e) {\n                if (e.which === 13) {\n                    if (self.options.disableReturn || this.getAttribute(\"data-disable-return\")) {\n                        e.preventDefault();\n                    } else if (self.options.disableDoubleReturn || this.getAttribute(\"data-disable-double-return\")) {\n                        var node = getSelectionStart.call(self);\n                        if (node && node.innerText === \"\\n\") {\n                            e.preventDefault();\n                        }\n                    }\n                }\n            });\n            return this;\n        },\n\n        bindTab: function bindTab(index) {\n            var self = this;\n            this.on(this.elements[index], \"keydown\", function (e) {\n                if (e.which === 9) {\n                    // Override tab only for pre nodes\n                    var tag = getSelectionStart.call(self).tagName.toLowerCase();\n                    if (tag === \"pre\") {\n                        e.preventDefault();\n                        document.execCommand(\"insertHtml\", null, \"    \");\n                    }\n\n                    // Tab to indent list structures!\n                    if (tag === \"li\") {\n                        e.preventDefault();\n\n                        // If Shift is down, outdent, otherwise indent\n                        if (e.shiftKey) {\n                            document.execCommand(\"outdent\", e);\n                        } else {\n                            document.execCommand(\"indent\", e);\n                        }\n                    }\n                }\n            });\n            return this;\n        },\n\n        buttonTemplate: function buttonTemplate(btnType) {\n            var buttonLabels = this.getButtonLabels(this.options.buttonLabels),\n                buttonTemplates = {\n                bold: \"<button class=\\\"medium-editor-action medium-editor-action-bold\\\" data-action=\\\"bold\\\" data-element=\\\"b\\\">\" + buttonLabels.bold + \"</button>\",\n                italic: \"<button class=\\\"medium-editor-action medium-editor-action-italic\\\" data-action=\\\"italic\\\" data-element=\\\"i\\\">\" + buttonLabels.italic + \"</button>\",\n                underline: \"<button class=\\\"medium-editor-action medium-editor-action-underline\\\" data-action=\\\"underline\\\" data-element=\\\"u\\\">\" + buttonLabels.underline + \"</button>\",\n                strikethrough: \"<button class=\\\"medium-editor-action medium-editor-action-strikethrough\\\" data-action=\\\"strikethrough\\\" data-element=\\\"strike\\\">\" + buttonLabels.strikethrough + \"</button>\",\n                superscript: \"<button class=\\\"medium-editor-action medium-editor-action-superscript\\\" data-action=\\\"superscript\\\" data-element=\\\"sup\\\">\" + buttonLabels.superscript + \"</button>\",\n                subscript: \"<button class=\\\"medium-editor-action medium-editor-action-subscript\\\" data-action=\\\"subscript\\\" data-element=\\\"sub\\\">\" + buttonLabels.subscript + \"</button>\",\n                anchor: \"<button class=\\\"medium-editor-action medium-editor-action-anchor\\\" data-action=\\\"anchor\\\" data-element=\\\"a\\\">\" + buttonLabels.anchor + \"</button>\",\n                image: \"<button class=\\\"medium-editor-action medium-editor-action-image\\\" data-action=\\\"image\\\" data-element=\\\"img\\\">\" + buttonLabels.image + \"</button>\",\n                header1: \"<button class=\\\"medium-editor-action medium-editor-action-header1\\\" data-action=\\\"append-\" + this.options.firstHeader + \"\\\" data-element=\\\"\" + this.options.firstHeader + \"\\\">\" + buttonLabels.header1 + \"</button>\",\n                header2: \"<button class=\\\"medium-editor-action medium-editor-action-header2\\\" data-action=\\\"append-\" + this.options.secondHeader + \"\\\" data-element=\\\"\" + this.options.secondHeader + \"\\\">\" + buttonLabels.header2 + \"</button>\",\n                quote: \"<button class=\\\"medium-editor-action medium-editor-action-quote\\\" data-action=\\\"append-blockquote\\\" data-element=\\\"blockquote\\\">\" + buttonLabels.quote + \"</button>\",\n                orderedlist: \"<button class=\\\"medium-editor-action medium-editor-action-orderedlist\\\" data-action=\\\"insertorderedlist\\\" data-element=\\\"ol\\\">\" + buttonLabels.orderedlist + \"</button>\",\n                unorderedlist: \"<button class=\\\"medium-editor-action medium-editor-action-unorderedlist\\\" data-action=\\\"insertunorderedlist\\\" data-element=\\\"ul\\\">\" + buttonLabels.unorderedlist + \"</button>\",\n                pre: \"<button class=\\\"medium-editor-action medium-editor-action-pre\\\" data-action=\\\"append-pre\\\" data-element=\\\"pre\\\">\" + buttonLabels.pre + \"</button>\",\n                indent: \"<button class=\\\"medium-editor-action medium-editor-action-indent\\\" data-action=\\\"indent\\\" data-element=\\\"ul\\\">\" + buttonLabels.indent + \"</button>\",\n                outdent: \"<button class=\\\"medium-editor-action medium-editor-action-outdent\\\" data-action=\\\"outdent\\\" data-element=\\\"ul\\\">\" + buttonLabels.outdent + \"</button>\",\n                justifyCenter: \"<button class=\\\"medium-editor-action medium-editor-action-justifyCenter\\\" data-action=\\\"justifyCenter\\\" data-element=\\\"\\\">\" + buttonLabels.justifyCenter + \"</button>\",\n                justifyFull: \"<button class=\\\"medium-editor-action medium-editor-action-justifyFull\\\" data-action=\\\"justifyFull\\\" data-element=\\\"\\\">\" + buttonLabels.justifyFull + \"</button>\",\n                justifyLeft: \"<button class=\\\"medium-editor-action medium-editor-action-justifyLeft\\\" data-action=\\\"justifyLeft\\\" data-element=\\\"\\\">\" + buttonLabels.justifyLeft + \"</button>\",\n                justifyRight: \"<button class=\\\"medium-editor-action medium-editor-action-justifyRight\\\" data-action=\\\"justifyRight\\\" data-element=\\\"\\\">\" + buttonLabels.justifyRight + \"</button>\"\n            };\n            return buttonTemplates[btnType] || false;\n        },\n\n        // TODO: break method\n        getButtonLabels: function getButtonLabels(buttonLabelType) {\n            var customButtonLabels,\n                attrname,\n                buttonLabels = {\n                bold: \"<b>B</b>\",\n                italic: \"<b><i>I</i></b>\",\n                underline: \"<b><u>U</u></b>\",\n                strikethrough: \"<s>A</s>\",\n                superscript: \"<b>x<sup>1</sup></b>\",\n                subscript: \"<b>x<sub>1</sub></b>\",\n                anchor: \"<b>#</b>\",\n                image: \"<b>image</b>\",\n                header1: \"<b>H1</b>\",\n                header2: \"<b>H2</b>\",\n                quote: \"<b>&ldquo;</b>\",\n                orderedlist: \"<b>1.</b>\",\n                unorderedlist: \"<b>&bull;</b>\",\n                pre: \"<b>0101</b>\",\n                indent: \"<b>&rarr;</b>\",\n                outdent: \"<b>&larr;</b>\",\n                justifyCenter: \"<b>C</b>\",\n                justifyFull: \"<b>J</b>\",\n                justifyLeft: \"<b>L</b>\",\n                justifyRight: \"<b>R</b>\"\n            };\n            if (buttonLabelType === \"fontawesome\") {\n                customButtonLabels = {\n                    bold: \"<i class=\\\"fa fa-bold\\\"></i>\",\n                    italic: \"<i class=\\\"fa fa-italic\\\"></i>\",\n                    underline: \"<i class=\\\"fa fa-underline\\\"></i>\",\n                    strikethrough: \"<i class=\\\"fa fa-strikethrough\\\"></i>\",\n                    superscript: \"<i class=\\\"fa fa-superscript\\\"></i>\",\n                    subscript: \"<i class=\\\"fa fa-subscript\\\"></i>\",\n                    anchor: \"<i class=\\\"fa fa-link\\\"></i>\",\n                    image: \"<i class=\\\"fa fa-picture-o\\\"></i>\",\n                    quote: \"<i class=\\\"fa fa-quote-right\\\"></i>\",\n                    orderedlist: \"<i class=\\\"fa fa-list-ol\\\"></i>\",\n                    unorderedlist: \"<i class=\\\"fa fa-list-ul\\\"></i>\",\n                    pre: \"<i class=\\\"fa fa-code fa-lg\\\"></i>\",\n                    indent: \"<i class=\\\"fa fa-indent\\\"></i>\",\n                    outdent: \"<i class=\\\"fa fa-outdent\\\"></i>\",\n                    justifyCenter: \"<i class=\\\"fa fa-align-center\\\"></i>\",\n                    justifyFull: \"<i class=\\\"fa fa-align-justify\\\"></i>\",\n                    justifyLeft: \"<i class=\\\"fa fa-align-left\\\"></i>\",\n                    justifyRight: \"<i class=\\\"fa fa-align-right\\\"></i>\"\n                };\n            } else if (typeof buttonLabelType === \"object\") {\n                customButtonLabels = buttonLabelType;\n            }\n            if (typeof customButtonLabels === \"object\") {\n                for (attrname in customButtonLabels) {\n                    if (customButtonLabels.hasOwnProperty(attrname)) {\n                        buttonLabels[attrname] = customButtonLabels[attrname];\n                    }\n                }\n            }\n            return buttonLabels;\n        },\n\n        initToolbar: function initToolbar() {\n            if (this.toolbar) {\n                return this;\n            }\n            this.toolbar = this.createToolbar();\n            this.keepToolbarAlive = false;\n            this.anchorForm = this.toolbar.querySelector(\".medium-editor-toolbar-form-anchor\");\n            this.anchorInput = this.anchorForm.querySelector(\"input.medium-editor-toolbar-anchor-input\");\n            this.anchorTarget = this.anchorForm.querySelector(\"input.medium-editor-toolbar-anchor-target\");\n            this.anchorButton = this.anchorForm.querySelector(\"input.medium-editor-toolbar-anchor-button\");\n            this.toolbarActions = this.toolbar.querySelector(\".medium-editor-toolbar-actions\");\n            this.anchorPreview = this.createAnchorPreview();\n\n            return this;\n        },\n\n        createToolbar: function createToolbar() {\n            var toolbar = document.createElement(\"div\");\n            toolbar.id = \"medium-editor-toolbar-\" + this.id;\n            toolbar.className = \"medium-editor-toolbar\";\n            toolbar.appendChild(this.toolbarButtons());\n            toolbar.appendChild(this.toolbarFormAnchor());\n            this.options.elementsContainer.appendChild(toolbar);\n            return toolbar;\n        },\n\n        //TODO: actionTemplate\n        toolbarButtons: function toolbarButtons() {\n            var btns = this.options.buttons,\n                ul = document.createElement(\"ul\"),\n                li,\n                i,\n                btn,\n                ext;\n\n            ul.id = \"medium-editor-toolbar-actions\";\n            ul.className = \"medium-editor-toolbar-actions clearfix\";\n\n            for (i = 0; i < btns.length; i += 1) {\n                if (this.options.extensions.hasOwnProperty(btns[i])) {\n                    ext = this.options.extensions[btns[i]];\n                    btn = ext.getButton !== undefined ? ext.getButton() : null;\n                } else {\n                    btn = this.buttonTemplate(btns[i]);\n                }\n\n                if (btn) {\n                    li = document.createElement(\"li\");\n                    if (isElement(btn)) {\n                        li.appendChild(btn);\n                    } else {\n                        li.innerHTML = btn;\n                    }\n                    ul.appendChild(li);\n                }\n            }\n\n            return ul;\n        },\n\n        toolbarFormAnchor: function toolbarFormAnchor() {\n            var anchor = document.createElement(\"div\"),\n                input = document.createElement(\"input\"),\n                target_label = document.createElement(\"label\"),\n                target = document.createElement(\"input\"),\n                button_label = document.createElement(\"label\"),\n                button = document.createElement(\"input\"),\n                close = document.createElement(\"a\"),\n                save = document.createElement(\"a\");\n\n            close.setAttribute(\"href\", \"#\");\n            close.className = \"medium-editor-toobar-anchor-close\";\n            close.innerHTML = \"&times;\";\n\n            save.setAttribute(\"href\", \"#\");\n            save.className = \"medium-editor-toobar-anchor-save\";\n            save.innerHTML = \"&#10003;\";\n\n            input.setAttribute(\"type\", \"text\");\n            input.className = \"medium-editor-toolbar-anchor-input\";\n            input.setAttribute(\"placeholder\", this.options.anchorInputPlaceholder);\n\n            target.setAttribute(\"type\", \"checkbox\");\n            target.className = \"medium-editor-toolbar-anchor-target\";\n            target_label.innerHTML = \"Open in New Window?\";\n            target_label.insertBefore(target, target_label.firstChild);\n\n            button.setAttribute(\"type\", \"checkbox\");\n            button.className = \"medium-editor-toolbar-anchor-button\";\n            button_label.innerHTML = \"Button\";\n            button_label.insertBefore(button, button_label.firstChild);\n\n            anchor.className = \"medium-editor-toolbar-form-anchor\";\n            anchor.id = \"medium-editor-toolbar-form-anchor\";\n            anchor.appendChild(input);\n\n            anchor.appendChild(save);\n            anchor.appendChild(close);\n\n            if (this.options.anchorTarget) {\n                anchor.appendChild(target_label);\n            }\n\n            if (this.options.anchorButton) {\n                anchor.appendChild(button_label);\n            }\n\n            return anchor;\n        },\n\n        bindSelect: function bindSelect() {\n            var self = this,\n                timer = \"\",\n                i;\n\n            this.checkSelectionWrapper = function (e) {\n\n                // Do not close the toolbar when bluring the editable area and clicking into the anchor form\n                if (e && self.clickingIntoArchorForm(e)) {\n                    return false;\n                }\n\n                clearTimeout(timer);\n                timer = setTimeout(function () {\n                    self.checkSelection();\n                }, self.options.delay);\n            };\n\n            this.on(document.documentElement, \"mouseup\", this.checkSelectionWrapper);\n\n            for (i = 0; i < this.elements.length; i += 1) {\n                this.on(this.elements[i], \"keyup\", this.checkSelectionWrapper);\n                this.on(this.elements[i], \"blur\", this.checkSelectionWrapper);\n            }\n            return this;\n        },\n\n        checkSelection: function checkSelection() {\n            var newSelection, selectionElement;\n\n            if (this.keepToolbarAlive !== true && !this.options.disableToolbar) {\n\n                newSelection = this.options.contentWindow.getSelection();\n                if (newSelection.toString().trim() === \"\" || this.options.allowMultiParagraphSelection === false && this.hasMultiParagraphs() || this.selectionInContentEditableFalse()) {\n                    this.hideToolbarActions();\n                } else {\n                    selectionElement = this.getSelectionElement();\n                    if (!selectionElement || selectionElement.getAttribute(\"data-disable-toolbar\")) {\n                        this.hideToolbarActions();\n                    } else {\n                        this.checkSelectionElement(newSelection, selectionElement);\n                    }\n                }\n            }\n            return this;\n        },\n\n        clickingIntoArchorForm: function clickingIntoArchorForm(e) {\n            var self = this;\n\n            if (e.type && e.type.toLowerCase() === \"blur\" && e.relatedTarget && e.relatedTarget === self.anchorInput) {\n                return true;\n            }\n\n            return false;\n        },\n\n        hasMultiParagraphs: (function (_hasMultiParagraphs) {\n            var _hasMultiParagraphsWrapper = function hasMultiParagraphs() {\n                return _hasMultiParagraphs.apply(this, arguments);\n            };\n\n            _hasMultiParagraphsWrapper.toString = function () {\n                return _hasMultiParagraphs.toString();\n            };\n\n            return _hasMultiParagraphsWrapper;\n        })(function () {\n            var selectionHtml = getSelectionHtml.call(this).replace(/<[\\S]+><\\/[\\S]+>/gim, \"\"),\n                hasMultiParagraphs = selectionHtml.match(/<(p|h[0-6]|blockquote)>([\\s\\S]*?)<\\/(p|h[0-6]|blockquote)>/g);\n\n            return hasMultiParagraphs ? hasMultiParagraphs.length : 0;\n        }),\n\n        checkSelectionElement: function checkSelectionElement(newSelection, selectionElement) {\n            var i;\n            this.selection = newSelection;\n            this.selectionRange = this.selection.getRangeAt(0);\n            for (i = 0; i < this.elements.length; i += 1) {\n                if (this.elements[i] === selectionElement) {\n                    this.setToolbarButtonStates().setToolbarPosition().showToolbarActions();\n                    return;\n                }\n            }\n            this.hideToolbarActions();\n        },\n\n        findMatchingSelectionParent: function findMatchingSelectionParent(testElementFunction) {\n            var selection = this.options.contentWindow.getSelection(),\n                range,\n                current;\n\n            if (selection.rangeCount === 0) {\n                return false;\n            }\n\n            range = selection.getRangeAt(0);\n            current = range.commonAncestorContainer;\n\n            do {\n                if (current.nodeType === 1) {\n                    if (testElementFunction(current)) {\n                        return current;\n                    }\n                    // do not traverse upwards past the nearest containing editor\n                    if (current.getAttribute(\"data-medium-element\")) {\n                        return false;\n                    }\n                }\n\n                current = current.parentNode;\n            } while (current);\n\n            return false;\n        },\n\n        getSelectionElement: function getSelectionElement() {\n            return this.findMatchingSelectionParent(function (el) {\n                return el.getAttribute(\"data-medium-element\");\n            });\n        },\n\n        selectionInContentEditableFalse: function selectionInContentEditableFalse() {\n            return this.findMatchingSelectionParent(function (el) {\n                return el && el.nodeName !== \"#text\" && el.getAttribute(\"contenteditable\") === \"false\";\n            });\n        },\n\n        setToolbarPosition: function setToolbarPosition() {\n            var buttonHeight = 50,\n                selection = this.options.contentWindow.getSelection(),\n                range = selection.getRangeAt(0),\n                boundary = range.getBoundingClientRect(),\n                defaultLeft = this.options.diffLeft - this.toolbar.offsetWidth / 2,\n                middleBoundary = (boundary.left + boundary.right) / 2,\n                halfOffsetWidth = this.toolbar.offsetWidth / 2;\n            if (boundary.top < buttonHeight) {\n                this.toolbar.classList.add(\"medium-toolbar-arrow-over\");\n                this.toolbar.classList.remove(\"medium-toolbar-arrow-under\");\n                this.toolbar.style.top = buttonHeight + boundary.bottom - this.options.diffTop + this.options.contentWindow.pageYOffset - this.toolbar.offsetHeight + \"px\";\n            } else {\n                this.toolbar.classList.add(\"medium-toolbar-arrow-under\");\n                this.toolbar.classList.remove(\"medium-toolbar-arrow-over\");\n                this.toolbar.style.top = boundary.top + this.options.diffTop + this.options.contentWindow.pageYOffset - this.toolbar.offsetHeight + \"px\";\n            }\n            if (middleBoundary < halfOffsetWidth) {\n                this.toolbar.style.left = defaultLeft + halfOffsetWidth + \"px\";\n            } else if (this.options.contentWindow.innerWidth - middleBoundary < halfOffsetWidth) {\n                this.toolbar.style.left = this.options.contentWindow.innerWidth + defaultLeft - halfOffsetWidth + \"px\";\n            } else {\n                this.toolbar.style.left = defaultLeft + middleBoundary + \"px\";\n            }\n\n            this.hideAnchorPreview();\n\n            return this;\n        },\n\n        setToolbarButtonStates: function setToolbarButtonStates() {\n            var buttons = this.toolbarActions.querySelectorAll(\"button\"),\n                i;\n            for (i = 0; i < buttons.length; i += 1) {\n                buttons[i].classList.remove(this.options.activeButtonClass);\n            }\n            this.checkActiveButtons();\n            return this;\n        },\n\n        checkActiveButtons: function checkActiveButtons() {\n            var elements = Array.prototype.slice.call(this.elements),\n                parentNode = this.getSelectedParentElement();\n            while (parentNode.tagName !== undefined && this.parentElements.indexOf(parentNode.tagName.toLowerCase) === -1) {\n                this.activateButton(parentNode.tagName.toLowerCase());\n                this.callExtensions(\"checkState\", parentNode);\n\n                // we can abort the search upwards if we leave the contentEditable element\n                if (elements.indexOf(parentNode) !== -1) {\n                    break;\n                }\n                parentNode = parentNode.parentNode;\n            }\n        },\n\n        activateButton: function activateButton(tag) {\n            var el = this.toolbar.querySelector(\"[data-element=\\\"\" + tag + \"\\\"]\");\n            if (el !== null && el.className.indexOf(this.options.activeButtonClass) === -1) {\n                el.className += \" \" + this.options.activeButtonClass;\n            }\n        },\n\n        bindButtons: function bindButtons() {\n            var buttons = this.toolbar.querySelectorAll(\"button\"),\n                i,\n                self = this,\n                triggerAction = function triggerAction(e) {\n                e.preventDefault();\n                e.stopPropagation();\n                if (self.selection === undefined) {\n                    self.checkSelection();\n                }\n                if (this.className.indexOf(self.options.activeButtonClass) > -1) {\n                    this.classList.remove(self.options.activeButtonClass);\n                } else {\n                    this.className += \" \" + self.options.activeButtonClass;\n                }\n                if (this.hasAttribute(\"data-action\")) {\n                    self.execAction(this.getAttribute(\"data-action\"), e);\n                }\n            };\n            for (i = 0; i < buttons.length; i += 1) {\n                this.on(buttons[i], \"click\", triggerAction);\n            }\n            this.setFirstAndLastItems(buttons);\n            return this;\n        },\n\n        setFirstAndLastItems: function setFirstAndLastItems(buttons) {\n            if (buttons.length > 0) {\n                buttons[0].className += \" \" + this.options.firstButtonClass;\n                buttons[buttons.length - 1].className += \" \" + this.options.lastButtonClass;\n            }\n            return this;\n        },\n\n        execAction: function execAction(action, e) {\n            if (action.indexOf(\"append-\") > -1) {\n                this.execFormatBlock(action.replace(\"append-\", \"\"));\n                this.setToolbarPosition();\n                this.setToolbarButtonStates();\n            } else if (action === \"anchor\") {\n                this.triggerAnchorAction(e);\n            } else if (action === \"image\") {\n                this.options.ownerDocument.execCommand(\"insertImage\", false, this.options.contentWindow.getSelection());\n            } else {\n                this.options.ownerDocument.execCommand(action, false, null);\n                this.setToolbarPosition();\n            }\n        },\n\n        // http://stackoverflow.com/questions/15867542/range-object-get-selection-parent-node-chrome-vs-firefox\n        rangeSelectsSingleNode: function rangeSelectsSingleNode(range) {\n            var startNode = range.startContainer;\n            return startNode === range.endContainer && startNode.hasChildNodes() && range.endOffset === range.startOffset + 1;\n        },\n\n        getSelectedParentElement: function getSelectedParentElement() {\n            var selectedParentElement = null,\n                range = this.selectionRange;\n            if (this.rangeSelectsSingleNode(range)) {\n                selectedParentElement = range.startContainer.childNodes[range.startOffset];\n            } else if (range.startContainer.nodeType === 3) {\n                selectedParentElement = range.startContainer.parentNode;\n            } else {\n                selectedParentElement = range.startContainer;\n            }\n            return selectedParentElement;\n        },\n\n        triggerAnchorAction: function triggerAnchorAction() {\n            var selectedParentElement = this.getSelectedParentElement();\n            if (selectedParentElement.tagName && selectedParentElement.tagName.toLowerCase() === \"a\") {\n                this.options.ownerDocument.execCommand(\"unlink\", false, null);\n            } else {\n                if (this.anchorForm.style.display === \"block\") {\n                    this.showToolbarActions();\n                } else {\n                    this.showAnchorForm();\n                }\n            }\n            return this;\n        },\n\n        execFormatBlock: function execFormatBlock(el) {\n            var selectionData = this.getSelectionData(this.selection.anchorNode);\n            // FF handles blockquote differently on formatBlock\n            // allowing nesting, we need to use outdent\n            // https://developer.mozilla.org/en-US/docs/Rich-Text_Editing_in_Mozilla\n            if (el === \"blockquote\" && selectionData.el && selectionData.el.parentNode.tagName.toLowerCase() === \"blockquote\") {\n                return this.options.ownerDocument.execCommand(\"outdent\", false, null);\n            }\n            if (selectionData.tagName === el) {\n                el = \"p\";\n            }\n            // When IE we need to add <> to heading elements and\n            //  blockquote needs to be called as indent\n            // http://stackoverflow.com/questions/10741831/execcommand-formatblock-headings-in-ie\n            // http://stackoverflow.com/questions/1816223/rich-text-editor-with-blockquote-function/1821777#1821777\n            if (this.isIE) {\n                if (el === \"blockquote\") {\n                    return this.options.ownerDocument.execCommand(\"indent\", false, el);\n                }\n                el = \"<\" + el + \">\";\n            }\n            return this.options.ownerDocument.execCommand(\"formatBlock\", false, el);\n        },\n\n        getSelectionData: function getSelectionData(el) {\n            var tagName;\n\n            if (el && el.tagName) {\n                tagName = el.tagName.toLowerCase();\n            }\n\n            while (el && this.parentElements.indexOf(tagName) === -1) {\n                el = el.parentNode;\n                if (el && el.tagName) {\n                    tagName = el.tagName.toLowerCase();\n                }\n            }\n\n            return {\n                el: el,\n                tagName: tagName\n            };\n        },\n\n        getFirstChild: function getFirstChild(el) {\n            var firstChild = el.firstChild;\n            while (firstChild !== null && firstChild.nodeType !== 1) {\n                firstChild = firstChild.nextSibling;\n            }\n            return firstChild;\n        },\n\n        hideToolbarActions: function hideToolbarActions() {\n            this.keepToolbarAlive = false;\n            if (this.toolbar !== undefined) {\n                this.toolbar.classList.remove(\"medium-editor-toolbar-active\");\n            }\n        },\n\n        showToolbarActions: function showToolbarActions() {\n            var self = this,\n                timer;\n            this.anchorForm.style.display = \"none\";\n            this.toolbarActions.style.display = \"block\";\n            this.keepToolbarAlive = false;\n            clearTimeout(timer);\n            timer = setTimeout(function () {\n                if (self.toolbar && !self.toolbar.classList.contains(\"medium-editor-toolbar-active\")) {\n                    self.toolbar.classList.add(\"medium-editor-toolbar-active\");\n                }\n            }, 100);\n        },\n\n        saveSelection: (function (_saveSelection) {\n            var _saveSelectionWrapper = function saveSelection() {\n                return _saveSelection.apply(this, arguments);\n            };\n\n            _saveSelectionWrapper.toString = function () {\n                return _saveSelection.toString();\n            };\n\n            return _saveSelectionWrapper;\n        })(function () {\n            this.savedSelection = saveSelection.call(this);\n        }),\n\n        restoreSelection: (function (_restoreSelection) {\n            var _restoreSelectionWrapper = function restoreSelection() {\n                return _restoreSelection.apply(this, arguments);\n            };\n\n            _restoreSelectionWrapper.toString = function () {\n                return _restoreSelection.toString();\n            };\n\n            return _restoreSelectionWrapper;\n        })(function () {\n            restoreSelection.call(this, this.savedSelection);\n        }),\n\n        showAnchorForm: function showAnchorForm(link_value) {\n            this.toolbarActions.style.display = \"none\";\n            this.saveSelection();\n            this.anchorForm.style.display = \"block\";\n            this.setToolbarPosition();\n            this.keepToolbarAlive = true;\n            this.anchorInput.focus();\n            this.anchorInput.value = link_value || \"\";\n        },\n\n        bindAnchorForm: function bindAnchorForm() {\n            var linkCancel = this.anchorForm.querySelector(\"a.medium-editor-toobar-anchor-close\"),\n                linkSave = this.anchorForm.querySelector(\"a.medium-editor-toobar-anchor-save\"),\n                self = this;\n\n            this.on(this.anchorForm, \"click\", function (e) {\n                e.stopPropagation();\n                self.keepToolbarAlive = true;\n            });\n\n            this.on(this.anchorInput, \"keyup\", function (e) {\n                var button = null,\n                    target;\n\n                if (e.keyCode === 13) {\n                    e.preventDefault();\n                    if (self.options.anchorTarget && self.anchorTarget.checked) {\n                        target = \"_blank\";\n                    } else {\n                        target = \"_self\";\n                    }\n\n                    if (self.options.anchorButton && self.anchorButton.checked) {\n                        button = self.options.anchorButtonClass;\n                    }\n\n                    self.createLink(this, target, button);\n                }\n            });\n\n            this.on(linkSave, \"click\", function (e) {\n                var button = null,\n                    target;\n                e.preventDefault();\n                if (self.options.anchorTarget && self.anchorTarget.checked) {\n                    target = \"_blank\";\n                } else {\n                    target = \"_self\";\n                }\n\n                if (self.options.anchorButton && self.anchorButton.checked) {\n                    button = self.options.anchorButtonClass;\n                }\n\n                self.createLink(self.anchorInput, target, button);\n            }, true);\n\n            this.on(this.anchorInput, \"click\", function (e) {\n                // make sure not to hide form when cliking into the input\n                e.stopPropagation();\n                self.keepToolbarAlive = true;\n            });\n\n            // Hide the anchor form when focusing outside of it.\n            this.on(this.options.ownerDocument.body, \"click\", function (e) {\n                if (e.target !== self.anchorForm && !isDescendant(self.anchorForm, e.target) && !isDescendant(self.toolbarActions, e.target)) {\n                    self.keepToolbarAlive = false;\n                    self.checkSelection();\n                }\n            }, true);\n            this.on(this.options.ownerDocument.body, \"focus\", function (e) {\n                if (e.target !== self.anchorForm && !isDescendant(self.anchorForm, e.target) && !isDescendant(self.toolbarActions, e.target)) {\n                    self.keepToolbarAlive = false;\n                    self.checkSelection();\n                }\n            }, true);\n\n            this.on(linkCancel, \"click\", function (e) {\n                e.preventDefault();\n                self.showToolbarActions();\n                restoreSelection.call(self, self.savedSelection);\n            });\n            return this;\n        },\n\n        hideAnchorPreview: function hideAnchorPreview() {\n            this.anchorPreview.classList.remove(\"medium-editor-anchor-preview-active\");\n        },\n\n        // TODO: break method\n        showAnchorPreview: function showAnchorPreview(anchorEl) {\n            if (this.anchorPreview.classList.contains(\"medium-editor-anchor-preview-active\") || anchorEl.getAttribute(\"data-disable-preview\")) {\n                return true;\n            }\n\n            var self = this,\n                buttonHeight = 40,\n                boundary = anchorEl.getBoundingClientRect(),\n                middleBoundary = (boundary.left + boundary.right) / 2,\n                halfOffsetWidth,\n                defaultLeft,\n                timer;\n\n            self.anchorPreview.querySelector(\"i\").textContent = anchorEl.href;\n            halfOffsetWidth = self.anchorPreview.offsetWidth / 2;\n            defaultLeft = self.options.diffLeft - halfOffsetWidth;\n\n            clearTimeout(timer);\n            timer = setTimeout(function () {\n                if (self.anchorPreview && !self.anchorPreview.classList.contains(\"medium-editor-anchor-preview-active\")) {\n                    self.anchorPreview.classList.add(\"medium-editor-anchor-preview-active\");\n                }\n            }, 100);\n\n            self.observeAnchorPreview(anchorEl);\n\n            self.anchorPreview.classList.add(\"medium-toolbar-arrow-over\");\n            self.anchorPreview.classList.remove(\"medium-toolbar-arrow-under\");\n            self.anchorPreview.style.top = Math.round(buttonHeight + boundary.bottom - self.options.diffTop + this.options.contentWindow.pageYOffset - self.anchorPreview.offsetHeight) + \"px\";\n            if (middleBoundary < halfOffsetWidth) {\n                self.anchorPreview.style.left = defaultLeft + halfOffsetWidth + \"px\";\n            } else if (this.options.contentWindow.innerWidth - middleBoundary < halfOffsetWidth) {\n                self.anchorPreview.style.left = this.options.contentWindow.innerWidth + defaultLeft - halfOffsetWidth + \"px\";\n            } else {\n                self.anchorPreview.style.left = defaultLeft + middleBoundary + \"px\";\n            }\n\n            return this;\n        },\n\n        // TODO: break method\n        observeAnchorPreview: function observeAnchorPreview(anchorEl) {\n            var self = this,\n                lastOver = new Date().getTime(),\n                over = true,\n                stamp = function stamp() {\n                lastOver = new Date().getTime();\n                over = true;\n            },\n                unstamp = function unstamp(e) {\n                if (!e.relatedTarget || !/anchor-preview/.test(e.relatedTarget.className)) {\n                    over = false;\n                }\n            },\n                interval_timer = setInterval(function () {\n                if (over) {\n                    return true;\n                }\n                var durr = new Date().getTime() - lastOver;\n                if (durr > self.options.anchorPreviewHideDelay) {\n                    // hide the preview 1/2 second after mouse leaves the link\n                    self.hideAnchorPreview();\n\n                    // cleanup\n                    clearInterval(interval_timer);\n                    self.off(self.anchorPreview, \"mouseover\", stamp);\n                    self.off(self.anchorPreview, \"mouseout\", unstamp);\n                    self.off(anchorEl, \"mouseover\", stamp);\n                    self.off(anchorEl, \"mouseout\", unstamp);\n                }\n            }, 200);\n\n            this.on(self.anchorPreview, \"mouseover\", stamp);\n            this.on(self.anchorPreview, \"mouseout\", unstamp);\n            this.on(anchorEl, \"mouseover\", stamp);\n            this.on(anchorEl, \"mouseout\", unstamp);\n        },\n\n        createAnchorPreview: function createAnchorPreview() {\n            var self = this,\n                anchorPreview = this.options.ownerDocument.createElement(\"div\");\n\n            anchorPreview.id = \"medium-editor-anchor-preview-\" + this.id;\n            anchorPreview.className = \"medium-editor-anchor-preview\";\n            anchorPreview.innerHTML = this.anchorPreviewTemplate();\n            this.options.elementsContainer.appendChild(anchorPreview);\n\n            this.on(anchorPreview, \"click\", function () {\n                self.anchorPreviewClickHandler();\n            });\n\n            return anchorPreview;\n        },\n\n        anchorPreviewTemplate: function anchorPreviewTemplate() {\n            return \"<div class=\\\"medium-editor-toolbar-anchor-preview\\\" id=\\\"medium-editor-toolbar-anchor-preview\\\">\" + \"    <i class=\\\"medium-editor-toolbar-anchor-preview-inner\\\"></i>\" + \"</div>\";\n        },\n\n        anchorPreviewClickHandler: function anchorPreviewClickHandler(e) {\n            if (this.activeAnchor) {\n\n                var self = this,\n                    range = this.options.ownerDocument.createRange(),\n                    sel = this.options.contentWindow.getSelection();\n\n                range.selectNodeContents(self.activeAnchor);\n                sel.removeAllRanges();\n                sel.addRange(range);\n                setTimeout(function () {\n                    if (self.activeAnchor) {\n                        self.showAnchorForm(self.activeAnchor.href);\n                    }\n                    self.keepToolbarAlive = false;\n                }, 100 + self.options.delay);\n            }\n\n            this.hideAnchorPreview();\n        },\n\n        editorAnchorObserver: function editorAnchorObserver(e) {\n            var self = this,\n                overAnchor = true,\n                leaveAnchor = (function (_leaveAnchor) {\n                var _leaveAnchorWrapper = function leaveAnchor() {\n                    return _leaveAnchor.apply(this, arguments);\n                };\n\n                _leaveAnchorWrapper.toString = function () {\n                    return _leaveAnchor.toString();\n                };\n\n                return _leaveAnchorWrapper;\n            })(function () {\n                // mark the anchor as no longer hovered, and stop listening\n                overAnchor = false;\n                self.off(self.activeAnchor, \"mouseout\", leaveAnchor);\n            });\n\n            if (e.target && e.target.tagName.toLowerCase() === \"a\") {\n\n                // Detect empty href attributes\n                // The browser will make href=\"\" or href=\"#top\"\n                // into absolute urls when accessed as e.targed.href, so check the html\n                if (!/href=[\"']\\S+[\"']/.test(e.target.outerHTML) || /href=[\"']#\\S+[\"']/.test(e.target.outerHTML)) {\n                    return true;\n                }\n\n                // only show when hovering on anchors\n                if (this.toolbar.classList.contains(\"medium-editor-toolbar-active\")) {\n                    // only show when toolbar is not present\n                    return true;\n                }\n                this.activeAnchor = e.target;\n                this.on(this.activeAnchor, \"mouseout\", leaveAnchor);\n                // show the anchor preview according to the configured delay\n                // if the mouse has not left the anchor tag in that time\n                setTimeout(function () {\n                    if (overAnchor) {\n                        self.showAnchorPreview(e.target);\n                    }\n                }, self.options.delay);\n            }\n        },\n\n        bindAnchorPreview: function bindAnchorPreview(index) {\n            var i,\n                self = this;\n            this.editorAnchorObserverWrapper = function (e) {\n                self.editorAnchorObserver(e);\n            };\n            for (i = 0; i < this.elements.length; i += 1) {\n                this.on(this.elements[i], \"mouseover\", this.editorAnchorObserverWrapper);\n            }\n            return this;\n        },\n\n        checkLinkFormat: function checkLinkFormat(value) {\n            var re = /^(https?|ftps?|rtmpt?):\\/\\/|mailto:/;\n            return (re.test(value) ? \"\" : \"http://\") + value;\n        },\n\n        setTargetBlank: function setTargetBlank(el) {\n            var i;\n            el = el || getSelectionStart.call(this);\n            if (el.tagName.toLowerCase() === \"a\") {\n                el.target = \"_blank\";\n            } else {\n                el = el.getElementsByTagName(\"a\");\n\n                for (i = 0; i < el.length; i += 1) {\n                    el[i].target = \"_blank\";\n                }\n            }\n        },\n\n        setButtonClass: function setButtonClass(buttonClass) {\n            var el = getSelectionStart.call(this),\n                classes = buttonClass.split(\" \"),\n                i,\n                j;\n            if (el.tagName.toLowerCase() === \"a\") {\n                for (j = 0; j < classes.length; j += 1) {\n                    el.classList.add(classes[j]);\n                }\n            } else {\n                el = el.getElementsByTagName(\"a\");\n                for (i = 0; i < el.length; i += 1) {\n                    for (j = 0; j < classes.length; j += 1) {\n                        el[i].classList.add(classes[j]);\n                    }\n                }\n            }\n        },\n\n        createLink: function createLink(input, target, buttonClass) {\n            var i, event;\n\n            if (input.value.trim().length === 0) {\n                this.hideToolbarActions();\n                return;\n            }\n\n            restoreSelection.call(this, this.savedSelection);\n\n            if (this.options.checkLinkFormat) {\n                input.value = this.checkLinkFormat(input.value);\n            }\n\n            this.options.ownerDocument.execCommand(\"createLink\", false, input.value);\n\n            if (this.options.targetBlank || target === \"_blank\") {\n                this.setTargetBlank();\n            }\n\n            if (buttonClass) {\n                this.setButtonClass(buttonClass);\n            }\n\n            if (this.options.targetBlank || target === \"_blank\" || buttonClass) {\n                event = this.options.ownerDocument.createEvent(\"HTMLEvents\");\n                event.initEvent(\"input\", true, true, this.options.contentWindow);\n                for (i = 0; i < this.elements.length; i += 1) {\n                    this.elements[i].dispatchEvent(event);\n                }\n            }\n\n            this.checkSelection();\n            this.showToolbarActions();\n            input.value = \"\";\n        },\n\n        bindWindowActions: function bindWindowActions() {\n            var timerResize,\n                self = this;\n            this.windowResizeHandler = function () {\n                clearTimeout(timerResize);\n                timerResize = setTimeout(function () {\n                    if (self.toolbar && self.toolbar.classList.contains(\"medium-editor-toolbar-active\")) {\n                        self.setToolbarPosition();\n                    }\n                }, 100);\n            };\n            this.on(this.options.contentWindow, \"resize\", this.windowResizeHandler);\n            return this;\n        },\n\n        activate: function activate() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.setup();\n        },\n\n        // TODO: break method\n        deactivate: function deactivate() {\n            var i;\n            if (!this.isActive) {\n                return;\n            }\n            this.isActive = false;\n\n            if (this.toolbar !== undefined) {\n                this.options.elementsContainer.removeChild(this.anchorPreview);\n                this.options.elementsContainer.removeChild(this.toolbar);\n                delete this.toolbar;\n                delete this.anchorPreview;\n            }\n\n            for (i = 0; i < this.elements.length; i += 1) {\n                this.elements[i].removeAttribute(\"contentEditable\");\n                this.elements[i].removeAttribute(\"data-medium-element\");\n            }\n\n            this.removeAllEvents();\n        },\n\n        htmlEntities: function htmlEntities(str) {\n            // converts special characters (like <) into their escaped/encoded values (like &lt;).\n            // This allows you to show to display the string without the browser reading it as HTML.\n            return String(str).replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\");\n        },\n\n        bindPaste: function bindPaste() {\n            var i,\n                self = this;\n            this.pasteWrapper = function (e) {\n                var paragraphs,\n                    html = \"\",\n                    p;\n\n                this.classList.remove(\"medium-editor-placeholder\");\n                if (!self.options.forcePlainText && !self.options.cleanPastedHTML) {\n                    return this;\n                }\n\n                if (e.clipboardData && e.clipboardData.getData && !e.defaultPrevented) {\n                    e.preventDefault();\n\n                    if (self.options.cleanPastedHTML && e.clipboardData.getData(\"text/html\")) {\n                        return self.cleanPaste(e.clipboardData.getData(\"text/html\"));\n                    }\n                    if (!(self.options.disableReturn || this.getAttribute(\"data-disable-return\"))) {\n                        paragraphs = e.clipboardData.getData(\"text/plain\").split(/[\\r\\n]/g);\n                        for (p = 0; p < paragraphs.length; p += 1) {\n                            if (paragraphs[p] !== \"\") {\n                                if (navigator.userAgent.match(/firefox/i) && p === 0) {\n                                    html += self.htmlEntities(paragraphs[p]);\n                                } else {\n                                    html += \"<p>\" + self.htmlEntities(paragraphs[p]) + \"</p>\";\n                                }\n                            }\n                        }\n                        self.options.ownerDocument.execCommand(\"insertHTML\", false, html);\n                    } else {\n                        html = self.htmlEntities(e.clipboardData.getData(\"text/plain\"));\n                        self.options.ownerDocument.execCommand(\"insertHTML\", false, html);\n                    }\n                }\n            };\n            for (i = 0; i < this.elements.length; i += 1) {\n                this.on(this.elements[i], \"paste\", this.pasteWrapper);\n            }\n            return this;\n        },\n\n        setPlaceholders: function setPlaceholders() {\n            var i,\n                activatePlaceholder = function activatePlaceholder(el) {\n                if (!el.querySelector(\"img\") && !el.querySelector(\"blockquote\") && el.textContent.replace(/^\\s+|\\s+$/g, \"\") === \"\") {\n                    el.classList.add(\"medium-editor-placeholder\");\n                }\n            },\n                placeholderWrapper = function placeholderWrapper(e) {\n                this.classList.remove(\"medium-editor-placeholder\");\n                if (e.type !== \"keypress\") {\n                    activatePlaceholder(this);\n                }\n            };\n            for (i = 0; i < this.elements.length; i += 1) {\n                activatePlaceholder(this.elements[i]);\n                this.on(this.elements[i], \"blur\", placeholderWrapper);\n                this.on(this.elements[i], \"keypress\", placeholderWrapper);\n            }\n            return this;\n        },\n\n        cleanPaste: function cleanPaste(text) {\n\n            /*jslint regexp: true*/\n            /*\n                jslint does not allow character negation, because the negation\n                will not match any unicode characters. In the regexes in this\n                block, negation is used specifically to match the end of an html\n                tag, and in fact unicode characters *should* be allowed.\n            */\n            var i,\n                elList,\n                workEl,\n                el = this.getSelectionElement(),\n                multiline = /<p|<br|<div/.test(text),\n                replacements = [\n\n            // replace two bogus tags that begin pastes from google docs\n            [new RegExp(/<[^>]*docs-internal-guid[^>]*>/gi), \"\"], [new RegExp(/<\\/b>(<br[^>]*>)?$/gi), \"\"],\n\n            // un-html spaces and newlines inserted by OS X\n            [new RegExp(/<span class=\"Apple-converted-space\">\\s+<\\/span>/g), \" \"], [new RegExp(/<br class=\"Apple-interchange-newline\">/g), \"<br>\"],\n\n            // replace google docs italics+bold with a span to be replaced once the html is inserted\n            [new RegExp(/<span[^>]*(font-style:italic;font-weight:bold|font-weight:bold;font-style:italic)[^>]*>/gi), \"<span class=\\\"replace-with italic bold\\\">\"],\n\n            // replace google docs italics with a span to be replaced once the html is inserted\n            [new RegExp(/<span[^>]*font-style:italic[^>]*>/gi), \"<span class=\\\"replace-with italic\\\">\"],\n\n            //[replace google docs bolds with a span to be replaced once the html is inserted\n            [new RegExp(/<span[^>]*font-weight:bold[^>]*>/gi), \"<span class=\\\"replace-with bold\\\">\"],\n\n            // replace manually entered b/i/a tags with real ones\n            [new RegExp(/&lt;(\\/?)(i|b|a)&gt;/gi), \"<$1$2>\"],\n\n            // replace manually a tags with real ones, converting smart-quotes from google docs\n            [new RegExp(/&lt;a\\s+href=(&quot;|&rdquo;|&ldquo;|“|”)([^&]+)(&quot;|&rdquo;|&ldquo;|“|”)&gt;/gi), \"<a href=\\\"$2\\\">\"]];\n            /*jslint regexp: false*/\n\n            for (i = 0; i < replacements.length; i += 1) {\n                text = text.replace(replacements[i][0], replacements[i][1]);\n            }\n\n            if (multiline) {\n\n                // double br's aren't converted to p tags, but we want paragraphs.\n                elList = text.split(\"<br><br>\");\n\n                this.pasteHTML(\"<p>\" + elList.join(\"</p><p>\") + \"</p>\");\n                this.options.ownerDocument.execCommand(\"insertText\", false, \"\\n\");\n\n                // block element cleanup\n                elList = el.querySelectorAll(\"a,p,div,br\");\n                for (i = 0; i < elList.length; i += 1) {\n\n                    workEl = elList[i];\n\n                    switch (workEl.tagName.toLowerCase()) {\n                        case \"a\":\n                            if (this.options.targetBlank) {\n                                this.setTargetBlank(workEl);\n                            }\n                            break;\n                        case \"p\":\n                        case \"div\":\n                            this.filterCommonBlocks(workEl);\n                            break;\n                        case \"br\":\n                            this.filterLineBreak(workEl);\n                            break;\n                    }\n                }\n            } else {\n\n                this.pasteHTML(text);\n            }\n        },\n\n        pasteHTML: function pasteHTML(html) {\n            var elList,\n                workEl,\n                i,\n                fragmentBody,\n                pasteBlock = this.options.ownerDocument.createDocumentFragment();\n\n            pasteBlock.appendChild(this.options.ownerDocument.createElement(\"body\"));\n\n            fragmentBody = pasteBlock.querySelector(\"body\");\n            fragmentBody.innerHTML = html;\n\n            this.cleanupSpans(fragmentBody);\n\n            elList = fragmentBody.querySelectorAll(\"*\");\n            for (i = 0; i < elList.length; i += 1) {\n\n                workEl = elList[i];\n\n                // delete ugly attributes\n                workEl.removeAttribute(\"class\");\n                workEl.removeAttribute(\"style\");\n                workEl.removeAttribute(\"dir\");\n\n                if (workEl.tagName.toLowerCase() === \"meta\") {\n                    workEl.parentNode.removeChild(workEl);\n                }\n            }\n            this.options.ownerDocument.execCommand(\"insertHTML\", false, fragmentBody.innerHTML.replace(/&nbsp;/g, \" \"));\n        },\n        isCommonBlock: function isCommonBlock(el) {\n            return el && (el.tagName.toLowerCase() === \"p\" || el.tagName.toLowerCase() === \"div\");\n        },\n        filterCommonBlocks: function filterCommonBlocks(el) {\n            if (/^\\s*$/.test(el.innerText)) {\n                el.parentNode.removeChild(el);\n            }\n        },\n        filterLineBreak: function filterLineBreak(el) {\n            if (this.isCommonBlock(el.previousElementSibling)) {\n\n                // remove stray br's following common block elements\n                el.parentNode.removeChild(el);\n            } else if (this.isCommonBlock(el.parentNode) && (el.parentNode.firstChild === el || el.parentNode.lastChild === el)) {\n\n                // remove br's just inside open or close tags of a div/p\n                el.parentNode.removeChild(el);\n            } else if (el.parentNode.childElementCount === 1) {\n\n                // and br's that are the only child of a div/p\n                this.removeWithParent(el);\n            }\n        },\n\n        // remove an element, including its parent, if it is the only element within its parent\n        removeWithParent: function removeWithParent(el) {\n            if (el && el.parentNode) {\n                if (el.parentNode.parentNode && el.parentNode.childElementCount === 1) {\n                    el.parentNode.parentNode.removeChild(el.parentNode);\n                } else {\n                    el.parentNode.removeChild(el.parentNode);\n                }\n            }\n        },\n\n        cleanupSpans: function cleanupSpans(container_el) {\n\n            var i,\n                el,\n                new_el,\n                spans = container_el.querySelectorAll(\".replace-with\");\n\n            for (i = 0; i < spans.length; i += 1) {\n\n                el = spans[i];\n                new_el = this.options.ownerDocument.createElement(el.classList.contains(\"bold\") ? \"b\" : \"i\");\n\n                if (el.classList.contains(\"bold\") && el.classList.contains(\"italic\")) {\n\n                    // add an i tag as well if this has both italics and bold\n                    new_el.innerHTML = \"<i>\" + el.innerHTML + \"</i>\";\n                } else {\n\n                    new_el.innerHTML = el.innerHTML;\n                }\n                el.parentNode.replaceChild(new_el, el);\n            }\n\n            spans = container_el.querySelectorAll(\"span\");\n            for (i = 0; i < spans.length; i += 1) {\n\n                el = spans[i];\n\n                // remove empty spans, replace others with their contents\n                if (/^\\s*$/.test()) {\n                    el.parentNode.removeChild(el);\n                } else {\n                    el.parentNode.replaceChild(this.options.ownerDocument.createTextNode(el.innerText), el);\n                }\n            }\n        }\n\n    };\n})(window, document);\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./addons/medium/vendor/medium-editor.js\n ** module id = 18\n ** module chunks = 3\n **/"],"sourceRoot":""}