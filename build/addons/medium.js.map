{"version":3,"sources":["webpack:///addons/medium.js","webpack:///webpack/bootstrap f242a72de77b6b5c3219?971c**","webpack:///./addons/medium/index.js","webpack:///external \"react\"?3c62**","webpack:///./addons/medium/editor.js","webpack:///./addons/medium/previewer.js","webpack:///./addons/medium/vendor/medium-editor.js"],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Editor","Previewer","React","Medium","defaultContent","html","text","renderEditor","createElement","__spread","onBlur","this","setContent","state","content","renderPreviewer",1,"require",36,"MediumEditor","Types","PropTypes","createClass","displayName","propTypes","string","isRequired","func","getDefaultProps","options","buttons","firstHeader","secondHeader","diffLeft","diffTop","disableDoubleReturn","shouldComponentUpdate","componentDidMount","setState","editor","refs","getDOMNode","props","componentWillUnmount","deactivate","render","className","_onBlur","role","aria-multiline","ref","dangerouslySetInnerHTML","__html","textContent","innerHTML",37,38,"elements","init","window","document","extend","b","a","prop","undefined","hasOwnProperty","isDescendant","parent","child","node","parentNode","saveSelection","i","len","ranges","sel","contentWindow","getSelection","getRangeAt","rangeCount","push","restoreSelection","savedSel","removeAllRanges","length","addRange","getSelectionStart","ownerDocument","anchorNode","startNode","nodeType","getSelectionHtml","container","appendChild","cloneContents","selection","type","createRange","htmlText","isElement","obj","prototype","defaults","allowMultiParagraphSelection","anchorInputPlaceholder","anchorPreviewHideDelay","buttonLabels","checkLinkFormat","cleanPastedHTML","delay","disableReturn","disableToolbar","disableEditing","elementsContainer","forcePlainText","placeholder","targetBlank","anchorTarget","anchorButton","anchorButtonClass","extensions","activeButtonClass","firstButtonClass","lastButtonClass","isIE","navigator","appName","RegExp","exec","userAgent","setElementSelection","parentElements","body","querySelectorAll","setup","events","isActive","initElements","bindSelect","bindPaste","setPlaceholders","bindWindowActions","passInstance","on","target","event","listener","useCapture","addEventListener","off","e","index","indexOf","splice","removeEventListener","removeAllEvents","pop","updateElementList","addToolbar","getAttribute","setAttribute","bindParagraphCreation","bindReturn","bindTab","initToolbar","bindButtons","bindAnchorForm","bindAnchorPreview","selector","elementSelection","serialize","elementid","value","trim","callExtensions","funcName","arguments","ext","name","args","Array","slice","apply","self","base","tagName","which","toLowerCase","execCommand","editorElement","children","getSelectionElement","isListItemChild","shiftKey","preventDefault","innerText","tag","buttonTemplate","btnType","getButtonLabels","buttonTemplates","bold","italic","underline","strikethrough","superscript","subscript","anchor","image","header1","header2","quote","orderedlist","unorderedlist","pre","indent","outdent","justifyCenter","justifyFull","justifyLeft","justifyRight","buttonLabelType","customButtonLabels","attrname","toolbar","createToolbar","keepToolbarAlive","anchorForm","querySelector","anchorInput","toolbarActions","anchorPreview","createAnchorPreview","toolbarButtons","toolbarFormAnchor","li","btn","btns","ul","getButton","input","target_label","button_label","button","close","save","insertBefore","firstChild","timer","checkSelectionWrapper","clickingIntoArchorForm","clearTimeout","setTimeout","checkSelection","documentElement","newSelection","selectionElement","toString","hasMultiParagraphs","selectionInContentEditableFalse","hideToolbarActions","checkSelectionElement","relatedTarget","selectionHtml","replace","match","selectionRange","setToolbarButtonStates","setToolbarPosition","showToolbarActions","findMatchingSelectionParent","testElementFunction","range","current","commonAncestorContainer","el","nodeName","buttonHeight","boundary","getBoundingClientRect","defaultLeft","offsetWidth","middleBoundary","left","right","halfOffsetWidth","top","classList","add","remove","style","bottom","pageYOffset","offsetHeight","innerWidth","hideAnchorPreview","checkActiveButtons","getSelectedParentElement","activateButton","triggerAction","stopPropagation","hasAttribute","execAction","setFirstAndLastItems","action","execFormatBlock","triggerAnchorAction","rangeSelectsSingleNode","startContainer","endContainer","hasChildNodes","endOffset","startOffset","selectedParentElement","childNodes","display","showAnchorForm","selectionData","getSelectionData","getFirstChild","nextSibling","contains","savedSelection","link_value","focus","linkCancel","linkSave","keyCode","checked","createLink","showAnchorPreview","anchorEl","href","observeAnchorPreview","Math","round","lastOver","Date","getTime","over","stamp","unstamp","test","interval_timer","setInterval","durr","clearInterval","anchorPreviewTemplate","anchorPreviewClickHandler","activeAnchor","selectNodeContents","editorAnchorObserver","overAnchor","leaveAnchor","outerHTML","editorAnchorObserverWrapper","re","setTargetBlank","getElementsByTagName","setButtonClass","buttonClass","j","classes","split","createEvent","initEvent","dispatchEvent","timerResize","windowResizeHandler","activate","removeChild","removeAttribute","htmlEntities","str","String","pasteWrapper","paragraphs","clipboardData","getData","defaultPrevented","cleanPaste","activatePlaceholder","placeholderWrapper","elList","workEl","multiline","replacements","pasteHTML","join","filterCommonBlocks","filterLineBreak","fragmentBody","pasteBlock","createDocumentFragment","cleanupSpans","isCommonBlock","previousElementSibling","lastChild","childElementCount","removeWithParent","container_el","new_el","spans","replaceChild","createTextNode",63],"mappings":"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","file":"addons/medium.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * This component adds a medium.com-like rich text editor block type.\n\t *\n\t * Source for this component can be found here:\n\t * https://github.com/daviferreira/medium-editor\n\t */\n\t\n\tvar Editor    = __webpack_require__(36)\n\tvar Previewer = __webpack_require__(37)\n\tvar React     = __webpack_require__(1)\n\t\n\t__webpack_require__(63)\n\t\n\tvar Medium = {\n\t\n\t  defaultContent:function() {\n\t    return { html: '', text: '' }\n\t  },\n\t\n\t  renderEditor:function() {\n\t    return React.createElement(Editor, React.__spread({onBlur:  this.setContent},   this.state.content ))\n\t  },\n\t\n\t  renderPreviewer:function() {\n\t    return React.createElement(Previewer, React.__spread({},   this.state.content ))\n\t  }\n\t\n\t}\n\t\n\tmodule.exports = Medium\n\n\n/***/ },\n\n/***/ 1:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = require(\"react\");\n\n/***/ },\n\n/***/ 36:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar MediumEditor = __webpack_require__(38)\n\tvar React        = __webpack_require__(1)\n\tvar Types        = React.PropTypes\n\t\n\tvar Editor = React.createClass({displayName: \"Editor\",\n\t\n\t  propTypes: {\n\t    html   : Types.string.isRequired,\n\t    onBlur : Types.func.isRequired\n\t  },\n\t\n\t  getDefaultProps:function() {\n\t    return {\n\t      options: {\n\t        buttons: [ 'header1', 'header2', 'bold', 'italic', 'underline', 'anchor', 'quote',  'unorderedlist', 'orderedlist' ],\n\t        firstHeader: 'h1',\n\t        secondHeader: 'h2',\n\t        diffLeft: 0,\n\t        diffTop: -10,\n\t        disableDoubleReturn: true\n\t      }\n\t    }\n\t  },\n\t\n\t  shouldComponentUpdate:function(props        , state        ){\n\t    return false\n\t  },\n\t\n\t  componentDidMount:function() {\n\t    this.setState({\n\t      editor: new MediumEditor(this.refs.editor.getDOMNode(), this.props.options)\n\t    })\n\t  },\n\t\n\t  componentWillUnmount:function() {\n\t    this.state.editor.deactivate()\n\t  },\n\t\n\t  render:function() {\n\t    return (\n\t      React.createElement(\"div\", {className: \"col-block-content\"}, \n\t        React.createElement(\"div\", {className: \"col-medium\", onBlur:  this._onBlur, role: \"textarea\", \"aria-multiline\": \"true\", ref: \"editor\", dangerouslySetInnerHTML: { __html: this.props.html}})\n\t      )\n\t    )\n\t  },\n\t\n\t  _onBlur:function() {\n\t    var editor = this.refs.editor.getDOMNode()\n\t\n\t    this.props.onBlur({\n\t      text: editor.textContent,\n\t      html: editor.innerHTML\n\t    })\n\t  }\n\t\n\t})\n\t\n\tmodule.exports = Editor\n\n\n/***/ },\n\n/***/ 37:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar React = __webpack_require__(1)\n\t\n\tvar Previewer = React.createClass({displayName: \"Previewer\",\n\t\n\t  render:function() {\n\t    return (\n\t      React.createElement(\"div\", {className: \"col-block-content\"}, \n\t        React.createElement(\"div\", {className: \"col-medium-preview\", dangerouslySetInnerHTML: { __html: this.props.html}})\n\t      )\n\t    )\n\t  }\n\t\n\t})\n\t\n\tmodule.exports = Previewer\n\n\n/***/ },\n\n/***/ 38:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*global module, console, define*/\n\t\n\tfunction MediumEditor(elements, options) {\n\t    'use strict';\n\t    return this.init(elements, options);\n\t}\n\t\n\tif (true) {\n\t    module.exports = MediumEditor;\n\t}\n\t// AMD support\n\telse if (typeof define === 'function' && define.amd) {\n\t    define(function () {\n\t        'use strict';\n\t        return MediumEditor;\n\t    });\n\t}\n\t\n\t(function (window, document) {\n\t    'use strict';\n\t\n\t    function extend(b, a) {\n\t        var prop;\n\t        if (b === undefined) {\n\t            return a;\n\t        }\n\t        for (prop in a) {\n\t            if (a.hasOwnProperty(prop) && b.hasOwnProperty(prop) === false) {\n\t                b[prop] = a[prop];\n\t            }\n\t        }\n\t        return b;\n\t    }\n\t\n\t    function isDescendant(parent, child) {\n\t         var node = child.parentNode;\n\t         while (node !== null) {\n\t             if (node === parent) {\n\t                 return true;\n\t             }\n\t             node = node.parentNode;\n\t         }\n\t         return false;\n\t    }\n\t\n\t    // http://stackoverflow.com/questions/5605401/insert-link-in-contenteditable-element\n\t    // by Tim Down\n\t    function saveSelection() {\n\t        var i,\n\t            len,\n\t            ranges,\n\t            sel = this.options.contentWindow.getSelection();\n\t        if (sel.getRangeAt && sel.rangeCount) {\n\t            ranges = [];\n\t            for (i = 0, len = sel.rangeCount; i < len; i += 1) {\n\t                ranges.push(sel.getRangeAt(i));\n\t            }\n\t            return ranges;\n\t        }\n\t        return null;\n\t    }\n\t\n\t    function restoreSelection(savedSel) {\n\t        var i,\n\t            len,\n\t            sel = this.options.contentWindow.getSelection();\n\t        if (savedSel) {\n\t            sel.removeAllRanges();\n\t            for (i = 0, len = savedSel.length; i < len; i += 1) {\n\t                sel.addRange(savedSel[i]);\n\t            }\n\t        }\n\t    }\n\t\n\t    // http://stackoverflow.com/questions/1197401/how-can-i-get-the-element-the-caret-is-in-with-javascript-when-using-contentedi\n\t    // by You\n\t    function getSelectionStart() {\n\t        var node = this.options.ownerDocument.getSelection().anchorNode,\n\t            startNode = (node && node.nodeType === 3 ? node.parentNode : node);\n\t        return startNode;\n\t    }\n\t\n\t    // http://stackoverflow.com/questions/4176923/html-of-selected-text\n\t    // by Tim Down\n\t    function getSelectionHtml() {\n\t        var i,\n\t            html = '',\n\t            sel,\n\t            len,\n\t            container;\n\t        if (this.options.contentWindow.getSelection !== undefined) {\n\t            sel = this.options.contentWindow.getSelection();\n\t            if (sel.rangeCount) {\n\t                container = this.options.ownerDocument.createElement('div');\n\t                for (i = 0, len = sel.rangeCount; i < len; i += 1) {\n\t                    container.appendChild(sel.getRangeAt(i).cloneContents());\n\t                }\n\t                html = container.innerHTML;\n\t            }\n\t        } else if (this.options.ownerDocument.selection !== undefined) {\n\t            if (this.options.ownerDocument.selection.type === 'Text') {\n\t                html = this.options.ownerDocument.selection.createRange().htmlText;\n\t            }\n\t        }\n\t        return html;\n\t    }\n\t\n\t    // https://github.com/jashkenas/underscore\n\t    function isElement(obj) {\n\t        return !!(obj && obj.nodeType === 1);\n\t    }\n\t\n\t    MediumEditor.prototype = {\n\t        defaults: {\n\t            allowMultiParagraphSelection: true,\n\t            anchorInputPlaceholder: 'Paste or type a link',\n\t            anchorPreviewHideDelay: 500,\n\t            buttons: ['bold', 'italic', 'underline', 'anchor', 'header1', 'header2', 'quote'],\n\t            buttonLabels: false,\n\t            checkLinkFormat: false,\n\t            cleanPastedHTML: false,\n\t            delay: 0,\n\t            diffLeft: 0,\n\t            diffTop: -10,\n\t            disableReturn: false,\n\t            disableDoubleReturn: false,\n\t            disableToolbar: false,\n\t            disableEditing: false,\n\t            elementsContainer: false,\n\t            contentWindow: window,\n\t            ownerDocument: document,\n\t            firstHeader: 'h3',\n\t            forcePlainText: true,\n\t            placeholder: 'Type your text',\n\t            secondHeader: 'h4',\n\t            targetBlank: false,\n\t            anchorTarget: false,\n\t            anchorButton: false,\n\t            anchorButtonClass: 'btn',\n\t            extensions: {},\n\t            activeButtonClass: 'medium-editor-button-active',\n\t            firstButtonClass: 'medium-editor-button-first',\n\t            lastButtonClass: 'medium-editor-button-last'\n\t        },\n\t\n\t        // http://stackoverflow.com/questions/17907445/how-to-detect-ie11#comment30165888_17907562\n\t        // by rg89\n\t        isIE: ((navigator.appName === 'Microsoft Internet Explorer') || ((navigator.appName === 'Netscape') && (new RegExp('Trident/.*rv:([0-9]{1,}[.0-9]{0,})').exec(navigator.userAgent) !== null))),\n\t\n\t        init: function (elements, options) {\n\t            this.options = extend(options, this.defaults);\n\t            this.setElementSelection(elements);\n\t            if (this.elements.length === 0) {\n\t                return;\n\t            }\n\t            this.parentElements = ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'pre'];\n\t            if (!this.options.elementsContainer) {\n\t                this.options.elementsContainer = document.body;\n\t            }\n\t            this.id = this.options.elementsContainer.querySelectorAll('.medium-editor-toolbar').length + 1;\n\t            return this.setup();\n\t        },\n\t\n\t        setup: function () {\n\t            this.events = [];\n\t            this.isActive = true;\n\t            this.initElements()\n\t                .bindSelect()\n\t                .bindPaste()\n\t                .setPlaceholders()\n\t                .bindWindowActions()\n\t                .passInstance();\n\t        },\n\t\n\t        on: function(target, event, listener, useCapture) {\n\t            target.addEventListener(event, listener, useCapture);\n\t            this.events.push([target, event, listener, useCapture]);\n\t        },\n\t\n\t        off: function(target, event, listener, useCapture) {\n\t            var index = this.events.indexOf([target, event, listener, useCapture]),\n\t                e;\n\t            if(index !== -1) {\n\t                e = this.events.splice(index, 1);\n\t                e[0].removeEventListener(e[1], e[2], e[3]);\n\t            }\n\t        },\n\t\n\t        removeAllEvents: function() {\n\t            var e = this.events.pop();\n\t            while(e) {\n\t                e[0].removeEventListener(e[1], e[2], e[3]);\n\t                e = this.events.pop();\n\t            }\n\t        },\n\t\n\t        initElements: function () {\n\t            this.updateElementList();\n\t            var i,\n\t                addToolbar = false;\n\t            for (i = 0; i < this.elements.length; i += 1) {\n\t                if (!this.options.disableEditing && !this.elements[i].getAttribute('data-disable-editing')) {\n\t                    this.elements[i].setAttribute('contentEditable', true);\n\t                }\n\t                if (!this.elements[i].getAttribute('data-placeholder')) {\n\t                    this.elements[i].setAttribute('data-placeholder', this.options.placeholder);\n\t                }\n\t                this.elements[i].setAttribute('data-medium-element', true);\n\t                this.bindParagraphCreation(i).bindReturn(i).bindTab(i);\n\t                if (!this.options.disableToolbar && !this.elements[i].getAttribute('data-disable-toolbar')) {\n\t                    addToolbar = true;\n\t                }\n\t            }\n\t            // Init toolbar\n\t            if (addToolbar) {\n\t                this.initToolbar()\n\t                    .bindButtons()\n\t                    .bindAnchorForm()\n\t                    .bindAnchorPreview();\n\t            }\n\t            return this;\n\t        },\n\t\n\t        setElementSelection: function (selector) {\n\t            this.elementSelection = selector;\n\t            this.updateElementList();\n\t        },\n\t\n\t        updateElementList: function () {\n\t            this.elements = typeof this.elementSelection === 'string' ? this.options.ownerDocument.querySelectorAll(this.elementSelection) : this.elementSelection;\n\t            if (this.elements.nodeType === 1) {\n\t                this.elements = [this.elements];\n\t            }\n\t        },\n\t\n\t        serialize: function () {\n\t            var i,\n\t                elementid,\n\t                content = {};\n\t            for (i = 0; i < this.elements.length; i += 1) {\n\t                elementid = (this.elements[i].id !== '') ? this.elements[i].id : 'element-' + i;\n\t                content[elementid] = {\n\t                    value: this.elements[i].innerHTML.trim()\n\t                };\n\t            }\n\t            return content;\n\t        },\n\t\n\t        /**\n\t         * Helper function to call a method with a number of parameters on all registered extensions.\n\t         * The function assures that the function exists before calling.\n\t         *\n\t         * @param {string} funcName name of the function to call\n\t         * @param [args] arguments passed into funcName\n\t         */\n\t        callExtensions: function (funcName) {\n\t            if (arguments.length < 1) {\n\t                return;\n\t            }\n\t\n\t            var args = Array.prototype.slice.call(arguments, 1),\n\t                ext,\n\t                name;\n\t\n\t            for (name in this.options.extensions) {\n\t                if (this.options.extensions.hasOwnProperty(name)) {\n\t                    ext = this.options.extensions[name];\n\t                    if (ext[funcName] !== undefined) {\n\t                        ext[funcName].apply(ext, args);\n\t                    }\n\t                }\n\t            }\n\t        },\n\t\n\t        /**\n\t         * Pass current Medium Editor instance to all extensions\n\t         * if extension constructor has 'parent' attribute set to 'true'\n\t         *\n\t         */\n\t        passInstance: function () {\n\t            var self = this,\n\t                ext,\n\t                name;\n\t\n\t            for (name in self.options.extensions) {\n\t                if (self.options.extensions.hasOwnProperty(name)) {\n\t                    ext = self.options.extensions[name];\n\t\n\t                    if (ext.parent) {\n\t                        ext.base = self;\n\t                    }\n\t                }\n\t            }\n\t\n\t            return self;\n\t        },\n\t\n\t        bindParagraphCreation: function (index) {\n\t            var self = this;\n\t            this.on(this.elements[index], 'keypress', function (e) {\n\t                var node = getSelectionStart.call(self),\n\t                    tagName;\n\t                if (e.which === 32) {\n\t                    tagName = node.tagName.toLowerCase();\n\t                    if (tagName === 'a') {\n\t                        document.execCommand('unlink', false, null);\n\t                    }\n\t                }\n\t            });\n\t\n\t            this.on(this.elements[index], 'keyup', function (e) {\n\t                var node = getSelectionStart.call(self),\n\t                    tagName,\n\t                    editorElement;\n\t\n\t                if (node && node.getAttribute('data-medium-element') && node.children.length === 0 && !(self.options.disableReturn || node.getAttribute('data-disable-return'))) {\n\t                    document.execCommand('formatBlock', false, 'p');\n\t                }\n\t                if (e.which === 13) {\n\t                    node = getSelectionStart.call(self);\n\t                    tagName = node.tagName.toLowerCase();\n\t                    editorElement = self.getSelectionElement();\n\t\n\t                    if (!(self.options.disableReturn || editorElement.getAttribute('data-disable-return')) &&\n\t                        tagName !== 'li' && !self.isListItemChild(node)) {\n\t                        if (!e.shiftKey) {\n\t                            document.execCommand('formatBlock', false, 'p');\n\t                        }\n\t                        if (tagName === 'a') {\n\t                            document.execCommand('unlink', false, null);\n\t                        }\n\t                    }\n\t                }\n\t            });\n\t            return this;\n\t        },\n\t\n\t        isListItemChild: function (node) {\n\t            var parentNode = node.parentNode,\n\t                tagName = parentNode.tagName.toLowerCase();\n\t            while (this.parentElements.indexOf(tagName) === -1 && tagName !== 'div') {\n\t                if (tagName === 'li') {\n\t                    return true;\n\t                }\n\t                parentNode = parentNode.parentNode;\n\t                if (parentNode && parentNode.tagName) {\n\t                    tagName = parentNode.tagName.toLowerCase();\n\t                } else {\n\t                    return false;\n\t                }\n\t            }\n\t            return false;\n\t        },\n\t\n\t        bindReturn: function (index) {\n\t            var self = this;\n\t            this.on(this.elements[index], 'keypress', function (e) {\n\t                if (e.which === 13) {\n\t                    if (self.options.disableReturn || this.getAttribute('data-disable-return')) {\n\t                        e.preventDefault();\n\t                    } else if (self.options.disableDoubleReturn || this.getAttribute('data-disable-double-return')) {\n\t                        var node = getSelectionStart.call(self);\n\t                        if (node && node.innerText === '\\n') {\n\t                            e.preventDefault();\n\t                        }\n\t                    }\n\t                }\n\t            });\n\t            return this;\n\t        },\n\t\n\t        bindTab: function (index) {\n\t            var self = this;\n\t            this.on(this.elements[index], 'keydown', function (e) {\n\t                if (e.which === 9) {\n\t                    // Override tab only for pre nodes\n\t                    var tag = getSelectionStart.call(self).tagName.toLowerCase();\n\t                    if (tag === 'pre') {\n\t                        e.preventDefault();\n\t                        document.execCommand('insertHtml', null, '    ');\n\t                    }\n\t\n\t                    // Tab to indent list structures!\n\t                    if (tag === 'li') {\n\t                        e.preventDefault();\n\t\n\t                        // If Shift is down, outdent, otherwise indent\n\t                        if (e.shiftKey) {\n\t                            document.execCommand('outdent', e);\n\t                        } else {\n\t                            document.execCommand('indent', e);\n\t                        }\n\t                    }\n\t                }\n\t            });\n\t            return this;\n\t        },\n\t\n\t        buttonTemplate: function (btnType) {\n\t            var buttonLabels = this.getButtonLabels(this.options.buttonLabels),\n\t                buttonTemplates = {\n\t                    'bold': '<button class=\"medium-editor-action medium-editor-action-bold\" data-action=\"bold\" data-element=\"b\">' + buttonLabels.bold + '</button>',\n\t                    'italic': '<button class=\"medium-editor-action medium-editor-action-italic\" data-action=\"italic\" data-element=\"i\">' + buttonLabels.italic + '</button>',\n\t                    'underline': '<button class=\"medium-editor-action medium-editor-action-underline\" data-action=\"underline\" data-element=\"u\">' + buttonLabels.underline + '</button>',\n\t                    'strikethrough': '<button class=\"medium-editor-action medium-editor-action-strikethrough\" data-action=\"strikethrough\" data-element=\"strike\">' + buttonLabels.strikethrough +'</button>',\n\t                    'superscript': '<button class=\"medium-editor-action medium-editor-action-superscript\" data-action=\"superscript\" data-element=\"sup\">' + buttonLabels.superscript + '</button>',\n\t                    'subscript': '<button class=\"medium-editor-action medium-editor-action-subscript\" data-action=\"subscript\" data-element=\"sub\">' + buttonLabels.subscript + '</button>',\n\t                    'anchor': '<button class=\"medium-editor-action medium-editor-action-anchor\" data-action=\"anchor\" data-element=\"a\">' + buttonLabels.anchor + '</button>',\n\t                    'image': '<button class=\"medium-editor-action medium-editor-action-image\" data-action=\"image\" data-element=\"img\">' + buttonLabels.image + '</button>',\n\t                    'header1': '<button class=\"medium-editor-action medium-editor-action-header1\" data-action=\"append-' + this.options.firstHeader + '\" data-element=\"' + this.options.firstHeader + '\">' + buttonLabels.header1 + '</button>',\n\t                    'header2': '<button class=\"medium-editor-action medium-editor-action-header2\" data-action=\"append-' + this.options.secondHeader + '\" data-element=\"' + this.options.secondHeader + '\">' + buttonLabels.header2 + '</button>',\n\t                    'quote': '<button class=\"medium-editor-action medium-editor-action-quote\" data-action=\"append-blockquote\" data-element=\"blockquote\">' + buttonLabels.quote + '</button>',\n\t                    'orderedlist': '<button class=\"medium-editor-action medium-editor-action-orderedlist\" data-action=\"insertorderedlist\" data-element=\"ol\">' + buttonLabels.orderedlist + '</button>',\n\t                    'unorderedlist': '<button class=\"medium-editor-action medium-editor-action-unorderedlist\" data-action=\"insertunorderedlist\" data-element=\"ul\">' + buttonLabels.unorderedlist + '</button>',\n\t                    'pre': '<button class=\"medium-editor-action medium-editor-action-pre\" data-action=\"append-pre\" data-element=\"pre\">' + buttonLabels.pre + '</button>',\n\t                    'indent': '<button class=\"medium-editor-action medium-editor-action-indent\" data-action=\"indent\" data-element=\"ul\">' + buttonLabels.indent + '</button>',\n\t                    'outdent': '<button class=\"medium-editor-action medium-editor-action-outdent\" data-action=\"outdent\" data-element=\"ul\">' + buttonLabels.outdent + '</button>',\n\t                    'justifyCenter': '<button class=\"medium-editor-action medium-editor-action-justifyCenter\" data-action=\"justifyCenter\" data-element=\"\">' + buttonLabels.justifyCenter + '</button>',\n\t                    'justifyFull': '<button class=\"medium-editor-action medium-editor-action-justifyFull\" data-action=\"justifyFull\" data-element=\"\">' + buttonLabels.justifyFull + '</button>',\n\t                    'justifyLeft': '<button class=\"medium-editor-action medium-editor-action-justifyLeft\" data-action=\"justifyLeft\" data-element=\"\">' + buttonLabels.justifyLeft + '</button>',\n\t                    'justifyRight': '<button class=\"medium-editor-action medium-editor-action-justifyRight\" data-action=\"justifyRight\" data-element=\"\">' + buttonLabels.justifyRight + '</button>'\n\t                };\n\t            return buttonTemplates[btnType] || false;\n\t        },\n\t\n\t        // TODO: break method\n\t        getButtonLabels: function (buttonLabelType) {\n\t            var customButtonLabels,\n\t                attrname,\n\t                buttonLabels = {\n\t                    'bold': '<b>B</b>',\n\t                    'italic': '<b><i>I</i></b>',\n\t                    'underline': '<b><u>U</u></b>',\n\t                    'strikethrough': '<s>A</s>',\n\t                    'superscript': '<b>x<sup>1</sup></b>',\n\t                    'subscript': '<b>x<sub>1</sub></b>',\n\t                    'anchor': '<b>#</b>',\n\t                    'image': '<b>image</b>',\n\t                    'header1': '<b>H1</b>',\n\t                    'header2': '<b>H2</b>',\n\t                    'quote': '<b>&ldquo;</b>',\n\t                    'orderedlist': '<b>1.</b>',\n\t                    'unorderedlist': '<b>&bull;</b>',\n\t                    'pre': '<b>0101</b>',\n\t                    'indent': '<b>&rarr;</b>',\n\t                    'outdent': '<b>&larr;</b>',\n\t                    'justifyCenter': '<b>C</b>',\n\t                    'justifyFull': '<b>J</b>',\n\t                    'justifyLeft': '<b>L</b>',\n\t                    'justifyRight': '<b>R</b>'\n\t                };\n\t            if (buttonLabelType === 'fontawesome') {\n\t                customButtonLabels = {\n\t                    'bold': '<i class=\"fa fa-bold\"></i>',\n\t                    'italic': '<i class=\"fa fa-italic\"></i>',\n\t                    'underline': '<i class=\"fa fa-underline\"></i>',\n\t                    'strikethrough': '<i class=\"fa fa-strikethrough\"></i>',\n\t                    'superscript': '<i class=\"fa fa-superscript\"></i>',\n\t                    'subscript': '<i class=\"fa fa-subscript\"></i>',\n\t                    'anchor': '<i class=\"fa fa-link\"></i>',\n\t                    'image': '<i class=\"fa fa-picture-o\"></i>',\n\t                    'quote': '<i class=\"fa fa-quote-right\"></i>',\n\t                    'orderedlist': '<i class=\"fa fa-list-ol\"></i>',\n\t                    'unorderedlist': '<i class=\"fa fa-list-ul\"></i>',\n\t                    'pre': '<i class=\"fa fa-code fa-lg\"></i>',\n\t                    'indent': '<i class=\"fa fa-indent\"></i>',\n\t                    'outdent': '<i class=\"fa fa-outdent\"></i>',\n\t                    'justifyCenter': '<i class=\"fa fa-align-center\"></i>',\n\t                    'justifyFull': '<i class=\"fa fa-align-justify\"></i>',\n\t                    'justifyLeft': '<i class=\"fa fa-align-left\"></i>',\n\t                    'justifyRight': '<i class=\"fa fa-align-right\"></i>'\n\t                };\n\t            } else if (typeof buttonLabelType === 'object') {\n\t                customButtonLabels = buttonLabelType;\n\t            }\n\t            if (typeof customButtonLabels === 'object') {\n\t                for (attrname in customButtonLabels) {\n\t                    if (customButtonLabels.hasOwnProperty(attrname)) {\n\t                        buttonLabels[attrname] = customButtonLabels[attrname];\n\t                    }\n\t                }\n\t            }\n\t            return buttonLabels;\n\t        },\n\t\n\t        initToolbar: function () {\n\t            if (this.toolbar) {\n\t                return this;\n\t            }\n\t            this.toolbar = this.createToolbar();\n\t            this.keepToolbarAlive = false;\n\t            this.anchorForm = this.toolbar.querySelector('.medium-editor-toolbar-form-anchor');\n\t            this.anchorInput = this.anchorForm.querySelector('input.medium-editor-toolbar-anchor-input');\n\t            this.anchorTarget = this.anchorForm.querySelector('input.medium-editor-toolbar-anchor-target');\n\t            this.anchorButton = this.anchorForm.querySelector('input.medium-editor-toolbar-anchor-button');\n\t            this.toolbarActions = this.toolbar.querySelector('.medium-editor-toolbar-actions');\n\t            this.anchorPreview = this.createAnchorPreview();\n\t\n\t            return this;\n\t        },\n\t\n\t        createToolbar: function () {\n\t            var toolbar = document.createElement('div');\n\t            toolbar.id = 'medium-editor-toolbar-' + this.id;\n\t            toolbar.className = 'medium-editor-toolbar';\n\t            toolbar.appendChild(this.toolbarButtons());\n\t            toolbar.appendChild(this.toolbarFormAnchor());\n\t            this.options.elementsContainer.appendChild(toolbar);\n\t            return toolbar;\n\t        },\n\t\n\t        //TODO: actionTemplate\n\t        toolbarButtons: function () {\n\t            var btns = this.options.buttons,\n\t                ul = document.createElement('ul'),\n\t                li,\n\t                i,\n\t                btn,\n\t                ext;\n\t\n\t            ul.id = 'medium-editor-toolbar-actions';\n\t            ul.className = 'medium-editor-toolbar-actions clearfix';\n\t\n\t            for (i = 0; i < btns.length; i += 1) {\n\t                if (this.options.extensions.hasOwnProperty(btns[i])) {\n\t                    ext = this.options.extensions[btns[i]];\n\t                    btn = ext.getButton !== undefined ? ext.getButton() : null;\n\t                } else {\n\t                    btn = this.buttonTemplate(btns[i]);\n\t                }\n\t\n\t                if (btn) {\n\t                    li = document.createElement('li');\n\t                    if (isElement(btn)) {\n\t                        li.appendChild(btn);\n\t                    } else {\n\t                        li.innerHTML = btn;\n\t                    }\n\t                    ul.appendChild(li);\n\t                }\n\t            }\n\t\n\t            return ul;\n\t        },\n\t\n\t        toolbarFormAnchor: function () {\n\t            var anchor = document.createElement('div'),\n\t                input = document.createElement('input'),\n\t                target_label = document.createElement('label'),\n\t                target = document.createElement('input'),\n\t                button_label = document.createElement('label'),\n\t                button = document.createElement('input'),\n\t                close = document.createElement('a'),\n\t                save = document.createElement('a');\n\t\n\t            close.setAttribute('href', '#');\n\t            close.className = 'medium-editor-toobar-anchor-close';\n\t            close.innerHTML = '&times;';\n\t\n\t            save.setAttribute('href', '#');\n\t            save.className = 'medium-editor-toobar-anchor-save';\n\t            save.innerHTML = '&#10003;';\n\t\n\t            input.setAttribute('type', 'text');\n\t            input.className = 'medium-editor-toolbar-anchor-input';\n\t            input.setAttribute('placeholder', this.options.anchorInputPlaceholder);\n\t\n\t\n\t            target.setAttribute('type', 'checkbox');\n\t            target.className = 'medium-editor-toolbar-anchor-target';\n\t            target_label.innerHTML = \"Open in New Window?\";\n\t            target_label.insertBefore(target, target_label.firstChild);\n\t\n\t            button.setAttribute('type', 'checkbox');\n\t            button.className = 'medium-editor-toolbar-anchor-button';\n\t            button_label.innerHTML = \"Button\";\n\t            button_label.insertBefore(button, button_label.firstChild);\n\t\n\t\n\t            anchor.className = 'medium-editor-toolbar-form-anchor';\n\t            anchor.id = 'medium-editor-toolbar-form-anchor';\n\t            anchor.appendChild(input);\n\t\n\t            anchor.appendChild(save);\n\t            anchor.appendChild(close);\n\t\n\t            if (this.options.anchorTarget) {\n\t                anchor.appendChild(target_label);\n\t            }\n\t\n\t            if (this.options.anchorButton) {\n\t                anchor.appendChild(button_label);\n\t            }\n\t\n\t            return anchor;\n\t        },\n\t\n\t        bindSelect: function () {\n\t            var self = this,\n\t                timer = '',\n\t                i;\n\t\n\t            this.checkSelectionWrapper = function (e) {\n\t\n\t                // Do not close the toolbar when bluring the editable area and clicking into the anchor form\n\t                if (e && self.clickingIntoArchorForm(e)) {\n\t                    return false;\n\t                }\n\t\n\t                clearTimeout(timer);\n\t                timer = setTimeout(function () {\n\t                    self.checkSelection();\n\t                }, self.options.delay);\n\t            };\n\t\n\t            this.on(document.documentElement, 'mouseup', this.checkSelectionWrapper);\n\t\n\t            for (i = 0; i < this.elements.length; i += 1) {\n\t                this.on(this.elements[i], 'keyup', this.checkSelectionWrapper);\n\t                this.on(this.elements[i], 'blur', this.checkSelectionWrapper);\n\t            }\n\t            return this;\n\t        },\n\t\n\t        checkSelection: function () {\n\t            var newSelection,\n\t                selectionElement;\n\t\n\t            if (this.keepToolbarAlive !== true && !this.options.disableToolbar) {\n\t\n\t                newSelection = this.options.contentWindow.getSelection();\n\t                if (newSelection.toString().trim() === '' ||\n\t                    (this.options.allowMultiParagraphSelection === false && this.hasMultiParagraphs()) ||\n\t                    this.selectionInContentEditableFalse()) {\n\t                    this.hideToolbarActions();\n\t                } else {\n\t                    selectionElement = this.getSelectionElement();\n\t                    if (!selectionElement || selectionElement.getAttribute('data-disable-toolbar')) {\n\t                        this.hideToolbarActions();\n\t                    } else {\n\t                        this.checkSelectionElement(newSelection, selectionElement);\n\t                    }\n\t                }\n\t            }\n\t            return this;\n\t        },\n\t\n\t        clickingIntoArchorForm: function (e) {\n\t            var self = this;\n\t\n\t            if (e.type && e.type.toLowerCase() === 'blur' && e.relatedTarget && e.relatedTarget === self.anchorInput) {\n\t                return true;\n\t            }\n\t\n\t            return false;\n\t        },\n\t\n\t        hasMultiParagraphs: function () {\n\t            var selectionHtml = getSelectionHtml.call(this).replace(/<[\\S]+><\\/[\\S]+>/gim, ''),\n\t                hasMultiParagraphs = selectionHtml.match(/<(p|h[0-6]|blockquote)>([\\s\\S]*?)<\\/(p|h[0-6]|blockquote)>/g);\n\t\n\t            return (hasMultiParagraphs ? hasMultiParagraphs.length : 0);\n\t        },\n\t\n\t        checkSelectionElement: function (newSelection, selectionElement) {\n\t            var i;\n\t            this.selection = newSelection;\n\t            this.selectionRange = this.selection.getRangeAt(0);\n\t            for (i = 0; i < this.elements.length; i += 1) {\n\t                if (this.elements[i] === selectionElement) {\n\t                    this.setToolbarButtonStates()\n\t                        .setToolbarPosition()\n\t                        .showToolbarActions();\n\t                    return;\n\t                }\n\t            }\n\t            this.hideToolbarActions();\n\t        },\n\t\n\t        findMatchingSelectionParent: function(testElementFunction) {\n\t            var selection = this.options.contentWindow.getSelection(), range, current;\n\t\n\t            if (selection.rangeCount === 0) {\n\t                return false;\n\t            }\n\t\n\t            range = selection.getRangeAt(0);\n\t            current = range.commonAncestorContainer;\n\t\n\t            do {\n\t              if (current.nodeType === 1){\n\t                if ( testElementFunction(current) )\n\t                {\n\t                    return current;\n\t                }\n\t                // do not traverse upwards past the nearest containing editor\n\t                if (current.getAttribute('data-medium-element')) {\n\t                    return false;\n\t                }\n\t              }\n\t\n\t              current = current.parentNode;\n\t            } while (current);\n\t\n\t            return false;\n\t        },\n\t\n\t        getSelectionElement: function () {\n\t            return this.findMatchingSelectionParent(function(el) {\n\t                return el.getAttribute('data-medium-element');\n\t            });\n\t        },\n\t\n\t        selectionInContentEditableFalse: function () {\n\t            return this.findMatchingSelectionParent(function(el) {\n\t                return (el && el.nodeName !== '#text' && el.getAttribute('contenteditable') === 'false');\n\t            });\n\t        },\n\t\n\t        setToolbarPosition: function () {\n\t            var buttonHeight = 50,\n\t                selection = this.options.contentWindow.getSelection(),\n\t                range = selection.getRangeAt(0),\n\t                boundary = range.getBoundingClientRect(),\n\t                defaultLeft = (this.options.diffLeft) - (this.toolbar.offsetWidth / 2),\n\t                middleBoundary = (boundary.left + boundary.right) / 2,\n\t                halfOffsetWidth = this.toolbar.offsetWidth / 2;\n\t            if (boundary.top < buttonHeight) {\n\t                this.toolbar.classList.add('medium-toolbar-arrow-over');\n\t                this.toolbar.classList.remove('medium-toolbar-arrow-under');\n\t                this.toolbar.style.top = buttonHeight + boundary.bottom - this.options.diffTop + this.options.contentWindow.pageYOffset - this.toolbar.offsetHeight + 'px';\n\t            } else {\n\t                this.toolbar.classList.add('medium-toolbar-arrow-under');\n\t                this.toolbar.classList.remove('medium-toolbar-arrow-over');\n\t                this.toolbar.style.top = boundary.top + this.options.diffTop + this.options.contentWindow.pageYOffset - this.toolbar.offsetHeight + 'px';\n\t            }\n\t            if (middleBoundary < halfOffsetWidth) {\n\t                this.toolbar.style.left = defaultLeft + halfOffsetWidth + 'px';\n\t            } else if ((this.options.contentWindow.innerWidth - middleBoundary) < halfOffsetWidth) {\n\t                this.toolbar.style.left = this.options.contentWindow.innerWidth + defaultLeft - halfOffsetWidth + 'px';\n\t            } else {\n\t                this.toolbar.style.left = defaultLeft + middleBoundary + 'px';\n\t            }\n\t\n\t            this.hideAnchorPreview();\n\t\n\t            return this;\n\t        },\n\t\n\t        setToolbarButtonStates: function () {\n\t            var buttons = this.toolbarActions.querySelectorAll('button'),\n\t                i;\n\t            for (i = 0; i < buttons.length; i += 1) {\n\t                buttons[i].classList.remove(this.options.activeButtonClass);\n\t            }\n\t            this.checkActiveButtons();\n\t            return this;\n\t        },\n\t\n\t        checkActiveButtons: function () {\n\t            var elements = Array.prototype.slice.call(this.elements),\n\t                parentNode = this.getSelectedParentElement();\n\t            while (parentNode.tagName !== undefined && this.parentElements.indexOf(parentNode.tagName.toLowerCase) === -1) {\n\t                this.activateButton(parentNode.tagName.toLowerCase());\n\t                this.callExtensions('checkState', parentNode);\n\t\n\t                // we can abort the search upwards if we leave the contentEditable element\n\t                if (elements.indexOf(parentNode) !== -1) {\n\t                    break;\n\t                }\n\t                parentNode = parentNode.parentNode;\n\t            }\n\t        },\n\t\n\t        activateButton: function (tag) {\n\t            var el = this.toolbar.querySelector('[data-element=\"' + tag + '\"]');\n\t            if (el !== null && el.className.indexOf(this.options.activeButtonClass) === -1) {\n\t                el.className += ' ' + this.options.activeButtonClass;\n\t            }\n\t        },\n\t\n\t        bindButtons: function () {\n\t            var buttons = this.toolbar.querySelectorAll('button'),\n\t                i,\n\t                self = this,\n\t                triggerAction = function (e) {\n\t                    e.preventDefault();\n\t                    e.stopPropagation();\n\t                    if (self.selection === undefined) {\n\t                        self.checkSelection();\n\t                    }\n\t                    if (this.className.indexOf(self.options.activeButtonClass) > -1) {\n\t                        this.classList.remove(self.options.activeButtonClass);\n\t                    } else {\n\t                        this.className += ' ' + self.options.activeButtonClass;\n\t                    }\n\t                    if (this.hasAttribute('data-action')) {\n\t                        self.execAction(this.getAttribute('data-action'), e);\n\t                    }\n\t                };\n\t            for (i = 0; i < buttons.length; i += 1) {\n\t                this.on(buttons[i], 'click', triggerAction);\n\t            }\n\t            this.setFirstAndLastItems(buttons);\n\t            return this;\n\t        },\n\t\n\t        setFirstAndLastItems: function (buttons) {\n\t            if (buttons.length > 0) {\n\t                buttons[0].className += ' ' + this.options.firstButtonClass;\n\t                buttons[buttons.length - 1].className += ' ' + this.options.lastButtonClass;\n\t            }\n\t            return this;\n\t        },\n\t\n\t        execAction: function (action, e) {\n\t            if (action.indexOf('append-') > -1) {\n\t                this.execFormatBlock(action.replace('append-', ''));\n\t                this.setToolbarPosition();\n\t                this.setToolbarButtonStates();\n\t            } else if (action === 'anchor') {\n\t                this.triggerAnchorAction(e);\n\t            } else if (action === 'image') {\n\t                this.options.ownerDocument.execCommand('insertImage', false, this.options.contentWindow.getSelection());\n\t            } else {\n\t                this.options.ownerDocument.execCommand(action, false, null);\n\t                this.setToolbarPosition();\n\t            }\n\t        },\n\t\n\t        // http://stackoverflow.com/questions/15867542/range-object-get-selection-parent-node-chrome-vs-firefox\n\t        rangeSelectsSingleNode: function (range) {\n\t            var startNode = range.startContainer;\n\t            return startNode === range.endContainer &&\n\t                startNode.hasChildNodes() &&\n\t                range.endOffset === range.startOffset + 1;\n\t        },\n\t\n\t        getSelectedParentElement: function () {\n\t            var selectedParentElement = null,\n\t                range = this.selectionRange;\n\t            if (this.rangeSelectsSingleNode(range)) {\n\t                selectedParentElement = range.startContainer.childNodes[range.startOffset];\n\t            } else if (range.startContainer.nodeType === 3) {\n\t                selectedParentElement = range.startContainer.parentNode;\n\t            } else {\n\t                selectedParentElement = range.startContainer;\n\t            }\n\t            return selectedParentElement;\n\t        },\n\t\n\t        triggerAnchorAction: function () {\n\t            var selectedParentElement = this.getSelectedParentElement();\n\t            if (selectedParentElement.tagName &&\n\t                    selectedParentElement.tagName.toLowerCase() === 'a') {\n\t                this.options.ownerDocument.execCommand('unlink', false, null);\n\t            } else {\n\t                if (this.anchorForm.style.display === 'block') {\n\t                    this.showToolbarActions();\n\t                } else {\n\t                    this.showAnchorForm();\n\t                }\n\t            }\n\t            return this;\n\t        },\n\t\n\t        execFormatBlock: function (el) {\n\t            var selectionData = this.getSelectionData(this.selection.anchorNode);\n\t            // FF handles blockquote differently on formatBlock\n\t            // allowing nesting, we need to use outdent\n\t            // https://developer.mozilla.org/en-US/docs/Rich-Text_Editing_in_Mozilla\n\t            if (el === 'blockquote' && selectionData.el &&\n\t                selectionData.el.parentNode.tagName.toLowerCase() === 'blockquote') {\n\t                return this.options.ownerDocument.execCommand('outdent', false, null);\n\t            }\n\t            if (selectionData.tagName === el) {\n\t                el = 'p';\n\t            }\n\t            // When IE we need to add <> to heading elements and\n\t            //  blockquote needs to be called as indent\n\t            // http://stackoverflow.com/questions/10741831/execcommand-formatblock-headings-in-ie\n\t            // http://stackoverflow.com/questions/1816223/rich-text-editor-with-blockquote-function/1821777#1821777\n\t            if (this.isIE) {\n\t                if (el === 'blockquote') {\n\t                    return this.options.ownerDocument.execCommand('indent', false, el);\n\t                }\n\t                el = '<' + el + '>';\n\t            }\n\t            return this.options.ownerDocument.execCommand('formatBlock', false, el);\n\t        },\n\t\n\t        getSelectionData: function (el) {\n\t            var tagName;\n\t\n\t            if (el && el.tagName) {\n\t                tagName = el.tagName.toLowerCase();\n\t            }\n\t\n\t            while (el && this.parentElements.indexOf(tagName) === -1) {\n\t                el = el.parentNode;\n\t                if (el && el.tagName) {\n\t                    tagName = el.tagName.toLowerCase();\n\t                }\n\t            }\n\t\n\t            return {\n\t                el: el,\n\t                tagName: tagName\n\t            };\n\t        },\n\t\n\t        getFirstChild: function (el) {\n\t            var firstChild = el.firstChild;\n\t            while (firstChild !== null && firstChild.nodeType !== 1) {\n\t                firstChild = firstChild.nextSibling;\n\t            }\n\t            return firstChild;\n\t        },\n\t\n\t        hideToolbarActions: function () {\n\t            this.keepToolbarAlive = false;\n\t            if (this.toolbar !== undefined) {\n\t                this.toolbar.classList.remove('medium-editor-toolbar-active');\n\t            }\n\t        },\n\t\n\t        showToolbarActions: function () {\n\t            var self = this,\n\t                timer;\n\t            this.anchorForm.style.display = 'none';\n\t            this.toolbarActions.style.display = 'block';\n\t            this.keepToolbarAlive = false;\n\t            clearTimeout(timer);\n\t            timer = setTimeout(function () {\n\t                if (self.toolbar && !self.toolbar.classList.contains('medium-editor-toolbar-active')) {\n\t                    self.toolbar.classList.add('medium-editor-toolbar-active');\n\t                }\n\t            }, 100);\n\t        },\n\t\n\t        saveSelection: function() {\n\t            this.savedSelection = saveSelection.call(this);\n\t        },\n\t\n\t        restoreSelection: function() {\n\t            restoreSelection.call(this, this.savedSelection);\n\t        },\n\t\n\t        showAnchorForm: function (link_value) {\n\t            this.toolbarActions.style.display = 'none';\n\t            this.saveSelection();\n\t            this.anchorForm.style.display = 'block';\n\t            this.setToolbarPosition();\n\t            this.keepToolbarAlive = true;\n\t            this.anchorInput.focus();\n\t            this.anchorInput.value = link_value || '';\n\t        },\n\t\n\t        bindAnchorForm: function () {\n\t            var linkCancel = this.anchorForm.querySelector('a.medium-editor-toobar-anchor-close'),\n\t                linkSave = this.anchorForm.querySelector('a.medium-editor-toobar-anchor-save'),\n\t                self = this;\n\t\n\t            this.on(this.anchorForm, 'click', function (e) {\n\t                e.stopPropagation();\n\t                self.keepToolbarAlive = true;\n\t            });\n\t\n\t            this.on(this.anchorInput, 'keyup', function (e) {\n\t                var button = null,\n\t                    target;\n\t\n\t                if (e.keyCode === 13) {\n\t                    e.preventDefault();\n\t                    if (self.options.anchorTarget && self.anchorTarget.checked) {\n\t                        target = \"_blank\";\n\t                    }\n\t                    else {\n\t                        target = \"_self\";\n\t                    }\n\t\n\t                    if (self.options.anchorButton && self.anchorButton.checked) {\n\t                        button = self.options.anchorButtonClass;\n\t                    }\n\t\n\t                    self.createLink(this, target, button);\n\t                }\n\t            });\n\t\n\t            this.on(linkSave, 'click', function(e) {\n\t                var button = null,\n\t                    target;\n\t                e.preventDefault();\n\t                if ( self.options.anchorTarget && self.anchorTarget.checked) {\n\t                    target = \"_blank\";\n\t                }\n\t                else {\n\t                    target = \"_self\";\n\t                }\n\t\n\t                if (self.options.anchorButton && self.anchorButton.checked) {\n\t                    button = self.options.anchorButtonClass;\n\t                }\n\t\n\t                self.createLink(self.anchorInput, target, button);\n\t            }, true);\n\t\n\t            this.on(this.anchorInput, 'click', function (e) {\n\t                // make sure not to hide form when cliking into the input\n\t                e.stopPropagation();\n\t                self.keepToolbarAlive = true;\n\t            });\n\t\n\t            // Hide the anchor form when focusing outside of it.\n\t            this.on(this.options.ownerDocument.body, 'click', function (e) {\n\t                if (e.target !== self.anchorForm && !isDescendant(self.anchorForm, e.target) && !isDescendant(self.toolbarActions, e.target)) {\n\t                    self.keepToolbarAlive = false;\n\t                    self.checkSelection();\n\t                }\n\t            }, true);\n\t            this.on(this.options.ownerDocument.body, 'focus', function (e) {\n\t                if (e.target !== self.anchorForm && !isDescendant(self.anchorForm, e.target) && !isDescendant(self.toolbarActions, e.target)) {\n\t                    self.keepToolbarAlive = false;\n\t                    self.checkSelection();\n\t                }\n\t            }, true);\n\t\n\t            this.on(linkCancel, 'click', function (e) {\n\t                e.preventDefault();\n\t                self.showToolbarActions();\n\t                restoreSelection.call(self, self.savedSelection);\n\t            });\n\t            return this;\n\t        },\n\t\n\t\n\t        hideAnchorPreview: function () {\n\t            this.anchorPreview.classList.remove('medium-editor-anchor-preview-active');\n\t        },\n\t\n\t        // TODO: break method\n\t        showAnchorPreview: function (anchorEl) {\n\t            if (this.anchorPreview.classList.contains('medium-editor-anchor-preview-active')\n\t                || anchorEl.getAttribute('data-disable-preview')) {\n\t                return true;\n\t            }\n\t\n\t            var self = this,\n\t                buttonHeight = 40,\n\t                boundary = anchorEl.getBoundingClientRect(),\n\t                middleBoundary = (boundary.left + boundary.right) / 2,\n\t                halfOffsetWidth,\n\t                defaultLeft,\n\t                timer;\n\t\n\t            self.anchorPreview.querySelector('i').textContent = anchorEl.href;\n\t            halfOffsetWidth = self.anchorPreview.offsetWidth / 2;\n\t            defaultLeft = self.options.diffLeft - halfOffsetWidth;\n\t\n\t            clearTimeout(timer);\n\t            timer = setTimeout(function () {\n\t                if (self.anchorPreview && !self.anchorPreview.classList.contains('medium-editor-anchor-preview-active')) {\n\t                    self.anchorPreview.classList.add('medium-editor-anchor-preview-active');\n\t                }\n\t            }, 100);\n\t\n\t            self.observeAnchorPreview(anchorEl);\n\t\n\t            self.anchorPreview.classList.add('medium-toolbar-arrow-over');\n\t            self.anchorPreview.classList.remove('medium-toolbar-arrow-under');\n\t            self.anchorPreview.style.top = Math.round(buttonHeight + boundary.bottom - self.options.diffTop + this.options.contentWindow.pageYOffset - self.anchorPreview.offsetHeight) + 'px';\n\t            if (middleBoundary < halfOffsetWidth) {\n\t                self.anchorPreview.style.left = defaultLeft + halfOffsetWidth + 'px';\n\t            } else if ((this.options.contentWindow.innerWidth - middleBoundary) < halfOffsetWidth) {\n\t                self.anchorPreview.style.left = this.options.contentWindow.innerWidth + defaultLeft - halfOffsetWidth + 'px';\n\t            } else {\n\t                self.anchorPreview.style.left = defaultLeft + middleBoundary + 'px';\n\t            }\n\t\n\t            return this;\n\t        },\n\t\n\t        // TODO: break method\n\t        observeAnchorPreview: function (anchorEl) {\n\t            var self = this,\n\t                lastOver = (new Date()).getTime(),\n\t                over = true,\n\t                stamp = function () {\n\t                    lastOver = (new Date()).getTime();\n\t                    over = true;\n\t                },\n\t                unstamp = function (e) {\n\t                    if (!e.relatedTarget || !/anchor-preview/.test(e.relatedTarget.className)) {\n\t                        over = false;\n\t                    }\n\t                },\n\t                interval_timer = setInterval(function () {\n\t                    if (over) {\n\t                        return true;\n\t                    }\n\t                    var durr = (new Date()).getTime() - lastOver;\n\t                    if (durr > self.options.anchorPreviewHideDelay) {\n\t                        // hide the preview 1/2 second after mouse leaves the link\n\t                        self.hideAnchorPreview();\n\t\n\t                        // cleanup\n\t                        clearInterval(interval_timer);\n\t                        self.off(self.anchorPreview, 'mouseover', stamp);\n\t                        self.off(self.anchorPreview, 'mouseout', unstamp);\n\t                        self.off(anchorEl, 'mouseover', stamp);\n\t                        self.off(anchorEl, 'mouseout', unstamp);\n\t\n\t                    }\n\t                }, 200);\n\t\n\t            this.on(self.anchorPreview, 'mouseover', stamp);\n\t            this.on(self.anchorPreview, 'mouseout', unstamp);\n\t            this.on(anchorEl, 'mouseover', stamp);\n\t            this.on(anchorEl, 'mouseout', unstamp);\n\t        },\n\t\n\t        createAnchorPreview: function () {\n\t            var self = this,\n\t                anchorPreview = this.options.ownerDocument.createElement('div');\n\t\n\t            anchorPreview.id = 'medium-editor-anchor-preview-' + this.id;\n\t            anchorPreview.className = 'medium-editor-anchor-preview';\n\t            anchorPreview.innerHTML = this.anchorPreviewTemplate();\n\t            this.options.elementsContainer.appendChild(anchorPreview);\n\t\n\t            this.on(anchorPreview, 'click', function () {\n\t                self.anchorPreviewClickHandler();\n\t            });\n\t\n\t            return anchorPreview;\n\t        },\n\t\n\t        anchorPreviewTemplate: function () {\n\t            return '<div class=\"medium-editor-toolbar-anchor-preview\" id=\"medium-editor-toolbar-anchor-preview\">' +\n\t                '    <i class=\"medium-editor-toolbar-anchor-preview-inner\"></i>' +\n\t                '</div>';\n\t        },\n\t\n\t        anchorPreviewClickHandler: function (e) {\n\t            if (this.activeAnchor) {\n\t\n\t                var self = this,\n\t                    range = this.options.ownerDocument.createRange(),\n\t                    sel = this.options.contentWindow.getSelection();\n\t\n\t                range.selectNodeContents(self.activeAnchor);\n\t                sel.removeAllRanges();\n\t                sel.addRange(range);\n\t                setTimeout(function () {\n\t                    if (self.activeAnchor) {\n\t                        self.showAnchorForm(self.activeAnchor.href);\n\t                    }\n\t                    self.keepToolbarAlive = false;\n\t                }, 100 + self.options.delay);\n\t\n\t            }\n\t\n\t            this.hideAnchorPreview();\n\t        },\n\t\n\t        editorAnchorObserver: function (e) {\n\t            var self = this,\n\t                overAnchor = true,\n\t                leaveAnchor = function () {\n\t                    // mark the anchor as no longer hovered, and stop listening\n\t                    overAnchor = false;\n\t                    self.off(self.activeAnchor, 'mouseout', leaveAnchor);\n\t                };\n\t\n\t            if (e.target && e.target.tagName.toLowerCase() === 'a') {\n\t\n\t                // Detect empty href attributes\n\t                // The browser will make href=\"\" or href=\"#top\"\n\t                // into absolute urls when accessed as e.targed.href, so check the html\n\t                if (!/href=[\"']\\S+[\"']/.test(e.target.outerHTML) || /href=[\"']#\\S+[\"']/.test(e.target.outerHTML)) {\n\t                    return true;\n\t                }\n\t\n\t                // only show when hovering on anchors\n\t                if (this.toolbar.classList.contains('medium-editor-toolbar-active')) {\n\t                    // only show when toolbar is not present\n\t                    return true;\n\t                }\n\t                this.activeAnchor = e.target;\n\t                this.on(this.activeAnchor, 'mouseout', leaveAnchor);\n\t                // show the anchor preview according to the configured delay\n\t                // if the mouse has not left the anchor tag in that time\n\t                setTimeout(function () {\n\t                    if (overAnchor) {\n\t                        self.showAnchorPreview(e.target);\n\t                    }\n\t                }, self.options.delay);\n\t\n\t\n\t            }\n\t        },\n\t\n\t        bindAnchorPreview: function (index) {\n\t            var i, self = this;\n\t            this.editorAnchorObserverWrapper = function (e) {\n\t                self.editorAnchorObserver(e);\n\t            };\n\t            for (i = 0; i < this.elements.length; i += 1) {\n\t                this.on(this.elements[i], 'mouseover', this.editorAnchorObserverWrapper);\n\t            }\n\t            return this;\n\t        },\n\t\n\t        checkLinkFormat: function (value) {\n\t            var re = /^(https?|ftps?|rtmpt?):\\/\\/|mailto:/;\n\t            return (re.test(value) ? '' : 'http://') + value;\n\t        },\n\t\n\t        setTargetBlank: function (el) {\n\t            var i;\n\t            el = el || getSelectionStart.call(this);\n\t            if (el.tagName.toLowerCase() === 'a') {\n\t                el.target = '_blank';\n\t            } else {\n\t                el = el.getElementsByTagName('a');\n\t\n\t                for (i = 0; i < el.length; i += 1) {\n\t                    el[i].target = '_blank';\n\t                }\n\t            }\n\t        },\n\t\n\t        setButtonClass: function (buttonClass) {\n\t            var el = getSelectionStart.call(this),\n\t                classes = buttonClass.split(' '),\n\t                i, j;\n\t            if (el.tagName.toLowerCase() === 'a') {\n\t                for (j = 0; j < classes.length; j += 1) {\n\t                    el.classList.add(classes[j]);\n\t                }\n\t            } else {\n\t                el = el.getElementsByTagName('a');\n\t                for (i = 0; i < el.length; i += 1) {\n\t                    for (j = 0; j < classes.length; j += 1) {\n\t                        el[i].classList.add(classes[j]);\n\t                    }\n\t                }\n\t            }\n\t        },\n\t\n\t        createLink: function (input, target, buttonClass) {\n\t            var i, event;\n\t\n\t            if (input.value.trim().length === 0) {\n\t                this.hideToolbarActions();\n\t                return;\n\t            }\n\t\n\t            restoreSelection.call(this, this.savedSelection);\n\t\n\t            if (this.options.checkLinkFormat) {\n\t                input.value = this.checkLinkFormat(input.value);\n\t            }\n\t\n\t            this.options.ownerDocument.execCommand('createLink', false, input.value);\n\t\n\t            if (this.options.targetBlank || target === \"_blank\") {\n\t                this.setTargetBlank();\n\t            }\n\t\n\t            if (buttonClass) {\n\t                this.setButtonClass(buttonClass);\n\t            }\n\t\n\t            if (this.options.targetBlank || target === \"_blank\" || buttonClass) {\n\t                event = this.options.ownerDocument.createEvent(\"HTMLEvents\");\n\t                event.initEvent(\"input\", true, true, this.options.contentWindow);\n\t                for (i = 0; i < this.elements.length; i += 1) {\n\t                    this.elements[i].dispatchEvent(event);\n\t                }\n\t            }\n\t\n\t            this.checkSelection();\n\t            this.showToolbarActions();\n\t            input.value = '';\n\t        },\n\t\n\t        bindWindowActions: function () {\n\t            var timerResize,\n\t                self = this;\n\t            this.windowResizeHandler = function () {\n\t                clearTimeout(timerResize);\n\t                timerResize = setTimeout(function () {\n\t                    if (self.toolbar && self.toolbar.classList.contains('medium-editor-toolbar-active')) {\n\t                        self.setToolbarPosition();\n\t                    }\n\t                }, 100);\n\t            };\n\t            this.on(this.options.contentWindow, 'resize', this.windowResizeHandler);\n\t            return this;\n\t        },\n\t\n\t        activate: function () {\n\t            if (this.isActive) {\n\t                return;\n\t            }\n\t\n\t            this.setup();\n\t        },\n\t\n\t        // TODO: break method\n\t        deactivate: function () {\n\t            var i;\n\t            if (!this.isActive) {\n\t                return;\n\t            }\n\t            this.isActive = false;\n\t\n\t            if (this.toolbar !== undefined) {\n\t                this.options.elementsContainer.removeChild(this.anchorPreview);\n\t                this.options.elementsContainer.removeChild(this.toolbar);\n\t                delete this.toolbar;\n\t                delete this.anchorPreview;\n\t            }\n\t\n\t            for (i = 0; i < this.elements.length; i += 1) {\n\t                this.elements[i].removeAttribute('contentEditable');\n\t                this.elements[i].removeAttribute('data-medium-element');\n\t            }\n\t\n\t            this.removeAllEvents();\n\t        },\n\t\n\t        htmlEntities: function (str) {\n\t            // converts special characters (like <) into their escaped/encoded values (like &lt;).\n\t            // This allows you to show to display the string without the browser reading it as HTML.\n\t            return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n\t        },\n\t\n\t        bindPaste: function () {\n\t            var i, self = this;\n\t            this.pasteWrapper = function (e) {\n\t                var paragraphs,\n\t                    html = '',\n\t                    p;\n\t\n\t                this.classList.remove('medium-editor-placeholder');\n\t                if (!self.options.forcePlainText && !self.options.cleanPastedHTML) {\n\t                    return this;\n\t                }\n\t\n\t                if (e.clipboardData && e.clipboardData.getData && !e.defaultPrevented) {\n\t                    e.preventDefault();\n\t\n\t                    if (self.options.cleanPastedHTML && e.clipboardData.getData('text/html')) {\n\t                        return self.cleanPaste(e.clipboardData.getData('text/html'));\n\t                    }\n\t                    if (!(self.options.disableReturn || this.getAttribute('data-disable-return'))) {\n\t                        paragraphs = e.clipboardData.getData('text/plain').split(/[\\r\\n]/g);\n\t                        for (p = 0; p < paragraphs.length; p += 1) {\n\t                            if (paragraphs[p] !== '') {\n\t                                if (navigator.userAgent.match(/firefox/i) && p === 0) {\n\t                                    html += self.htmlEntities(paragraphs[p]);\n\t                                } else {\n\t                                    html += '<p>' + self.htmlEntities(paragraphs[p]) + '</p>';\n\t                                }\n\t                            }\n\t                        }\n\t                        self.options.ownerDocument.execCommand('insertHTML', false, html);\n\t                    } else {\n\t                        html = self.htmlEntities(e.clipboardData.getData('text/plain'));\n\t                        self.options.ownerDocument.execCommand('insertHTML', false, html);\n\t                    }\n\t                }\n\t            };\n\t            for (i = 0; i < this.elements.length; i += 1) {\n\t                this.on(this.elements[i], 'paste', this.pasteWrapper);\n\t            }\n\t            return this;\n\t        },\n\t\n\t        setPlaceholders: function () {\n\t            var i,\n\t                activatePlaceholder = function (el) {\n\t                    if (!(el.querySelector('img')) &&\n\t                            !(el.querySelector('blockquote')) &&\n\t                            el.textContent.replace(/^\\s+|\\s+$/g, '') === '') {\n\t                        el.classList.add('medium-editor-placeholder');\n\t                    }\n\t                },\n\t                placeholderWrapper = function (e) {\n\t                    this.classList.remove('medium-editor-placeholder');\n\t                    if (e.type !== 'keypress') {\n\t                        activatePlaceholder(this);\n\t                    }\n\t                };\n\t            for (i = 0; i < this.elements.length; i += 1) {\n\t                activatePlaceholder(this.elements[i]);\n\t                this.on(this.elements[i], 'blur', placeholderWrapper);\n\t                this.on(this.elements[i], 'keypress', placeholderWrapper);\n\t            }\n\t            return this;\n\t        },\n\t\n\t        cleanPaste: function (text) {\n\t\n\t            /*jslint regexp: true*/\n\t            /*\n\t                jslint does not allow character negation, because the negation\n\t                will not match any unicode characters. In the regexes in this\n\t                block, negation is used specifically to match the end of an html\n\t                tag, and in fact unicode characters *should* be allowed.\n\t            */\n\t            var i, elList, workEl,\n\t                el = this.getSelectionElement(),\n\t                multiline = /<p|<br|<div/.test(text),\n\t                replacements = [\n\t\n\t                    // replace two bogus tags that begin pastes from google docs\n\t                    [new RegExp(/<[^>]*docs-internal-guid[^>]*>/gi), \"\"],\n\t                    [new RegExp(/<\\/b>(<br[^>]*>)?$/gi), \"\"],\n\t\n\t                     // un-html spaces and newlines inserted by OS X\n\t                    [new RegExp(/<span class=\"Apple-converted-space\">\\s+<\\/span>/g), ' '],\n\t                    [new RegExp(/<br class=\"Apple-interchange-newline\">/g), '<br>'],\n\t\n\t                    // replace google docs italics+bold with a span to be replaced once the html is inserted\n\t                    [new RegExp(/<span[^>]*(font-style:italic;font-weight:bold|font-weight:bold;font-style:italic)[^>]*>/gi), '<span class=\"replace-with italic bold\">'],\n\t\n\t                    // replace google docs italics with a span to be replaced once the html is inserted\n\t                    [new RegExp(/<span[^>]*font-style:italic[^>]*>/gi), '<span class=\"replace-with italic\">'],\n\t\n\t                    //[replace google docs bolds with a span to be replaced once the html is inserted\n\t                    [new RegExp(/<span[^>]*font-weight:bold[^>]*>/gi), '<span class=\"replace-with bold\">'],\n\t\n\t                     // replace manually entered b/i/a tags with real ones\n\t                    [new RegExp(/&lt;(\\/?)(i|b|a)&gt;/gi), '<$1$2>'],\n\t\n\t                     // replace manually a tags with real ones, converting smart-quotes from google docs\n\t                    [new RegExp(/&lt;a\\s+href=(&quot;|&rdquo;|&ldquo;|“|”)([^&]+)(&quot;|&rdquo;|&ldquo;|“|”)&gt;/gi), '<a href=\"$2\">']\n\t\n\t                ];\n\t            /*jslint regexp: false*/\n\t\n\t            for (i = 0; i < replacements.length; i += 1) {\n\t                text = text.replace(replacements[i][0], replacements[i][1]);\n\t            }\n\t\n\t            if (multiline) {\n\t\n\t                // double br's aren't converted to p tags, but we want paragraphs.\n\t                elList = text.split('<br><br>');\n\t\n\t                this.pasteHTML('<p>' + elList.join('</p><p>') + '</p>');\n\t                this.options.ownerDocument.execCommand('insertText', false, \"\\n\");\n\t\n\t                // block element cleanup\n\t                elList = el.querySelectorAll('a,p,div,br');\n\t                for (i = 0; i < elList.length; i += 1) {\n\t\n\t                    workEl = elList[i];\n\t\n\t                    switch (workEl.tagName.toLowerCase()) {\n\t                    case 'a':\n\t                        if (this.options.targetBlank){\n\t                          this.setTargetBlank(workEl);\n\t                        }\n\t                        break;\n\t                    case 'p':\n\t                    case 'div':\n\t                        this.filterCommonBlocks(workEl);\n\t                        break;\n\t                    case 'br':\n\t                        this.filterLineBreak(workEl);\n\t                        break;\n\t                    }\n\t\n\t                }\n\t\n\t\n\t            } else {\n\t\n\t                this.pasteHTML(text);\n\t\n\t            }\n\t\n\t        },\n\t\n\t        pasteHTML: function (html) {\n\t            var elList, workEl, i, fragmentBody, pasteBlock = this.options.ownerDocument.createDocumentFragment();\n\t\n\t            pasteBlock.appendChild(this.options.ownerDocument.createElement('body'));\n\t\n\t            fragmentBody = pasteBlock.querySelector('body');\n\t            fragmentBody.innerHTML = html;\n\t\n\t            this.cleanupSpans(fragmentBody);\n\t\n\t            elList = fragmentBody.querySelectorAll('*');\n\t            for (i = 0; i < elList.length; i += 1) {\n\t\n\t                workEl = elList[i];\n\t\n\t                // delete ugly attributes\n\t                workEl.removeAttribute('class');\n\t                workEl.removeAttribute('style');\n\t                workEl.removeAttribute('dir');\n\t\n\t                if (workEl.tagName.toLowerCase() === 'meta') {\n\t                    workEl.parentNode.removeChild(workEl);\n\t                }\n\t\n\t            }\n\t            this.options.ownerDocument.execCommand('insertHTML', false, fragmentBody.innerHTML.replace(/&nbsp;/g, ' '));\n\t        },\n\t        isCommonBlock: function (el) {\n\t            return (el && (el.tagName.toLowerCase() === 'p' || el.tagName.toLowerCase() === 'div'));\n\t        },\n\t        filterCommonBlocks: function (el) {\n\t            if (/^\\s*$/.test(el.innerText)) {\n\t                el.parentNode.removeChild(el);\n\t            }\n\t        },\n\t        filterLineBreak: function (el) {\n\t            if (this.isCommonBlock(el.previousElementSibling)) {\n\t\n\t                // remove stray br's following common block elements\n\t                el.parentNode.removeChild(el);\n\t\n\t            } else if (this.isCommonBlock(el.parentNode) && (el.parentNode.firstChild === el || el.parentNode.lastChild === el)) {\n\t\n\t                // remove br's just inside open or close tags of a div/p\n\t                el.parentNode.removeChild(el);\n\t\n\t            } else if (el.parentNode.childElementCount === 1) {\n\t\n\t                // and br's that are the only child of a div/p\n\t                this.removeWithParent(el);\n\t\n\t            }\n\t\n\t        },\n\t\n\t        // remove an element, including its parent, if it is the only element within its parent\n\t        removeWithParent: function (el) {\n\t            if (el && el.parentNode) {\n\t                if (el.parentNode.parentNode && el.parentNode.childElementCount === 1) {\n\t                    el.parentNode.parentNode.removeChild(el.parentNode);\n\t                } else {\n\t                    el.parentNode.removeChild(el.parentNode);\n\t                }\n\t            }\n\t        },\n\t\n\t        cleanupSpans: function (container_el) {\n\t\n\t            var i,\n\t                el,\n\t                new_el,\n\t                spans = container_el.querySelectorAll('.replace-with');\n\t\n\t            for (i = 0; i < spans.length; i += 1) {\n\t\n\t                el = spans[i];\n\t                new_el = this.options.ownerDocument.createElement(el.classList.contains('bold') ? 'b' : 'i');\n\t\n\t                if (el.classList.contains('bold') && el.classList.contains('italic')) {\n\t\n\t                    // add an i tag as well if this has both italics and bold\n\t                    new_el.innerHTML = '<i>' + el.innerHTML + '</i>';\n\t\n\t                } else {\n\t\n\t                    new_el.innerHTML = el.innerHTML;\n\t\n\t                }\n\t                el.parentNode.replaceChild(new_el, el);\n\t\n\t            }\n\t\n\t            spans = container_el.querySelectorAll('span');\n\t            for (i = 0; i < spans.length; i += 1) {\n\t\n\t                el = spans[i];\n\t\n\t                // remove empty spans, replace others with their contents\n\t                if (/^\\s*$/.test()) {\n\t                    el.parentNode.removeChild(el);\n\t                } else {\n\t                    el.parentNode.replaceChild(this.options.ownerDocument.createTextNode(el.innerText), el);\n\t                }\n\t\n\t            }\n\t\n\t        }\n\t\n\t    };\n\t\n\t}(window, document));\n\n\n/***/ },\n\n/***/ 63:\n/***/ function(module, exports, __webpack_require__) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }\n\n/******/ })\n\n\n/** WEBPACK FOOTER **\n ** addons/medium.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f242a72de77b6b5c3219\n **/","/**\n * This component adds a medium.com-like rich text editor block type.\n *\n * Source for this component can be found here:\n * https://github.com/daviferreira/medium-editor\n */\n\nvar Editor    = require('./editor')\nvar Previewer = require('./previewer')\nvar React     = require('react')\n\nrequire('./style')\n\nvar Medium = {\n\n  defaultContent:function() {\n    return { html: '', text: '' }\n  },\n\n  renderEditor:function() {\n    return React.createElement(Editor, React.__spread({onBlur:  this.setContent},   this.state.content ))\n  },\n\n  renderPreviewer:function() {\n    return React.createElement(Previewer, React.__spread({},   this.state.content ))\n  }\n\n}\n\nmodule.exports = Medium\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./addons/medium/index.js\n ** module id = 0\n ** module chunks = 3\n **/","module.exports = require(\"react\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"react\"\n ** module id = 1\n ** module chunks = 0 1 2 3\n **/","var MediumEditor = require('./vendor/medium-editor')\nvar React        = require('react')\nvar Types        = React.PropTypes\n\nvar Editor = React.createClass({displayName: \"Editor\",\n\n  propTypes: {\n    html   : Types.string.isRequired,\n    onBlur : Types.func.isRequired\n  },\n\n  getDefaultProps:function() {\n    return {\n      options: {\n        buttons: [ 'header1', 'header2', 'bold', 'italic', 'underline', 'anchor', 'quote',  'unorderedlist', 'orderedlist' ],\n        firstHeader: 'h1',\n        secondHeader: 'h2',\n        diffLeft: 0,\n        diffTop: -10,\n        disableDoubleReturn: true\n      }\n    }\n  },\n\n  shouldComponentUpdate:function(props        , state        ){\n    return false\n  },\n\n  componentDidMount:function() {\n    this.setState({\n      editor: new MediumEditor(this.refs.editor.getDOMNode(), this.props.options)\n    })\n  },\n\n  componentWillUnmount:function() {\n    this.state.editor.deactivate()\n  },\n\n  render:function() {\n    return (\n      React.createElement(\"div\", {className: \"col-block-content\"}, \n        React.createElement(\"div\", {className: \"col-medium\", onBlur:  this._onBlur, role: \"textarea\", \"aria-multiline\": \"true\", ref: \"editor\", dangerouslySetInnerHTML: { __html: this.props.html}})\n      )\n    )\n  },\n\n  _onBlur:function() {\n    var editor = this.refs.editor.getDOMNode()\n\n    this.props.onBlur({\n      text: editor.textContent,\n      html: editor.innerHTML\n    })\n  }\n\n})\n\nmodule.exports = Editor\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./addons/medium/editor.js\n ** module id = 36\n ** module chunks = 3\n **/","var React = require('react')\n\nvar Previewer = React.createClass({displayName: \"Previewer\",\n\n  render:function() {\n    return (\n      React.createElement(\"div\", {className: \"col-block-content\"}, \n        React.createElement(\"div\", {className: \"col-medium-preview\", dangerouslySetInnerHTML: { __html: this.props.html}})\n      )\n    )\n  }\n\n})\n\nmodule.exports = Previewer\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./addons/medium/previewer.js\n ** module id = 37\n ** module chunks = 3\n **/","/*global module, console, define*/\n\nfunction MediumEditor(elements, options) {\n    'use strict';\n    return this.init(elements, options);\n}\n\nif (typeof module === 'object') {\n    module.exports = MediumEditor;\n}\n// AMD support\nelse if (typeof define === 'function' && define.amd) {\n    define(function () {\n        'use strict';\n        return MediumEditor;\n    });\n}\n\n(function (window, document) {\n    'use strict';\n\n    function extend(b, a) {\n        var prop;\n        if (b === undefined) {\n            return a;\n        }\n        for (prop in a) {\n            if (a.hasOwnProperty(prop) && b.hasOwnProperty(prop) === false) {\n                b[prop] = a[prop];\n            }\n        }\n        return b;\n    }\n\n    function isDescendant(parent, child) {\n         var node = child.parentNode;\n         while (node !== null) {\n             if (node === parent) {\n                 return true;\n             }\n             node = node.parentNode;\n         }\n         return false;\n    }\n\n    // http://stackoverflow.com/questions/5605401/insert-link-in-contenteditable-element\n    // by Tim Down\n    function saveSelection() {\n        var i,\n            len,\n            ranges,\n            sel = this.options.contentWindow.getSelection();\n        if (sel.getRangeAt && sel.rangeCount) {\n            ranges = [];\n            for (i = 0, len = sel.rangeCount; i < len; i += 1) {\n                ranges.push(sel.getRangeAt(i));\n            }\n            return ranges;\n        }\n        return null;\n    }\n\n    function restoreSelection(savedSel) {\n        var i,\n            len,\n            sel = this.options.contentWindow.getSelection();\n        if (savedSel) {\n            sel.removeAllRanges();\n            for (i = 0, len = savedSel.length; i < len; i += 1) {\n                sel.addRange(savedSel[i]);\n            }\n        }\n    }\n\n    // http://stackoverflow.com/questions/1197401/how-can-i-get-the-element-the-caret-is-in-with-javascript-when-using-contentedi\n    // by You\n    function getSelectionStart() {\n        var node = this.options.ownerDocument.getSelection().anchorNode,\n            startNode = (node && node.nodeType === 3 ? node.parentNode : node);\n        return startNode;\n    }\n\n    // http://stackoverflow.com/questions/4176923/html-of-selected-text\n    // by Tim Down\n    function getSelectionHtml() {\n        var i,\n            html = '',\n            sel,\n            len,\n            container;\n        if (this.options.contentWindow.getSelection !== undefined) {\n            sel = this.options.contentWindow.getSelection();\n            if (sel.rangeCount) {\n                container = this.options.ownerDocument.createElement('div');\n                for (i = 0, len = sel.rangeCount; i < len; i += 1) {\n                    container.appendChild(sel.getRangeAt(i).cloneContents());\n                }\n                html = container.innerHTML;\n            }\n        } else if (this.options.ownerDocument.selection !== undefined) {\n            if (this.options.ownerDocument.selection.type === 'Text') {\n                html = this.options.ownerDocument.selection.createRange().htmlText;\n            }\n        }\n        return html;\n    }\n\n    // https://github.com/jashkenas/underscore\n    function isElement(obj) {\n        return !!(obj && obj.nodeType === 1);\n    }\n\n    MediumEditor.prototype = {\n        defaults: {\n            allowMultiParagraphSelection: true,\n            anchorInputPlaceholder: 'Paste or type a link',\n            anchorPreviewHideDelay: 500,\n            buttons: ['bold', 'italic', 'underline', 'anchor', 'header1', 'header2', 'quote'],\n            buttonLabels: false,\n            checkLinkFormat: false,\n            cleanPastedHTML: false,\n            delay: 0,\n            diffLeft: 0,\n            diffTop: -10,\n            disableReturn: false,\n            disableDoubleReturn: false,\n            disableToolbar: false,\n            disableEditing: false,\n            elementsContainer: false,\n            contentWindow: window,\n            ownerDocument: document,\n            firstHeader: 'h3',\n            forcePlainText: true,\n            placeholder: 'Type your text',\n            secondHeader: 'h4',\n            targetBlank: false,\n            anchorTarget: false,\n            anchorButton: false,\n            anchorButtonClass: 'btn',\n            extensions: {},\n            activeButtonClass: 'medium-editor-button-active',\n            firstButtonClass: 'medium-editor-button-first',\n            lastButtonClass: 'medium-editor-button-last'\n        },\n\n        // http://stackoverflow.com/questions/17907445/how-to-detect-ie11#comment30165888_17907562\n        // by rg89\n        isIE: ((navigator.appName === 'Microsoft Internet Explorer') || ((navigator.appName === 'Netscape') && (new RegExp('Trident/.*rv:([0-9]{1,}[.0-9]{0,})').exec(navigator.userAgent) !== null))),\n\n        init: function (elements, options) {\n            this.options = extend(options, this.defaults);\n            this.setElementSelection(elements);\n            if (this.elements.length === 0) {\n                return;\n            }\n            this.parentElements = ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'pre'];\n            if (!this.options.elementsContainer) {\n                this.options.elementsContainer = document.body;\n            }\n            this.id = this.options.elementsContainer.querySelectorAll('.medium-editor-toolbar').length + 1;\n            return this.setup();\n        },\n\n        setup: function () {\n            this.events = [];\n            this.isActive = true;\n            this.initElements()\n                .bindSelect()\n                .bindPaste()\n                .setPlaceholders()\n                .bindWindowActions()\n                .passInstance();\n        },\n\n        on: function(target, event, listener, useCapture) {\n            target.addEventListener(event, listener, useCapture);\n            this.events.push([target, event, listener, useCapture]);\n        },\n\n        off: function(target, event, listener, useCapture) {\n            var index = this.events.indexOf([target, event, listener, useCapture]),\n                e;\n            if(index !== -1) {\n                e = this.events.splice(index, 1);\n                e[0].removeEventListener(e[1], e[2], e[3]);\n            }\n        },\n\n        removeAllEvents: function() {\n            var e = this.events.pop();\n            while(e) {\n                e[0].removeEventListener(e[1], e[2], e[3]);\n                e = this.events.pop();\n            }\n        },\n\n        initElements: function () {\n            this.updateElementList();\n            var i,\n                addToolbar = false;\n            for (i = 0; i < this.elements.length; i += 1) {\n                if (!this.options.disableEditing && !this.elements[i].getAttribute('data-disable-editing')) {\n                    this.elements[i].setAttribute('contentEditable', true);\n                }\n                if (!this.elements[i].getAttribute('data-placeholder')) {\n                    this.elements[i].setAttribute('data-placeholder', this.options.placeholder);\n                }\n                this.elements[i].setAttribute('data-medium-element', true);\n                this.bindParagraphCreation(i).bindReturn(i).bindTab(i);\n                if (!this.options.disableToolbar && !this.elements[i].getAttribute('data-disable-toolbar')) {\n                    addToolbar = true;\n                }\n            }\n            // Init toolbar\n            if (addToolbar) {\n                this.initToolbar()\n                    .bindButtons()\n                    .bindAnchorForm()\n                    .bindAnchorPreview();\n            }\n            return this;\n        },\n\n        setElementSelection: function (selector) {\n            this.elementSelection = selector;\n            this.updateElementList();\n        },\n\n        updateElementList: function () {\n            this.elements = typeof this.elementSelection === 'string' ? this.options.ownerDocument.querySelectorAll(this.elementSelection) : this.elementSelection;\n            if (this.elements.nodeType === 1) {\n                this.elements = [this.elements];\n            }\n        },\n\n        serialize: function () {\n            var i,\n                elementid,\n                content = {};\n            for (i = 0; i < this.elements.length; i += 1) {\n                elementid = (this.elements[i].id !== '') ? this.elements[i].id : 'element-' + i;\n                content[elementid] = {\n                    value: this.elements[i].innerHTML.trim()\n                };\n            }\n            return content;\n        },\n\n        /**\n         * Helper function to call a method with a number of parameters on all registered extensions.\n         * The function assures that the function exists before calling.\n         *\n         * @param {string} funcName name of the function to call\n         * @param [args] arguments passed into funcName\n         */\n        callExtensions: function (funcName) {\n            if (arguments.length < 1) {\n                return;\n            }\n\n            var args = Array.prototype.slice.call(arguments, 1),\n                ext,\n                name;\n\n            for (name in this.options.extensions) {\n                if (this.options.extensions.hasOwnProperty(name)) {\n                    ext = this.options.extensions[name];\n                    if (ext[funcName] !== undefined) {\n                        ext[funcName].apply(ext, args);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Pass current Medium Editor instance to all extensions\n         * if extension constructor has 'parent' attribute set to 'true'\n         *\n         */\n        passInstance: function () {\n            var self = this,\n                ext,\n                name;\n\n            for (name in self.options.extensions) {\n                if (self.options.extensions.hasOwnProperty(name)) {\n                    ext = self.options.extensions[name];\n\n                    if (ext.parent) {\n                        ext.base = self;\n                    }\n                }\n            }\n\n            return self;\n        },\n\n        bindParagraphCreation: function (index) {\n            var self = this;\n            this.on(this.elements[index], 'keypress', function (e) {\n                var node = getSelectionStart.call(self),\n                    tagName;\n                if (e.which === 32) {\n                    tagName = node.tagName.toLowerCase();\n                    if (tagName === 'a') {\n                        document.execCommand('unlink', false, null);\n                    }\n                }\n            });\n\n            this.on(this.elements[index], 'keyup', function (e) {\n                var node = getSelectionStart.call(self),\n                    tagName,\n                    editorElement;\n\n                if (node && node.getAttribute('data-medium-element') && node.children.length === 0 && !(self.options.disableReturn || node.getAttribute('data-disable-return'))) {\n                    document.execCommand('formatBlock', false, 'p');\n                }\n                if (e.which === 13) {\n                    node = getSelectionStart.call(self);\n                    tagName = node.tagName.toLowerCase();\n                    editorElement = self.getSelectionElement();\n\n                    if (!(self.options.disableReturn || editorElement.getAttribute('data-disable-return')) &&\n                        tagName !== 'li' && !self.isListItemChild(node)) {\n                        if (!e.shiftKey) {\n                            document.execCommand('formatBlock', false, 'p');\n                        }\n                        if (tagName === 'a') {\n                            document.execCommand('unlink', false, null);\n                        }\n                    }\n                }\n            });\n            return this;\n        },\n\n        isListItemChild: function (node) {\n            var parentNode = node.parentNode,\n                tagName = parentNode.tagName.toLowerCase();\n            while (this.parentElements.indexOf(tagName) === -1 && tagName !== 'div') {\n                if (tagName === 'li') {\n                    return true;\n                }\n                parentNode = parentNode.parentNode;\n                if (parentNode && parentNode.tagName) {\n                    tagName = parentNode.tagName.toLowerCase();\n                } else {\n                    return false;\n                }\n            }\n            return false;\n        },\n\n        bindReturn: function (index) {\n            var self = this;\n            this.on(this.elements[index], 'keypress', function (e) {\n                if (e.which === 13) {\n                    if (self.options.disableReturn || this.getAttribute('data-disable-return')) {\n                        e.preventDefault();\n                    } else if (self.options.disableDoubleReturn || this.getAttribute('data-disable-double-return')) {\n                        var node = getSelectionStart.call(self);\n                        if (node && node.innerText === '\\n') {\n                            e.preventDefault();\n                        }\n                    }\n                }\n            });\n            return this;\n        },\n\n        bindTab: function (index) {\n            var self = this;\n            this.on(this.elements[index], 'keydown', function (e) {\n                if (e.which === 9) {\n                    // Override tab only for pre nodes\n                    var tag = getSelectionStart.call(self).tagName.toLowerCase();\n                    if (tag === 'pre') {\n                        e.preventDefault();\n                        document.execCommand('insertHtml', null, '    ');\n                    }\n\n                    // Tab to indent list structures!\n                    if (tag === 'li') {\n                        e.preventDefault();\n\n                        // If Shift is down, outdent, otherwise indent\n                        if (e.shiftKey) {\n                            document.execCommand('outdent', e);\n                        } else {\n                            document.execCommand('indent', e);\n                        }\n                    }\n                }\n            });\n            return this;\n        },\n\n        buttonTemplate: function (btnType) {\n            var buttonLabels = this.getButtonLabels(this.options.buttonLabels),\n                buttonTemplates = {\n                    'bold': '<button class=\"medium-editor-action medium-editor-action-bold\" data-action=\"bold\" data-element=\"b\">' + buttonLabels.bold + '</button>',\n                    'italic': '<button class=\"medium-editor-action medium-editor-action-italic\" data-action=\"italic\" data-element=\"i\">' + buttonLabels.italic + '</button>',\n                    'underline': '<button class=\"medium-editor-action medium-editor-action-underline\" data-action=\"underline\" data-element=\"u\">' + buttonLabels.underline + '</button>',\n                    'strikethrough': '<button class=\"medium-editor-action medium-editor-action-strikethrough\" data-action=\"strikethrough\" data-element=\"strike\">' + buttonLabels.strikethrough +'</button>',\n                    'superscript': '<button class=\"medium-editor-action medium-editor-action-superscript\" data-action=\"superscript\" data-element=\"sup\">' + buttonLabels.superscript + '</button>',\n                    'subscript': '<button class=\"medium-editor-action medium-editor-action-subscript\" data-action=\"subscript\" data-element=\"sub\">' + buttonLabels.subscript + '</button>',\n                    'anchor': '<button class=\"medium-editor-action medium-editor-action-anchor\" data-action=\"anchor\" data-element=\"a\">' + buttonLabels.anchor + '</button>',\n                    'image': '<button class=\"medium-editor-action medium-editor-action-image\" data-action=\"image\" data-element=\"img\">' + buttonLabels.image + '</button>',\n                    'header1': '<button class=\"medium-editor-action medium-editor-action-header1\" data-action=\"append-' + this.options.firstHeader + '\" data-element=\"' + this.options.firstHeader + '\">' + buttonLabels.header1 + '</button>',\n                    'header2': '<button class=\"medium-editor-action medium-editor-action-header2\" data-action=\"append-' + this.options.secondHeader + '\" data-element=\"' + this.options.secondHeader + '\">' + buttonLabels.header2 + '</button>',\n                    'quote': '<button class=\"medium-editor-action medium-editor-action-quote\" data-action=\"append-blockquote\" data-element=\"blockquote\">' + buttonLabels.quote + '</button>',\n                    'orderedlist': '<button class=\"medium-editor-action medium-editor-action-orderedlist\" data-action=\"insertorderedlist\" data-element=\"ol\">' + buttonLabels.orderedlist + '</button>',\n                    'unorderedlist': '<button class=\"medium-editor-action medium-editor-action-unorderedlist\" data-action=\"insertunorderedlist\" data-element=\"ul\">' + buttonLabels.unorderedlist + '</button>',\n                    'pre': '<button class=\"medium-editor-action medium-editor-action-pre\" data-action=\"append-pre\" data-element=\"pre\">' + buttonLabels.pre + '</button>',\n                    'indent': '<button class=\"medium-editor-action medium-editor-action-indent\" data-action=\"indent\" data-element=\"ul\">' + buttonLabels.indent + '</button>',\n                    'outdent': '<button class=\"medium-editor-action medium-editor-action-outdent\" data-action=\"outdent\" data-element=\"ul\">' + buttonLabels.outdent + '</button>',\n                    'justifyCenter': '<button class=\"medium-editor-action medium-editor-action-justifyCenter\" data-action=\"justifyCenter\" data-element=\"\">' + buttonLabels.justifyCenter + '</button>',\n                    'justifyFull': '<button class=\"medium-editor-action medium-editor-action-justifyFull\" data-action=\"justifyFull\" data-element=\"\">' + buttonLabels.justifyFull + '</button>',\n                    'justifyLeft': '<button class=\"medium-editor-action medium-editor-action-justifyLeft\" data-action=\"justifyLeft\" data-element=\"\">' + buttonLabels.justifyLeft + '</button>',\n                    'justifyRight': '<button class=\"medium-editor-action medium-editor-action-justifyRight\" data-action=\"justifyRight\" data-element=\"\">' + buttonLabels.justifyRight + '</button>'\n                };\n            return buttonTemplates[btnType] || false;\n        },\n\n        // TODO: break method\n        getButtonLabels: function (buttonLabelType) {\n            var customButtonLabels,\n                attrname,\n                buttonLabels = {\n                    'bold': '<b>B</b>',\n                    'italic': '<b><i>I</i></b>',\n                    'underline': '<b><u>U</u></b>',\n                    'strikethrough': '<s>A</s>',\n                    'superscript': '<b>x<sup>1</sup></b>',\n                    'subscript': '<b>x<sub>1</sub></b>',\n                    'anchor': '<b>#</b>',\n                    'image': '<b>image</b>',\n                    'header1': '<b>H1</b>',\n                    'header2': '<b>H2</b>',\n                    'quote': '<b>&ldquo;</b>',\n                    'orderedlist': '<b>1.</b>',\n                    'unorderedlist': '<b>&bull;</b>',\n                    'pre': '<b>0101</b>',\n                    'indent': '<b>&rarr;</b>',\n                    'outdent': '<b>&larr;</b>',\n                    'justifyCenter': '<b>C</b>',\n                    'justifyFull': '<b>J</b>',\n                    'justifyLeft': '<b>L</b>',\n                    'justifyRight': '<b>R</b>'\n                };\n            if (buttonLabelType === 'fontawesome') {\n                customButtonLabels = {\n                    'bold': '<i class=\"fa fa-bold\"></i>',\n                    'italic': '<i class=\"fa fa-italic\"></i>',\n                    'underline': '<i class=\"fa fa-underline\"></i>',\n                    'strikethrough': '<i class=\"fa fa-strikethrough\"></i>',\n                    'superscript': '<i class=\"fa fa-superscript\"></i>',\n                    'subscript': '<i class=\"fa fa-subscript\"></i>',\n                    'anchor': '<i class=\"fa fa-link\"></i>',\n                    'image': '<i class=\"fa fa-picture-o\"></i>',\n                    'quote': '<i class=\"fa fa-quote-right\"></i>',\n                    'orderedlist': '<i class=\"fa fa-list-ol\"></i>',\n                    'unorderedlist': '<i class=\"fa fa-list-ul\"></i>',\n                    'pre': '<i class=\"fa fa-code fa-lg\"></i>',\n                    'indent': '<i class=\"fa fa-indent\"></i>',\n                    'outdent': '<i class=\"fa fa-outdent\"></i>',\n                    'justifyCenter': '<i class=\"fa fa-align-center\"></i>',\n                    'justifyFull': '<i class=\"fa fa-align-justify\"></i>',\n                    'justifyLeft': '<i class=\"fa fa-align-left\"></i>',\n                    'justifyRight': '<i class=\"fa fa-align-right\"></i>'\n                };\n            } else if (typeof buttonLabelType === 'object') {\n                customButtonLabels = buttonLabelType;\n            }\n            if (typeof customButtonLabels === 'object') {\n                for (attrname in customButtonLabels) {\n                    if (customButtonLabels.hasOwnProperty(attrname)) {\n                        buttonLabels[attrname] = customButtonLabels[attrname];\n                    }\n                }\n            }\n            return buttonLabels;\n        },\n\n        initToolbar: function () {\n            if (this.toolbar) {\n                return this;\n            }\n            this.toolbar = this.createToolbar();\n            this.keepToolbarAlive = false;\n            this.anchorForm = this.toolbar.querySelector('.medium-editor-toolbar-form-anchor');\n            this.anchorInput = this.anchorForm.querySelector('input.medium-editor-toolbar-anchor-input');\n            this.anchorTarget = this.anchorForm.querySelector('input.medium-editor-toolbar-anchor-target');\n            this.anchorButton = this.anchorForm.querySelector('input.medium-editor-toolbar-anchor-button');\n            this.toolbarActions = this.toolbar.querySelector('.medium-editor-toolbar-actions');\n            this.anchorPreview = this.createAnchorPreview();\n\n            return this;\n        },\n\n        createToolbar: function () {\n            var toolbar = document.createElement('div');\n            toolbar.id = 'medium-editor-toolbar-' + this.id;\n            toolbar.className = 'medium-editor-toolbar';\n            toolbar.appendChild(this.toolbarButtons());\n            toolbar.appendChild(this.toolbarFormAnchor());\n            this.options.elementsContainer.appendChild(toolbar);\n            return toolbar;\n        },\n\n        //TODO: actionTemplate\n        toolbarButtons: function () {\n            var btns = this.options.buttons,\n                ul = document.createElement('ul'),\n                li,\n                i,\n                btn,\n                ext;\n\n            ul.id = 'medium-editor-toolbar-actions';\n            ul.className = 'medium-editor-toolbar-actions clearfix';\n\n            for (i = 0; i < btns.length; i += 1) {\n                if (this.options.extensions.hasOwnProperty(btns[i])) {\n                    ext = this.options.extensions[btns[i]];\n                    btn = ext.getButton !== undefined ? ext.getButton() : null;\n                } else {\n                    btn = this.buttonTemplate(btns[i]);\n                }\n\n                if (btn) {\n                    li = document.createElement('li');\n                    if (isElement(btn)) {\n                        li.appendChild(btn);\n                    } else {\n                        li.innerHTML = btn;\n                    }\n                    ul.appendChild(li);\n                }\n            }\n\n            return ul;\n        },\n\n        toolbarFormAnchor: function () {\n            var anchor = document.createElement('div'),\n                input = document.createElement('input'),\n                target_label = document.createElement('label'),\n                target = document.createElement('input'),\n                button_label = document.createElement('label'),\n                button = document.createElement('input'),\n                close = document.createElement('a'),\n                save = document.createElement('a');\n\n            close.setAttribute('href', '#');\n            close.className = 'medium-editor-toobar-anchor-close';\n            close.innerHTML = '&times;';\n\n            save.setAttribute('href', '#');\n            save.className = 'medium-editor-toobar-anchor-save';\n            save.innerHTML = '&#10003;';\n\n            input.setAttribute('type', 'text');\n            input.className = 'medium-editor-toolbar-anchor-input';\n            input.setAttribute('placeholder', this.options.anchorInputPlaceholder);\n\n\n            target.setAttribute('type', 'checkbox');\n            target.className = 'medium-editor-toolbar-anchor-target';\n            target_label.innerHTML = \"Open in New Window?\";\n            target_label.insertBefore(target, target_label.firstChild);\n\n            button.setAttribute('type', 'checkbox');\n            button.className = 'medium-editor-toolbar-anchor-button';\n            button_label.innerHTML = \"Button\";\n            button_label.insertBefore(button, button_label.firstChild);\n\n\n            anchor.className = 'medium-editor-toolbar-form-anchor';\n            anchor.id = 'medium-editor-toolbar-form-anchor';\n            anchor.appendChild(input);\n\n            anchor.appendChild(save);\n            anchor.appendChild(close);\n\n            if (this.options.anchorTarget) {\n                anchor.appendChild(target_label);\n            }\n\n            if (this.options.anchorButton) {\n                anchor.appendChild(button_label);\n            }\n\n            return anchor;\n        },\n\n        bindSelect: function () {\n            var self = this,\n                timer = '',\n                i;\n\n            this.checkSelectionWrapper = function (e) {\n\n                // Do not close the toolbar when bluring the editable area and clicking into the anchor form\n                if (e && self.clickingIntoArchorForm(e)) {\n                    return false;\n                }\n\n                clearTimeout(timer);\n                timer = setTimeout(function () {\n                    self.checkSelection();\n                }, self.options.delay);\n            };\n\n            this.on(document.documentElement, 'mouseup', this.checkSelectionWrapper);\n\n            for (i = 0; i < this.elements.length; i += 1) {\n                this.on(this.elements[i], 'keyup', this.checkSelectionWrapper);\n                this.on(this.elements[i], 'blur', this.checkSelectionWrapper);\n            }\n            return this;\n        },\n\n        checkSelection: function () {\n            var newSelection,\n                selectionElement;\n\n            if (this.keepToolbarAlive !== true && !this.options.disableToolbar) {\n\n                newSelection = this.options.contentWindow.getSelection();\n                if (newSelection.toString().trim() === '' ||\n                    (this.options.allowMultiParagraphSelection === false && this.hasMultiParagraphs()) ||\n                    this.selectionInContentEditableFalse()) {\n                    this.hideToolbarActions();\n                } else {\n                    selectionElement = this.getSelectionElement();\n                    if (!selectionElement || selectionElement.getAttribute('data-disable-toolbar')) {\n                        this.hideToolbarActions();\n                    } else {\n                        this.checkSelectionElement(newSelection, selectionElement);\n                    }\n                }\n            }\n            return this;\n        },\n\n        clickingIntoArchorForm: function (e) {\n            var self = this;\n\n            if (e.type && e.type.toLowerCase() === 'blur' && e.relatedTarget && e.relatedTarget === self.anchorInput) {\n                return true;\n            }\n\n            return false;\n        },\n\n        hasMultiParagraphs: function () {\n            var selectionHtml = getSelectionHtml.call(this).replace(/<[\\S]+><\\/[\\S]+>/gim, ''),\n                hasMultiParagraphs = selectionHtml.match(/<(p|h[0-6]|blockquote)>([\\s\\S]*?)<\\/(p|h[0-6]|blockquote)>/g);\n\n            return (hasMultiParagraphs ? hasMultiParagraphs.length : 0);\n        },\n\n        checkSelectionElement: function (newSelection, selectionElement) {\n            var i;\n            this.selection = newSelection;\n            this.selectionRange = this.selection.getRangeAt(0);\n            for (i = 0; i < this.elements.length; i += 1) {\n                if (this.elements[i] === selectionElement) {\n                    this.setToolbarButtonStates()\n                        .setToolbarPosition()\n                        .showToolbarActions();\n                    return;\n                }\n            }\n            this.hideToolbarActions();\n        },\n\n        findMatchingSelectionParent: function(testElementFunction) {\n            var selection = this.options.contentWindow.getSelection(), range, current;\n\n            if (selection.rangeCount === 0) {\n                return false;\n            }\n\n            range = selection.getRangeAt(0);\n            current = range.commonAncestorContainer;\n\n            do {\n              if (current.nodeType === 1){\n                if ( testElementFunction(current) )\n                {\n                    return current;\n                }\n                // do not traverse upwards past the nearest containing editor\n                if (current.getAttribute('data-medium-element')) {\n                    return false;\n                }\n              }\n\n              current = current.parentNode;\n            } while (current);\n\n            return false;\n        },\n\n        getSelectionElement: function () {\n            return this.findMatchingSelectionParent(function(el) {\n                return el.getAttribute('data-medium-element');\n            });\n        },\n\n        selectionInContentEditableFalse: function () {\n            return this.findMatchingSelectionParent(function(el) {\n                return (el && el.nodeName !== '#text' && el.getAttribute('contenteditable') === 'false');\n            });\n        },\n\n        setToolbarPosition: function () {\n            var buttonHeight = 50,\n                selection = this.options.contentWindow.getSelection(),\n                range = selection.getRangeAt(0),\n                boundary = range.getBoundingClientRect(),\n                defaultLeft = (this.options.diffLeft) - (this.toolbar.offsetWidth / 2),\n                middleBoundary = (boundary.left + boundary.right) / 2,\n                halfOffsetWidth = this.toolbar.offsetWidth / 2;\n            if (boundary.top < buttonHeight) {\n                this.toolbar.classList.add('medium-toolbar-arrow-over');\n                this.toolbar.classList.remove('medium-toolbar-arrow-under');\n                this.toolbar.style.top = buttonHeight + boundary.bottom - this.options.diffTop + this.options.contentWindow.pageYOffset - this.toolbar.offsetHeight + 'px';\n            } else {\n                this.toolbar.classList.add('medium-toolbar-arrow-under');\n                this.toolbar.classList.remove('medium-toolbar-arrow-over');\n                this.toolbar.style.top = boundary.top + this.options.diffTop + this.options.contentWindow.pageYOffset - this.toolbar.offsetHeight + 'px';\n            }\n            if (middleBoundary < halfOffsetWidth) {\n                this.toolbar.style.left = defaultLeft + halfOffsetWidth + 'px';\n            } else if ((this.options.contentWindow.innerWidth - middleBoundary) < halfOffsetWidth) {\n                this.toolbar.style.left = this.options.contentWindow.innerWidth + defaultLeft - halfOffsetWidth + 'px';\n            } else {\n                this.toolbar.style.left = defaultLeft + middleBoundary + 'px';\n            }\n\n            this.hideAnchorPreview();\n\n            return this;\n        },\n\n        setToolbarButtonStates: function () {\n            var buttons = this.toolbarActions.querySelectorAll('button'),\n                i;\n            for (i = 0; i < buttons.length; i += 1) {\n                buttons[i].classList.remove(this.options.activeButtonClass);\n            }\n            this.checkActiveButtons();\n            return this;\n        },\n\n        checkActiveButtons: function () {\n            var elements = Array.prototype.slice.call(this.elements),\n                parentNode = this.getSelectedParentElement();\n            while (parentNode.tagName !== undefined && this.parentElements.indexOf(parentNode.tagName.toLowerCase) === -1) {\n                this.activateButton(parentNode.tagName.toLowerCase());\n                this.callExtensions('checkState', parentNode);\n\n                // we can abort the search upwards if we leave the contentEditable element\n                if (elements.indexOf(parentNode) !== -1) {\n                    break;\n                }\n                parentNode = parentNode.parentNode;\n            }\n        },\n\n        activateButton: function (tag) {\n            var el = this.toolbar.querySelector('[data-element=\"' + tag + '\"]');\n            if (el !== null && el.className.indexOf(this.options.activeButtonClass) === -1) {\n                el.className += ' ' + this.options.activeButtonClass;\n            }\n        },\n\n        bindButtons: function () {\n            var buttons = this.toolbar.querySelectorAll('button'),\n                i,\n                self = this,\n                triggerAction = function (e) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if (self.selection === undefined) {\n                        self.checkSelection();\n                    }\n                    if (this.className.indexOf(self.options.activeButtonClass) > -1) {\n                        this.classList.remove(self.options.activeButtonClass);\n                    } else {\n                        this.className += ' ' + self.options.activeButtonClass;\n                    }\n                    if (this.hasAttribute('data-action')) {\n                        self.execAction(this.getAttribute('data-action'), e);\n                    }\n                };\n            for (i = 0; i < buttons.length; i += 1) {\n                this.on(buttons[i], 'click', triggerAction);\n            }\n            this.setFirstAndLastItems(buttons);\n            return this;\n        },\n\n        setFirstAndLastItems: function (buttons) {\n            if (buttons.length > 0) {\n                buttons[0].className += ' ' + this.options.firstButtonClass;\n                buttons[buttons.length - 1].className += ' ' + this.options.lastButtonClass;\n            }\n            return this;\n        },\n\n        execAction: function (action, e) {\n            if (action.indexOf('append-') > -1) {\n                this.execFormatBlock(action.replace('append-', ''));\n                this.setToolbarPosition();\n                this.setToolbarButtonStates();\n            } else if (action === 'anchor') {\n                this.triggerAnchorAction(e);\n            } else if (action === 'image') {\n                this.options.ownerDocument.execCommand('insertImage', false, this.options.contentWindow.getSelection());\n            } else {\n                this.options.ownerDocument.execCommand(action, false, null);\n                this.setToolbarPosition();\n            }\n        },\n\n        // http://stackoverflow.com/questions/15867542/range-object-get-selection-parent-node-chrome-vs-firefox\n        rangeSelectsSingleNode: function (range) {\n            var startNode = range.startContainer;\n            return startNode === range.endContainer &&\n                startNode.hasChildNodes() &&\n                range.endOffset === range.startOffset + 1;\n        },\n\n        getSelectedParentElement: function () {\n            var selectedParentElement = null,\n                range = this.selectionRange;\n            if (this.rangeSelectsSingleNode(range)) {\n                selectedParentElement = range.startContainer.childNodes[range.startOffset];\n            } else if (range.startContainer.nodeType === 3) {\n                selectedParentElement = range.startContainer.parentNode;\n            } else {\n                selectedParentElement = range.startContainer;\n            }\n            return selectedParentElement;\n        },\n\n        triggerAnchorAction: function () {\n            var selectedParentElement = this.getSelectedParentElement();\n            if (selectedParentElement.tagName &&\n                    selectedParentElement.tagName.toLowerCase() === 'a') {\n                this.options.ownerDocument.execCommand('unlink', false, null);\n            } else {\n                if (this.anchorForm.style.display === 'block') {\n                    this.showToolbarActions();\n                } else {\n                    this.showAnchorForm();\n                }\n            }\n            return this;\n        },\n\n        execFormatBlock: function (el) {\n            var selectionData = this.getSelectionData(this.selection.anchorNode);\n            // FF handles blockquote differently on formatBlock\n            // allowing nesting, we need to use outdent\n            // https://developer.mozilla.org/en-US/docs/Rich-Text_Editing_in_Mozilla\n            if (el === 'blockquote' && selectionData.el &&\n                selectionData.el.parentNode.tagName.toLowerCase() === 'blockquote') {\n                return this.options.ownerDocument.execCommand('outdent', false, null);\n            }\n            if (selectionData.tagName === el) {\n                el = 'p';\n            }\n            // When IE we need to add <> to heading elements and\n            //  blockquote needs to be called as indent\n            // http://stackoverflow.com/questions/10741831/execcommand-formatblock-headings-in-ie\n            // http://stackoverflow.com/questions/1816223/rich-text-editor-with-blockquote-function/1821777#1821777\n            if (this.isIE) {\n                if (el === 'blockquote') {\n                    return this.options.ownerDocument.execCommand('indent', false, el);\n                }\n                el = '<' + el + '>';\n            }\n            return this.options.ownerDocument.execCommand('formatBlock', false, el);\n        },\n\n        getSelectionData: function (el) {\n            var tagName;\n\n            if (el && el.tagName) {\n                tagName = el.tagName.toLowerCase();\n            }\n\n            while (el && this.parentElements.indexOf(tagName) === -1) {\n                el = el.parentNode;\n                if (el && el.tagName) {\n                    tagName = el.tagName.toLowerCase();\n                }\n            }\n\n            return {\n                el: el,\n                tagName: tagName\n            };\n        },\n\n        getFirstChild: function (el) {\n            var firstChild = el.firstChild;\n            while (firstChild !== null && firstChild.nodeType !== 1) {\n                firstChild = firstChild.nextSibling;\n            }\n            return firstChild;\n        },\n\n        hideToolbarActions: function () {\n            this.keepToolbarAlive = false;\n            if (this.toolbar !== undefined) {\n                this.toolbar.classList.remove('medium-editor-toolbar-active');\n            }\n        },\n\n        showToolbarActions: function () {\n            var self = this,\n                timer;\n            this.anchorForm.style.display = 'none';\n            this.toolbarActions.style.display = 'block';\n            this.keepToolbarAlive = false;\n            clearTimeout(timer);\n            timer = setTimeout(function () {\n                if (self.toolbar && !self.toolbar.classList.contains('medium-editor-toolbar-active')) {\n                    self.toolbar.classList.add('medium-editor-toolbar-active');\n                }\n            }, 100);\n        },\n\n        saveSelection: function() {\n            this.savedSelection = saveSelection.call(this);\n        },\n\n        restoreSelection: function() {\n            restoreSelection.call(this, this.savedSelection);\n        },\n\n        showAnchorForm: function (link_value) {\n            this.toolbarActions.style.display = 'none';\n            this.saveSelection();\n            this.anchorForm.style.display = 'block';\n            this.setToolbarPosition();\n            this.keepToolbarAlive = true;\n            this.anchorInput.focus();\n            this.anchorInput.value = link_value || '';\n        },\n\n        bindAnchorForm: function () {\n            var linkCancel = this.anchorForm.querySelector('a.medium-editor-toobar-anchor-close'),\n                linkSave = this.anchorForm.querySelector('a.medium-editor-toobar-anchor-save'),\n                self = this;\n\n            this.on(this.anchorForm, 'click', function (e) {\n                e.stopPropagation();\n                self.keepToolbarAlive = true;\n            });\n\n            this.on(this.anchorInput, 'keyup', function (e) {\n                var button = null,\n                    target;\n\n                if (e.keyCode === 13) {\n                    e.preventDefault();\n                    if (self.options.anchorTarget && self.anchorTarget.checked) {\n                        target = \"_blank\";\n                    }\n                    else {\n                        target = \"_self\";\n                    }\n\n                    if (self.options.anchorButton && self.anchorButton.checked) {\n                        button = self.options.anchorButtonClass;\n                    }\n\n                    self.createLink(this, target, button);\n                }\n            });\n\n            this.on(linkSave, 'click', function(e) {\n                var button = null,\n                    target;\n                e.preventDefault();\n                if ( self.options.anchorTarget && self.anchorTarget.checked) {\n                    target = \"_blank\";\n                }\n                else {\n                    target = \"_self\";\n                }\n\n                if (self.options.anchorButton && self.anchorButton.checked) {\n                    button = self.options.anchorButtonClass;\n                }\n\n                self.createLink(self.anchorInput, target, button);\n            }, true);\n\n            this.on(this.anchorInput, 'click', function (e) {\n                // make sure not to hide form when cliking into the input\n                e.stopPropagation();\n                self.keepToolbarAlive = true;\n            });\n\n            // Hide the anchor form when focusing outside of it.\n            this.on(this.options.ownerDocument.body, 'click', function (e) {\n                if (e.target !== self.anchorForm && !isDescendant(self.anchorForm, e.target) && !isDescendant(self.toolbarActions, e.target)) {\n                    self.keepToolbarAlive = false;\n                    self.checkSelection();\n                }\n            }, true);\n            this.on(this.options.ownerDocument.body, 'focus', function (e) {\n                if (e.target !== self.anchorForm && !isDescendant(self.anchorForm, e.target) && !isDescendant(self.toolbarActions, e.target)) {\n                    self.keepToolbarAlive = false;\n                    self.checkSelection();\n                }\n            }, true);\n\n            this.on(linkCancel, 'click', function (e) {\n                e.preventDefault();\n                self.showToolbarActions();\n                restoreSelection.call(self, self.savedSelection);\n            });\n            return this;\n        },\n\n\n        hideAnchorPreview: function () {\n            this.anchorPreview.classList.remove('medium-editor-anchor-preview-active');\n        },\n\n        // TODO: break method\n        showAnchorPreview: function (anchorEl) {\n            if (this.anchorPreview.classList.contains('medium-editor-anchor-preview-active')\n                || anchorEl.getAttribute('data-disable-preview')) {\n                return true;\n            }\n\n            var self = this,\n                buttonHeight = 40,\n                boundary = anchorEl.getBoundingClientRect(),\n                middleBoundary = (boundary.left + boundary.right) / 2,\n                halfOffsetWidth,\n                defaultLeft,\n                timer;\n\n            self.anchorPreview.querySelector('i').textContent = anchorEl.href;\n            halfOffsetWidth = self.anchorPreview.offsetWidth / 2;\n            defaultLeft = self.options.diffLeft - halfOffsetWidth;\n\n            clearTimeout(timer);\n            timer = setTimeout(function () {\n                if (self.anchorPreview && !self.anchorPreview.classList.contains('medium-editor-anchor-preview-active')) {\n                    self.anchorPreview.classList.add('medium-editor-anchor-preview-active');\n                }\n            }, 100);\n\n            self.observeAnchorPreview(anchorEl);\n\n            self.anchorPreview.classList.add('medium-toolbar-arrow-over');\n            self.anchorPreview.classList.remove('medium-toolbar-arrow-under');\n            self.anchorPreview.style.top = Math.round(buttonHeight + boundary.bottom - self.options.diffTop + this.options.contentWindow.pageYOffset - self.anchorPreview.offsetHeight) + 'px';\n            if (middleBoundary < halfOffsetWidth) {\n                self.anchorPreview.style.left = defaultLeft + halfOffsetWidth + 'px';\n            } else if ((this.options.contentWindow.innerWidth - middleBoundary) < halfOffsetWidth) {\n                self.anchorPreview.style.left = this.options.contentWindow.innerWidth + defaultLeft - halfOffsetWidth + 'px';\n            } else {\n                self.anchorPreview.style.left = defaultLeft + middleBoundary + 'px';\n            }\n\n            return this;\n        },\n\n        // TODO: break method\n        observeAnchorPreview: function (anchorEl) {\n            var self = this,\n                lastOver = (new Date()).getTime(),\n                over = true,\n                stamp = function () {\n                    lastOver = (new Date()).getTime();\n                    over = true;\n                },\n                unstamp = function (e) {\n                    if (!e.relatedTarget || !/anchor-preview/.test(e.relatedTarget.className)) {\n                        over = false;\n                    }\n                },\n                interval_timer = setInterval(function () {\n                    if (over) {\n                        return true;\n                    }\n                    var durr = (new Date()).getTime() - lastOver;\n                    if (durr > self.options.anchorPreviewHideDelay) {\n                        // hide the preview 1/2 second after mouse leaves the link\n                        self.hideAnchorPreview();\n\n                        // cleanup\n                        clearInterval(interval_timer);\n                        self.off(self.anchorPreview, 'mouseover', stamp);\n                        self.off(self.anchorPreview, 'mouseout', unstamp);\n                        self.off(anchorEl, 'mouseover', stamp);\n                        self.off(anchorEl, 'mouseout', unstamp);\n\n                    }\n                }, 200);\n\n            this.on(self.anchorPreview, 'mouseover', stamp);\n            this.on(self.anchorPreview, 'mouseout', unstamp);\n            this.on(anchorEl, 'mouseover', stamp);\n            this.on(anchorEl, 'mouseout', unstamp);\n        },\n\n        createAnchorPreview: function () {\n            var self = this,\n                anchorPreview = this.options.ownerDocument.createElement('div');\n\n            anchorPreview.id = 'medium-editor-anchor-preview-' + this.id;\n            anchorPreview.className = 'medium-editor-anchor-preview';\n            anchorPreview.innerHTML = this.anchorPreviewTemplate();\n            this.options.elementsContainer.appendChild(anchorPreview);\n\n            this.on(anchorPreview, 'click', function () {\n                self.anchorPreviewClickHandler();\n            });\n\n            return anchorPreview;\n        },\n\n        anchorPreviewTemplate: function () {\n            return '<div class=\"medium-editor-toolbar-anchor-preview\" id=\"medium-editor-toolbar-anchor-preview\">' +\n                '    <i class=\"medium-editor-toolbar-anchor-preview-inner\"></i>' +\n                '</div>';\n        },\n\n        anchorPreviewClickHandler: function (e) {\n            if (this.activeAnchor) {\n\n                var self = this,\n                    range = this.options.ownerDocument.createRange(),\n                    sel = this.options.contentWindow.getSelection();\n\n                range.selectNodeContents(self.activeAnchor);\n                sel.removeAllRanges();\n                sel.addRange(range);\n                setTimeout(function () {\n                    if (self.activeAnchor) {\n                        self.showAnchorForm(self.activeAnchor.href);\n                    }\n                    self.keepToolbarAlive = false;\n                }, 100 + self.options.delay);\n\n            }\n\n            this.hideAnchorPreview();\n        },\n\n        editorAnchorObserver: function (e) {\n            var self = this,\n                overAnchor = true,\n                leaveAnchor = function () {\n                    // mark the anchor as no longer hovered, and stop listening\n                    overAnchor = false;\n                    self.off(self.activeAnchor, 'mouseout', leaveAnchor);\n                };\n\n            if (e.target && e.target.tagName.toLowerCase() === 'a') {\n\n                // Detect empty href attributes\n                // The browser will make href=\"\" or href=\"#top\"\n                // into absolute urls when accessed as e.targed.href, so check the html\n                if (!/href=[\"']\\S+[\"']/.test(e.target.outerHTML) || /href=[\"']#\\S+[\"']/.test(e.target.outerHTML)) {\n                    return true;\n                }\n\n                // only show when hovering on anchors\n                if (this.toolbar.classList.contains('medium-editor-toolbar-active')) {\n                    // only show when toolbar is not present\n                    return true;\n                }\n                this.activeAnchor = e.target;\n                this.on(this.activeAnchor, 'mouseout', leaveAnchor);\n                // show the anchor preview according to the configured delay\n                // if the mouse has not left the anchor tag in that time\n                setTimeout(function () {\n                    if (overAnchor) {\n                        self.showAnchorPreview(e.target);\n                    }\n                }, self.options.delay);\n\n\n            }\n        },\n\n        bindAnchorPreview: function (index) {\n            var i, self = this;\n            this.editorAnchorObserverWrapper = function (e) {\n                self.editorAnchorObserver(e);\n            };\n            for (i = 0; i < this.elements.length; i += 1) {\n                this.on(this.elements[i], 'mouseover', this.editorAnchorObserverWrapper);\n            }\n            return this;\n        },\n\n        checkLinkFormat: function (value) {\n            var re = /^(https?|ftps?|rtmpt?):\\/\\/|mailto:/;\n            return (re.test(value) ? '' : 'http://') + value;\n        },\n\n        setTargetBlank: function (el) {\n            var i;\n            el = el || getSelectionStart.call(this);\n            if (el.tagName.toLowerCase() === 'a') {\n                el.target = '_blank';\n            } else {\n                el = el.getElementsByTagName('a');\n\n                for (i = 0; i < el.length; i += 1) {\n                    el[i].target = '_blank';\n                }\n            }\n        },\n\n        setButtonClass: function (buttonClass) {\n            var el = getSelectionStart.call(this),\n                classes = buttonClass.split(' '),\n                i, j;\n            if (el.tagName.toLowerCase() === 'a') {\n                for (j = 0; j < classes.length; j += 1) {\n                    el.classList.add(classes[j]);\n                }\n            } else {\n                el = el.getElementsByTagName('a');\n                for (i = 0; i < el.length; i += 1) {\n                    for (j = 0; j < classes.length; j += 1) {\n                        el[i].classList.add(classes[j]);\n                    }\n                }\n            }\n        },\n\n        createLink: function (input, target, buttonClass) {\n            var i, event;\n\n            if (input.value.trim().length === 0) {\n                this.hideToolbarActions();\n                return;\n            }\n\n            restoreSelection.call(this, this.savedSelection);\n\n            if (this.options.checkLinkFormat) {\n                input.value = this.checkLinkFormat(input.value);\n            }\n\n            this.options.ownerDocument.execCommand('createLink', false, input.value);\n\n            if (this.options.targetBlank || target === \"_blank\") {\n                this.setTargetBlank();\n            }\n\n            if (buttonClass) {\n                this.setButtonClass(buttonClass);\n            }\n\n            if (this.options.targetBlank || target === \"_blank\" || buttonClass) {\n                event = this.options.ownerDocument.createEvent(\"HTMLEvents\");\n                event.initEvent(\"input\", true, true, this.options.contentWindow);\n                for (i = 0; i < this.elements.length; i += 1) {\n                    this.elements[i].dispatchEvent(event);\n                }\n            }\n\n            this.checkSelection();\n            this.showToolbarActions();\n            input.value = '';\n        },\n\n        bindWindowActions: function () {\n            var timerResize,\n                self = this;\n            this.windowResizeHandler = function () {\n                clearTimeout(timerResize);\n                timerResize = setTimeout(function () {\n                    if (self.toolbar && self.toolbar.classList.contains('medium-editor-toolbar-active')) {\n                        self.setToolbarPosition();\n                    }\n                }, 100);\n            };\n            this.on(this.options.contentWindow, 'resize', this.windowResizeHandler);\n            return this;\n        },\n\n        activate: function () {\n            if (this.isActive) {\n                return;\n            }\n\n            this.setup();\n        },\n\n        // TODO: break method\n        deactivate: function () {\n            var i;\n            if (!this.isActive) {\n                return;\n            }\n            this.isActive = false;\n\n            if (this.toolbar !== undefined) {\n                this.options.elementsContainer.removeChild(this.anchorPreview);\n                this.options.elementsContainer.removeChild(this.toolbar);\n                delete this.toolbar;\n                delete this.anchorPreview;\n            }\n\n            for (i = 0; i < this.elements.length; i += 1) {\n                this.elements[i].removeAttribute('contentEditable');\n                this.elements[i].removeAttribute('data-medium-element');\n            }\n\n            this.removeAllEvents();\n        },\n\n        htmlEntities: function (str) {\n            // converts special characters (like <) into their escaped/encoded values (like &lt;).\n            // This allows you to show to display the string without the browser reading it as HTML.\n            return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n        },\n\n        bindPaste: function () {\n            var i, self = this;\n            this.pasteWrapper = function (e) {\n                var paragraphs,\n                    html = '',\n                    p;\n\n                this.classList.remove('medium-editor-placeholder');\n                if (!self.options.forcePlainText && !self.options.cleanPastedHTML) {\n                    return this;\n                }\n\n                if (e.clipboardData && e.clipboardData.getData && !e.defaultPrevented) {\n                    e.preventDefault();\n\n                    if (self.options.cleanPastedHTML && e.clipboardData.getData('text/html')) {\n                        return self.cleanPaste(e.clipboardData.getData('text/html'));\n                    }\n                    if (!(self.options.disableReturn || this.getAttribute('data-disable-return'))) {\n                        paragraphs = e.clipboardData.getData('text/plain').split(/[\\r\\n]/g);\n                        for (p = 0; p < paragraphs.length; p += 1) {\n                            if (paragraphs[p] !== '') {\n                                if (navigator.userAgent.match(/firefox/i) && p === 0) {\n                                    html += self.htmlEntities(paragraphs[p]);\n                                } else {\n                                    html += '<p>' + self.htmlEntities(paragraphs[p]) + '</p>';\n                                }\n                            }\n                        }\n                        self.options.ownerDocument.execCommand('insertHTML', false, html);\n                    } else {\n                        html = self.htmlEntities(e.clipboardData.getData('text/plain'));\n                        self.options.ownerDocument.execCommand('insertHTML', false, html);\n                    }\n                }\n            };\n            for (i = 0; i < this.elements.length; i += 1) {\n                this.on(this.elements[i], 'paste', this.pasteWrapper);\n            }\n            return this;\n        },\n\n        setPlaceholders: function () {\n            var i,\n                activatePlaceholder = function (el) {\n                    if (!(el.querySelector('img')) &&\n                            !(el.querySelector('blockquote')) &&\n                            el.textContent.replace(/^\\s+|\\s+$/g, '') === '') {\n                        el.classList.add('medium-editor-placeholder');\n                    }\n                },\n                placeholderWrapper = function (e) {\n                    this.classList.remove('medium-editor-placeholder');\n                    if (e.type !== 'keypress') {\n                        activatePlaceholder(this);\n                    }\n                };\n            for (i = 0; i < this.elements.length; i += 1) {\n                activatePlaceholder(this.elements[i]);\n                this.on(this.elements[i], 'blur', placeholderWrapper);\n                this.on(this.elements[i], 'keypress', placeholderWrapper);\n            }\n            return this;\n        },\n\n        cleanPaste: function (text) {\n\n            /*jslint regexp: true*/\n            /*\n                jslint does not allow character negation, because the negation\n                will not match any unicode characters. In the regexes in this\n                block, negation is used specifically to match the end of an html\n                tag, and in fact unicode characters *should* be allowed.\n            */\n            var i, elList, workEl,\n                el = this.getSelectionElement(),\n                multiline = /<p|<br|<div/.test(text),\n                replacements = [\n\n                    // replace two bogus tags that begin pastes from google docs\n                    [new RegExp(/<[^>]*docs-internal-guid[^>]*>/gi), \"\"],\n                    [new RegExp(/<\\/b>(<br[^>]*>)?$/gi), \"\"],\n\n                     // un-html spaces and newlines inserted by OS X\n                    [new RegExp(/<span class=\"Apple-converted-space\">\\s+<\\/span>/g), ' '],\n                    [new RegExp(/<br class=\"Apple-interchange-newline\">/g), '<br>'],\n\n                    // replace google docs italics+bold with a span to be replaced once the html is inserted\n                    [new RegExp(/<span[^>]*(font-style:italic;font-weight:bold|font-weight:bold;font-style:italic)[^>]*>/gi), '<span class=\"replace-with italic bold\">'],\n\n                    // replace google docs italics with a span to be replaced once the html is inserted\n                    [new RegExp(/<span[^>]*font-style:italic[^>]*>/gi), '<span class=\"replace-with italic\">'],\n\n                    //[replace google docs bolds with a span to be replaced once the html is inserted\n                    [new RegExp(/<span[^>]*font-weight:bold[^>]*>/gi), '<span class=\"replace-with bold\">'],\n\n                     // replace manually entered b/i/a tags with real ones\n                    [new RegExp(/&lt;(\\/?)(i|b|a)&gt;/gi), '<$1$2>'],\n\n                     // replace manually a tags with real ones, converting smart-quotes from google docs\n                    [new RegExp(/&lt;a\\s+href=(&quot;|&rdquo;|&ldquo;|“|”)([^&]+)(&quot;|&rdquo;|&ldquo;|“|”)&gt;/gi), '<a href=\"$2\">']\n\n                ];\n            /*jslint regexp: false*/\n\n            for (i = 0; i < replacements.length; i += 1) {\n                text = text.replace(replacements[i][0], replacements[i][1]);\n            }\n\n            if (multiline) {\n\n                // double br's aren't converted to p tags, but we want paragraphs.\n                elList = text.split('<br><br>');\n\n                this.pasteHTML('<p>' + elList.join('</p><p>') + '</p>');\n                this.options.ownerDocument.execCommand('insertText', false, \"\\n\");\n\n                // block element cleanup\n                elList = el.querySelectorAll('a,p,div,br');\n                for (i = 0; i < elList.length; i += 1) {\n\n                    workEl = elList[i];\n\n                    switch (workEl.tagName.toLowerCase()) {\n                    case 'a':\n                        if (this.options.targetBlank){\n                          this.setTargetBlank(workEl);\n                        }\n                        break;\n                    case 'p':\n                    case 'div':\n                        this.filterCommonBlocks(workEl);\n                        break;\n                    case 'br':\n                        this.filterLineBreak(workEl);\n                        break;\n                    }\n\n                }\n\n\n            } else {\n\n                this.pasteHTML(text);\n\n            }\n\n        },\n\n        pasteHTML: function (html) {\n            var elList, workEl, i, fragmentBody, pasteBlock = this.options.ownerDocument.createDocumentFragment();\n\n            pasteBlock.appendChild(this.options.ownerDocument.createElement('body'));\n\n            fragmentBody = pasteBlock.querySelector('body');\n            fragmentBody.innerHTML = html;\n\n            this.cleanupSpans(fragmentBody);\n\n            elList = fragmentBody.querySelectorAll('*');\n            for (i = 0; i < elList.length; i += 1) {\n\n                workEl = elList[i];\n\n                // delete ugly attributes\n                workEl.removeAttribute('class');\n                workEl.removeAttribute('style');\n                workEl.removeAttribute('dir');\n\n                if (workEl.tagName.toLowerCase() === 'meta') {\n                    workEl.parentNode.removeChild(workEl);\n                }\n\n            }\n            this.options.ownerDocument.execCommand('insertHTML', false, fragmentBody.innerHTML.replace(/&nbsp;/g, ' '));\n        },\n        isCommonBlock: function (el) {\n            return (el && (el.tagName.toLowerCase() === 'p' || el.tagName.toLowerCase() === 'div'));\n        },\n        filterCommonBlocks: function (el) {\n            if (/^\\s*$/.test(el.innerText)) {\n                el.parentNode.removeChild(el);\n            }\n        },\n        filterLineBreak: function (el) {\n            if (this.isCommonBlock(el.previousElementSibling)) {\n\n                // remove stray br's following common block elements\n                el.parentNode.removeChild(el);\n\n            } else if (this.isCommonBlock(el.parentNode) && (el.parentNode.firstChild === el || el.parentNode.lastChild === el)) {\n\n                // remove br's just inside open or close tags of a div/p\n                el.parentNode.removeChild(el);\n\n            } else if (el.parentNode.childElementCount === 1) {\n\n                // and br's that are the only child of a div/p\n                this.removeWithParent(el);\n\n            }\n\n        },\n\n        // remove an element, including its parent, if it is the only element within its parent\n        removeWithParent: function (el) {\n            if (el && el.parentNode) {\n                if (el.parentNode.parentNode && el.parentNode.childElementCount === 1) {\n                    el.parentNode.parentNode.removeChild(el.parentNode);\n                } else {\n                    el.parentNode.removeChild(el.parentNode);\n                }\n            }\n        },\n\n        cleanupSpans: function (container_el) {\n\n            var i,\n                el,\n                new_el,\n                spans = container_el.querySelectorAll('.replace-with');\n\n            for (i = 0; i < spans.length; i += 1) {\n\n                el = spans[i];\n                new_el = this.options.ownerDocument.createElement(el.classList.contains('bold') ? 'b' : 'i');\n\n                if (el.classList.contains('bold') && el.classList.contains('italic')) {\n\n                    // add an i tag as well if this has both italics and bold\n                    new_el.innerHTML = '<i>' + el.innerHTML + '</i>';\n\n                } else {\n\n                    new_el.innerHTML = el.innerHTML;\n\n                }\n                el.parentNode.replaceChild(new_el, el);\n\n            }\n\n            spans = container_el.querySelectorAll('span');\n            for (i = 0; i < spans.length; i += 1) {\n\n                el = spans[i];\n\n                // remove empty spans, replace others with their contents\n                if (/^\\s*$/.test()) {\n                    el.parentNode.removeChild(el);\n                } else {\n                    el.parentNode.replaceChild(this.options.ownerDocument.createTextNode(el.innerText), el);\n                }\n\n            }\n\n        }\n\n    };\n\n}(window, document));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./addons/medium/vendor/medium-editor.js\n ** module id = 38\n ** module chunks = 3\n **/"],"sourceRoot":""}